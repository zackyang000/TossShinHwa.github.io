<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zack Yang - Articles]]></title><description><![CDATA[Zack Yang - Articles]]></description><link>http://zackyang.com</link><image><url>http://zackyang.com/img/favicon.png</url><title>Zack Yang - Articles</title><link>http://zackyang.com</link></image><generator>RSS for Node</generator><lastBuildDate>Fri, 28 Nov 2014 12:59:34 GMT</lastBuildDate><atom:link href="http://feed.zackyang.com/articles.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 28 Nov 2014 12:59:34 GMT</pubDate><copyright><![CDATA[2014 Zack Yang]]></copyright><language><![CDATA[cn]]></language><managingEditor><![CDATA[Zack Yang]]></managingEditor><webMaster><![CDATA[Zack Yang]]></webMaster><ttl>60</ttl><item><title><![CDATA[test rss]]></title><description><![CDATA[<p>test - content</p>
]]></description><link>http://zackyang.com/post/test-rss</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 28 Nov 2014 13:00:02 GMT</pubDate></item><item><title><![CDATA[痛苦，就是因为我们太弱；从容，就是因为我们变强了]]></title><description><![CDATA[<div class="page" id="readability-page-1">
<p>推荐这篇文章，无它，是因为这种心态令人释怀。</p>

<p><strong>正文：</strong></p>

<p>在LSE的一个社团的迎新的时候，我们每个人自我介绍。到一个了一身LV，爱马仕的女孩子自我介绍，说起爱好，她想了想说：喜欢跑车。然后很淡定的坐下了。很多同学你看我我看你，投以&ldquo;炫富&rdquo;的判断目光&mdash;&mdash;&ldquo;这个妹子是来拉仇恨的？！&rdquo;。</p>

<p>但是在后来天的小组聊天中，我们发现，这个女孩子很谦逊乖巧，真实纯朴，并不是我们所知的一些热衷&ldquo;炫富&rdquo;的人。事实的情况是，小女孩从小家境就很优越，周边朋友也都是相当的家境。在她和她的朋友们的生活中，一件香奈儿和我们很多人眼中的优衣库一样普通。她也从来没有觉得说&ldquo;喜欢跑车&rdquo;是炫耀,因为在她的生活圈子里，喜欢跑车和我们很多人喜欢邮票一样的普通。</p>

<p>为什么她&ldquo;衣着香奈儿爱马仕，说喜欢跑车&rdquo;我们就会觉得她炫耀，而如果她&ldquo;衣着only优衣库，喜欢吃肯德基&rdquo;我们就不会觉得呢？不是因为她炫耀，而是我们太low。挣扎在基本生活水平稳顶的我们面对一句从容淡定的&ldquo;喜欢跑车&rdquo;瞬间心生鄙视，原因不是人家爱炫，而是因为我们太穷。</p>

<p>本科毕业时候，一个同学去了某投行，他的年薪市场价60-80w一年大概。那年就业环境很烂，基本上能有个年薪12w的工作已经不错了。我们有同学得知后向他恭喜求包养，而他一脸无奈的说：其实这个工资我不满意。有些人对我说：他太能装B了，炫耀啥。&mdash;&mdash;&ldquo;你TMD还让不让我们纯屌丝活了？&rdquo;</p>

<p>但是，仔细想想他暑期实习的单位在高盛香港Office。而且我们同学之中他这个级别的大神以及一些在我们看来在成绩，身体素质，综合能力等等的并不如他的大神们，好几个找到了比他年薪更高的工作。对他而言，他的那个工作确实不是一份理想的工作。他100w＋年薪实力的人拿着60w的年薪的工资想想确实有些遗憾。</p>

<p>为什么他&ldquo;拿着60w+的工资遗憾工资低&rdquo;我们就会觉得他炫耀，而如果他&ldquo;每个月3000＋，抱怨工资低&rdquo;我们就不会觉得呢？不是因为他炫耀，而是我们太low。辛苦如狗一样的找工作的我们面对一份抱怨60w+年薪的无奈表情瞬间心生鄙视，原因不是人家爱炫，而是因我我们太挫。</p>

<p>有一个师兄，跟我们吐槽他找不到女朋友。但是这师兄每天身边莺歌燕舞，被各种美女环绕。给人感觉就是天天约会都不带重样的那种高富帅，结果跟我们一群屌丝抱怨没有女朋友。很多弟兄跪了，高呼：&ldquo;哥，咱能不炫妹子了吗！？求求你了。&rdquo;</p>

<p>后来这个师兄和一个海归二代女神在一起了。现在想想这位师兄金融工作，擅长国标和钢琴，父亲是大学教授，以及自己有六块腹肌。这种高质量男生也确实想找匹配的妹子不太容易。想想之前每天围绕在他身边的&ldquo;庸脂俗粉&rdquo;，确实难以让这位睥睨屌丝的男神上眼。他的吐槽确实情有可原。</p>

<p>为什么他&ldquo;吐槽没有女朋友&rdquo;我们就会觉得他炫耀呢？不是因为不是因为他在炫耀，而是我们太low。对于我们这些专职备胎的纯钓丝来说能有一个女友就不错了，那还能有机会像他一样那么多妹子机会。我们对他的抱怨，原因不是人家爱炫，而是因为我们太弱。</p>

<p>要这么回忆下去，八天八夜不够用。我们别人炫耀的鄙视大多诸如此类&mdash;&mdash;人家这不是炫耀，只是我们太low！我们总把一些人的无意识流露当作炫耀。而事实上被我们当作的炫耀的东西，在人家看来都普通到不用考虑说出来之后给人带来的感受&mdash;&mdash;谁会在乎告诉别人我吃了一碗难吃的米饭呢？当然你在每天吃不上米饭的人面前还是有可能被看作在&ldquo;炫耀&rdquo;。</p>

<p>在哪里欲求不满，我们就在哪里愤怒。我们在乎的不是他们有什么，而是跟他们比我们没有什么。我们评定一个人是否在炫耀不是根据他说的内容本身，而是根据我们对他所拥有东西的稀缺程度。我们对他的愤怒以及衍生出来的敌意，根源于我们的欲求不满。&ldquo;我想要的我弄不到，你有你还抱怨你太少，啊啊啊你个贱人！马太效应不带你这么玩的！&rdquo;&mdash;&mdash;&ldquo;欲望&rdquo;真的是&ldquo;化腐朽为神奇&rdquo;的魔法剂，一句普通的坦言经它点化立马变成炫耀。随口一说带来的敌意就这么洒脱，欲望一起，呼啸奔腾。</p>

<p>一个十恶不赦的学霸面对九十九分时候的纵横老泪只有另一个恶贯满盈的学霸才能理解。面对学渣嫉恶如仇的眼神，他们是那么的无辜又无助。一个肉嘟嘟的肥婆在一个难民面前一边吃肉一边吧唧嘴，这就是赤裸裸挑衅，但是在一个苗条的女神面前这就是自取其辱。在另一个肉呼呼的肥婆面前就会听见，&ldquo;诶油自己人啊！清蒸的还是红烧的？&rdquo;</p>

<p>想我天朝社会环境如此复杂，欲望诉求如此多元，稀缺资源如此纷繁，我们在日常生活中的语言忌讳则要多的多。因为你真不知道你多么习以为常的事情，在有些特定的情况下被一些人看来是多么的&ldquo;炫耀&rdquo;。如果你在六十年代，逢人就问&ldquo;吃了么&rdquo;，你就是在炫耀。你在工科学校你问，&ldquo;哥你看我妹子靓丽嘛？&rdquo;你就是个贱人。</p>

<p>当一个爱情美满，事业丰收，哈弗毕业，身材健硕的帅哥发出这样一条微博：&ldquo;今天和老婆开着新买的布加迪威龙回哈弗母校好开心！另外被同学说八块腹肌快没了，好着急！&rdquo;穷人会觉得他炫耀&ldquo;布加迪&rdquo;，老光棍觉得他炫耀&ldquo;和老婆&rdquo;，非名校会觉得他炫耀&ldquo;哈弗&rdquo;，排骨男会觉得他炫耀&ldquo;腹肌&rdquo;。当然，对于非名校的又老又穷的排骨男光棍来说，他这条微博就是开八个小号开黑之的节奏；而对于和微博楼主的一样实业有成，身体健硕，家庭和睦的哈弗同学来说，这就是一个随口抱怨，底下留言不过&ldquo;哈哈哈&rdquo;而已。</p>

<p>记得当年小沈阳说：&ldquo;啥叫善良，别人吃不上肉，你吃上肉别吧唧嘴就是善良。&rdquo;干投行的喊&ldquo;工资不够高&rdquo;，干咨询的哭了；干咨询的喊&ldquo;平台不够高&rdquo;，四大的哭了；四大的喊&ldquo;生活太单调&rdquo;，搞科研的哭了；搞科研的喊&ldquo;生活保障低&rdquo;，干传媒的哭了；干传媒的喊&ldquo;工作不自由&rdquo;；在国企的哭了；在国企的喊&ldquo;升迁无前途&rdquo;，公务员哭了；公务员喊&ldquo;社会地位低&rdquo;，干投行的哭了&hellip;&hellip;</p>

<p>&ldquo;曾经沧海难为水，除却巫山不是云&rdquo;。只有见过真正的大江大海，才不会轻易鄙夷未见过波浪滔滔的叹息。当我们再被某个言行激发反感甚至激怒而原因是我们认为他在炫耀的时候，我们可以明确的告诉自己：我在这方面很弱，确实很弱&mdash;&mdash;当我们还很弱小的时候，我们唯有学会淡定与包容。不要去攻击别人的&ldquo;炫耀&rdquo;，不管他是否是真的炫耀，因为这只会暴露我们的软弱&mdash;&mdash;而已。</p>

<p>哪怕你想更好的掩饰自己的短缺，也要更将注意力集中在进步。因为当你满心咒怨，谩骂一个炫耀贱人的时候，实际上人家只是无意识的将自己最普通的一面流露出来了而已。你这一怒，就暴露了你的阶层，你的贫穷，你的丑陋，你的愚蠢等等任何你本来一直想掩饰的方面&mdash;&mdash;没有比愤怒更赤裸裸地将一个人暴露的更彻底。</p>

<p>与其任每次面对炫耀的不爽和愤懑憋出内伤或者骂出外丑，倒不如好好利用这股黑暗能量，刺激自己工作更努力，学习更刻骨，化妆更认真，减肥更起劲。这样你不仅逃离了无休止的样貌羞辱，智力比拼，财富虐杀等带来的精神折磨，你还有更多的机会去缩小这段差距以及减少其带来的精神压迫。更为关键的是，在这个过程中你会慢慢认同这种差距的合理性&mdash;&mdash;先天禀赋，后天机遇和努力等综合作用下的差距合理性，你的痛苦会被这种合理性逐渐削平。</p>

<p>曾国藩说：&ldquo;欲宏其量，必扩其识&rdquo;。我们的愤怒源于我们的脆弱&mdash;&mdash;我们的欲求不满&mdash;&mdash;弱小而不能达到我们自身的期待。当我们的能力不能匹配上我们的野心，我们会很痛苦；当这种匹配被别人从容公开展示，我们就会更痛苦。痛苦，就是因为我们太弱。</p>

<p>变强，只有变强。当我们足够强大的时候，我们是很难被冒犯到的，因为曾经刺激到我们自尊心，被我们认为是炫耀的东西，已经变成我们家常便饭甚至不屑一顾的杂物。当年让我们心灵激荡的东西已经不会从新纳入我们眼界。从容，就是因为我们变强。</p>

<p>&ldquo;不以物喜不以己悲&rdquo;，归根结蒂是自身禀赋和能力为基础。只有开拓自己的眼界和见识，才能更有可能的过上一种更高质量的精神生活。从容，从来不是一种刻意做出来的状态，而是一种以实力为支撑自然散发。</p>

<p>（来源：公众号负负禅师）</p>

<p>&nbsp;</p>

<blockquote>
<p><span style="color:#008000">Zack: 有时候, 需要来点鸡汤文.</span></p>
</blockquote>

<p>&nbsp;</p>
</div>
]]></description><link>http://zackyang.com/post/pain-is-because-were-too-weak-calm-because-we-are-stronger</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 28 Nov 2014 11:22:56 GMT</pubDate></item><item><title><![CDATA[程序员常有，优秀程序员不常有]]></title><description><![CDATA[<p>本文源自 Quora 问答贴《为何没有更多人从事程序员的工作？》。问题描述：</p>

<p>如今的经济状况太槽糕了，很多人都在找工作。与此同时，许多科技公司非常渴望招到程序员，这活儿报酬极高还有很多福利。我相信（没啥证据）有目的地学习一年也许能让你学会胜任这些工作的技能。为什么没有更多的人这样做呢？供需关系不应该自动调整这种不平衡吗？</p>

<p>作为我并没有完全胡说的证据，有人最近做了一项调查，并且发现在纽约州对于每个失业人员都可以有1.7份 STEM 类*工作。链接看这里：http://www.news.cornell.edu/stories/2012/10/support-stem-education-training-teachers</p>

<p>*译者注：STEM为Science、Technology、Engineering 和 Math 的缩写，STEM Jobs意为在科学、技术、工程、数学这些方面的工作岗位。</p>

<h2>Brian Feldman的回答：</h2>

<p>成为优秀的程序员是极其困难的，并且这个过程不可能一蹴而就。</p>

<p>我们不可能期待去种一些树，然后一夜间收获有着2000年树龄的红杉树，无论其需求有多大。</p>

<h3>人格特点</h3>

<p>一个人首先得是自学者来学习编程。仅仅是超过你能写出可用的小程序这个基本水平，你也需要很多年在实践中学习一切必要的技能。从没有人仅通过上课和读书就成为了一个卓越的程序员。这通常需要无数小时的编程实践。并且和普遍流行的观点相反，计算机专业不是教你编程的，而是传授理论的。</p>

<p>作为程序员，你必须得有几乎无尽的毅力来不断继续尝试调错、修复和开发。坚持做到这些的人是需要具备特殊本领的，尤其是当你看起来没有取得任何进步的时候。这是非常需要具备的一项人格特点，而没有这种层次的毅力，足以使大多数没有毅力的人远离程序员这一职业。</p>

<ul>
	<li>你需要精通数学和善于解决问题。编程是解决各种各样的问题的。</li>
	<li>你需要有出色的短时记忆（和长时记忆）能力，这样你才能在大脑中像变戏法一样同时处理它们，而且你还要记得一个月前你写了什么。</li>
	<li>你需要对事物间如何相互关联的以及如何设计优良的架构有着深刻的了解。如果我在这个地方改动了一点，在其他地方可能会产生什么样的破坏呢？</li>
	<li>你需要对细节进行高度关注。&ldquo;接近&rdquo;这一词在编程中并不适用。在哪儿忘了一个分号？程序无法通过编译！错拼了一个函数名？你的程序可能在做和你期望中完全不同的事。</li>
</ul>

<p>不具备以上这些特点，足以淘汰多数人。</p>

<h3>Subject Matter 学科特点</h3>

<ul>
	<li>你需要对数据结构和类的概念有很深入的理解，并且知道何时以及如何使用它们。</li>
	<li>你需要熟知一些已经开发出来的函数库，这样才不至于去重复造轮子。</li>
	<li>你需要知道大量的基础（和高级）的算法，同样才不会去重复造轮子。</li>
	<li>通常你需要知道工作中的硬件的极限，这样你才可以做类似于恰当管理内存并且避免耗尽内存的事情，又或者合理利用内存来消除处理器内浪费的数据传输耗时从而加快处理过程。</li>
</ul>

<p>到这里你可以写程序了。好极了！但是你知道什么是包的结构，TCP/IP、HTML、CSS、用户接口设计，或者数据库吗？程序不是孤立地运行的。</p>

<p>有大量的知识你需要知道，而且它们还在不断变化！除非是你的主要关注领域，否则你不可能真正精通它。你不可能是一个&ldquo;周末程序员*&rdquo;。</p>

<p><strong>*译者注：意为程序员在周末也需要学习。</strong></p>

<h2>工作/生活环境</h2>

<p>你需要有大块不被打断的时间，这样你才不至于在编程（和学习编程）时注意力分散。很多人的工作（和家庭）环境很难提供这一点。电话又响了？好的，你又得花15分钟来重拾你的思路了。</p>

<p>你经常不得不在忙忙碌碌中对一些权衡利弊做出决定。当然，你可以写个程序来处理每件事情，但是一个人又会有多久才将&ldquo;0&rdquo;作为输入呢*？除此之外，我们跟不上计划，更重要的是立马使得程序启动并且正确运行。</p>

<p>*译者注：这个问题旨在说明为每件事写程序意义不大，因为事情重复出现的概率很小。</p>

<p>基于这些，你认为是下一种热门的编程语言也会过时并且5年之后没人会用它。现在你正在使用下一门很酷的语言，而它很有可能5年之后并不会被用到。你不得不时常关注这些事。</p>

<h3>还有管理层面的考虑</h3>

<p>程序员经常被当做工厂工人一样对待。没有编程才能（而且很少有商业头脑）的人经常去负责一些项目。他们认为程序员就是机器中的零件。而真相是：程序员是工匠，要从项目中得到最好的结果，最明智的做法就是去问精通编程的人事情该如何去做！对于每个最终超出预算和落后于进度的项目，往往是逼迫程序员去花大量没有补偿而且不被欣赏的时间去发布一款设计和测试都很槽糕的产品。</p>

<p>优秀的程序员意识到他们不会比蹩脚的程序员得到更多报酬，因为管理上看不出区别，在此之上还要做出额外工作来弥补低劣程序员的不足。而且优秀程序员会说出事情并且试着去优化，这经常会令想要摆脱他们的经理生畏（这种常见的就业趋势在其他文章中也被讨论到）。</p>

<p>够了，这些就容易明白为什么很多人对程序员这个职业感到厌倦，尤其是有大量的其他机会时。而一些甚至是一般般的程序员，只要他们擅长和人交往，就有足够的本事在其他各种各样的工作中取得成功。程序员这个行业可以很容易换行，而转进来却不同。</p>

<h3>优秀程序员貌似不太可能随随便便去找工作</h3>

<p>找程序员容易，找优秀程序员不容易。蹩脚的程序员可能一直在找工作。而优秀的程序员，如果公司意识到他们是优秀的，就该做所有能做的去留着他们，所以他们可能找工作的情况就少多了。而且一旦他们出来找工作，他们就会很挑剔他们想要工作的地方，而这点也可以解释为何一些公司声称&ldquo;没有什么好程序员了-我们能招到的都是蹩足的。&rdquo;</p>

<p>记得有个地方说过，一个优秀的程序员的价值是一般程序员的好几倍（见《<a href="http://blog.jobbole.com/334/" target="_blank">一些鲜为人知的编程真相</a>》），而蹩足的程序员实际上还有副作用。对于一般的和蹩足的程序员来说要成为优秀程序员真的很难（就算不是不可能）&mdash;&mdash;而且对于一般的初创企业来说，作为本该专注于快速开发推出产品的他们显然不值得这份投资。&#39;</p>

<p>&nbsp;</p>

<blockquote>
<p><span style="color:#008000">Zack: 这应该就是为什么各大公司都在喊招人难的原因吧.</span></p>
</blockquote>
]]></description><link>http://zackyang.com/post/programmers-often-talented-programmers-will-not-always-have</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 28 Nov 2014 11:17:54 GMT</pubDate></item><item><title><![CDATA[25岁一事无成；莫名恐慌还有无力感怎么办？]]></title><description><![CDATA[<p>当我看到这个问题时，我突然有种这个问题是我提出来的错觉。25岁，单身，宅男，人丑，没钱，少人爱，这就是我的外在条件。两年前从普通大学毕业，家里农村的，父母让我念完大学基本上耗尽了他们全部的精力，对我毕业以后的路基本上就没有任何帮助，当然我不怪他们，我从心里感激他们，爱他们，深深地，即使我从来不说出口。到这里，你以为我又在讲一个穷家少年逆袭的故事，错了，这不是故事，是现实，现实中没有那么多成功的故事，即使有，我也不是主人公。毕业后我去了外地的公司，是一个大型生产企业，我在那里呆了3个月后就回到西安。对家里人说的理由是在那里学不到东西，整天无所事事，浪费时光，即使后来离开后我觉得其实自己的时间没那么珍贵。因为我心里清楚的知道，自己其实是在留恋大学放浪的生活，对于工作是一种完全的抵触。</p>

<p>我回到西安后开始找工作，借住在同学宿舍，同学是在一个国企的小科研所上班，过的很轻松，起码我看来是这样。他上班的地方离宿舍就5分钟路程，步行。每天下班回来都会打几把dota，这是我们大学时真正的必修课。那时的我无比的羡慕他，希望找一份他那样的工作。可是你知道的，抱着这样一种心理是不可能找到的，尤其在西安这个大学生比农民工还多的地方。慢慢的就懈怠了下来，可能从来就没有积极过，窝在宿舍里打一天游戏，随时还要提防管理人员过来检查。是吧，有一种偷腥的快感，乐此不疲。过了一个多月，找工作的事情还是没有起色，同学对于我在宿舍整天打游戏也有点微词，终于在一个我睡懒觉的早上，管理人员推开了门，我的借住生涯也就正式结束了。只不过还是要谢谢这位同学，相反后来我们的关系也越来越好了。在大街上闲逛，不知道晚上去哪里，我想这样的感觉许多人都经历过。其实当初有几家单位是要我的，有一家待遇还可以，只不过要经常出差就拒绝了。后来再打电话过去的时候不同的是我被拒绝了。在网吧呆了几天之后，有一天妈妈给我打了个电话，我当时真的是想直接挂掉的，可还是接了，因为我太想她了。我骗她说我找到工作了，马上就要去上班了。妈妈只是说让我穿厚点，当时已经很冷了，问我要不要从家里带个厚被子。对不起，写这一段我流泪了。第二天我就找了一个销售的工作去上班了，不是因为我觉醒了，而是没钱了，带回来的积蓄快花光了，当时还吸烟，所以钱花的特别快。销售的工作特别好找，这个应该都知道。我在附近的城中村租了一个单间，挺便宜，一个人住也挺好。你以为日子就这么波澜不惊过下去了吗，我当时也是这么认为的。我还想着干几个月攒点钱回家过年，给妈妈买件衣服，给爸爸买条好烟，抽劣质烟整天咳嗽。可这是小说才有的剧情吧，我一度怀疑。事实是我去了一个星期后又不干了，原因很简单，我不喜欢销售。工科男，不善言辞，讨厌虚伪的笑容。腼腆幼稚木讷的我是干不了这个职业的。你以为我不想坚持，我也知道从这个门走出去可能就要饿肚子了。可我第一天上班就打瞌睡了，而且是在领导讲话的时候，因为平时这个点我还在睡觉，坚持了一周实在不想去了，看看当时的我有多矫情。更多的还是没有兴趣吧，那当时我有兴趣吗，我也说不上来，dota算吗。<br />
从此以后投出去的简历都石沉大海，我也懒得投了。每天窝在房间打游戏，一打就是一天，饭也不吃，也没钱吃。租的房间也没有阳光，白天黑夜也不分。打累了睡觉，起来继续，饿了下去买份炒面。行尸走肉，很贴切的词语。这样的日子过了两个月，借了同学3000块钱，没主动给家里打过一次电话<br />
。妈妈打过几次电话，听到我的语气不太对，问我是不是不高兴。我没法回答。让我回家转转，我说下星期吧，下星期吧。可是知子莫若母啊，一声叹息都瞒不过啊。挂完电话过了一个小时我手机收到一条消息，卡上多了1000块钱。哈哈，年轻人啊！</p>

<p>我当时想着这肯定是最后一次拿家里人的钱，我必须用这1000块钱找到工作，然后活下去。是的，我已经一天没吃饭了。房租也两个月没交了。可是两个月的萎靡的生活使我失去了走出去的勇气，我不停的给自己找借口。电话里约好的面试基本上一个都没去，每天早上都起不来，骗自己，这个去了肯定也不行，下一个靠谱的再去吧。日复一日，呵呵。<br />
1000块很快花完了，不到一个月。面临饿肚子的困境，房东阿姨还是挺好的，没有整天催房租，谢谢她。这个时候我大学宿舍哥们要来西安考试，我想是不是找他蹭几顿饭然后再借点钱，你看生活早已带走了我最后的廉耻。他和他女友一起来的，在李家村万达广场会面的时候，他俩远远的像我招手，而我觉得自己像一只饥饿的落魄之犬朝着食物走去，而事实上我确实没吃饭好久了。我俩拥抱后，他女友说，xx,你咋又瘦了，我说，饿得，呵呵。幽默吧，生活。他俩走后给我留了500块钱，你说他为什么不把钱甩我脸上呢，这样我拿钱的脸红的不会那么尴尬。这是他毕业后第一次来西安，说好的好久不见，不醉不归，可我他妈的自己连炒面都吃不起，操！从毕业后到我出国，他总共来了5,6次，我总共花了10块钱买了盒云烟一起抽。遇到我这样的朋友，你说他是有多么不幸。 阴差阳错我去上班了， 亲戚介绍的，搞设备，满世界跑。我很高兴啊，我说我终于可以挣钱了，我很卖力干活。在新疆最冷的时候呆了2个月，与世隔绝。零下30度，我接线的手经常失去知觉。就这样，回去的时候买不到火车票，因为快过年了。老板说那你留那过年吧，呵呵。看着当地人一个个从厂里回家过年，我真的是。想着父母在家盼着我回去过年，我真的是。我真的是傻逼啊，以前离家那么近几个月不回家不打电话。我诅咒这该死的老板，飞机票都舍不得买。我诅咒我，因为我活该。姐姐这时候打电话问我还不回去，我说我回不去了买不到票。我姐在电话里当时就生气了，她朝我吼，买不到票你给我说啊，你给我说啊，爸妈等着你回去过年呢，怕给你打电话你不高兴，整天催我问你。我是你姐啊，你回不来给我说啊，我给你订机票啊。我说，奥。我姐一个月2000多的工资，省吃俭用，衣服都舍不得买，给我订了一张1800块钱的机票让我回家过年。少年啊，你是世界的宠儿啊！ 回去后我问老板机票报销么，他说呵呵，你第一天上班啊。我去你妈的！老子不干了，这句话好熟悉，最近几年经常说。你看我当时多幼稚。为了屁大的事情都辞职。过年回家时还是给父母买了计划买的东西，给自己也买了一身行头。因为在我上大学时候有次回家穿了一双很旧的鞋子，我妈看到后就非常不高兴，后来她告诉我说谁的父母不希望自己的孩子打扮的漂漂亮亮的回家。所以我想这样的我可能会带给她一点宽慰。我在家里表现的高高兴兴的，每天早上睡懒觉被叫着起床时都会和妈妈开玩笑，撒娇赖着不起来，让她给我把饭留着，一如小时候一样。我在想她有多久没有过我带给她的笑容了，这段时间带给她的都是苦痛，都是煎熬。可是村里的邻居和七大姑八大姨永远也热衷于你的种种，看着父母略显尴尬的笑容，我在午夜哭出了声，我曾经可是他们的骄傲啊。所以我发誓要让妈妈成为全村妇女的羡慕，让她穿的漂亮站在村头和她们一起家常里短。我要让父亲在和男人们一起抽烟时能够大声的说话，我要让他的说话时的唾沫溅在别人的脸上！这才是儿子应该做的啊，我想当我赖在床上撒娇时妈妈的笑容背后肯定藏着淡淡地失望吧。在七大姑八大姨来我家走亲戚的时候，我和我姐夫用了不到一个下午的时间在我家的桌子上把她们的儿子女婿的钱包全部洗空了，奥，我忘了说了，我那时是一个赌徒。他们的对手是我，而我的对手，是生活。很快的我又回到西安开始继续我的求职生活，还是老样子。生活不会因为你发了一个誓言就改变它的样子，它一如既往的苦涩，暗淡。那个誓言除了在半夜醒来时经常压的我透不过气，没有任何益处。毕业大半年的我几乎没好好上过班，也谈不上什么技能或者经验。加上自己一直散漫的生活，我感觉工作离我越来越远。可我需要钱啊！一个同学从外地辞职回西安，住在我这里。他说想办个培训机构，说白了就是家教，他说好几个同学都做这个，有的一个月赚一万多。我想着以前自己也干过所以就不拍而和<br />
。他另外找了个有经验的同学于是我们的计划开始了，租房子，肯定不能再住我的地方了，家长会来看办学条件的。买办公用品，其实就两个桌子。等东西置办差不多的时候我俩的资金也差不多了，房租占了大多数。看着所剩无几的启动资金，我对自己说，怕个毛，老子是赌徒。可这次我输了，维持了4个月后散伙了，信用卡透支了5000块。我又回到一无所有的地步。</p>

<p>最后我俩在走投无路情况下去卖保险了，他女朋友在里面上班。关键是低门槛，有保底工资，有饭吃就好。一个多月唯一卖成功的一单提成还给了带我的师傅，在这期间交了个女朋友，她和我一样是新人，南京的。谈不上喜欢不喜欢，彼此慰藉罢了，因为我在她眼里看到的是同样的内容。这个我现在几乎想不起模样的女孩在那段时间里用她的身体还是给了我许多温暖，天知道那对一个男人来说有多重要，所以谢谢她。后来我从那离开后就基本上没再联系了，听说她现在还在那里，而且干的不错。祝福她。<br />
从保险公司离开后，我又做了各种不同的工作。没钱吃饭了在住的地方当过网管，吧台的妹子好像对我有点意思，她说她没见过这么斯文有气质的网管，但知道不是一类人所以就装着不知道。在天桥上摆地摊被城管追着骂，你个碎皮带个眼镜还跑那么快。当然也有七夕时一个晚上赚了600多块钱的兴奋。之后，无论做什么我都努力着不让自己颓废下去，就算站那发传单，我永远是最笔直的那个。当我遭遇不公，遇到挫折想想走过的这段日子，觉得有饭吃就好。我回家的次数也越来越多，后来有了个小外甥。看着他粉兜兜的模样，我想着要给他做个榜样。</p>

<p>遇见原来做设备的那个老板，他说让我继续跟着他做，我拒绝了。不是因为心存芥蒂，而是我想想想自己的路。<br />
我在当网管的时候有时间就看自己的专业书，你能想象在乌烟瘴气的网吧里，有一个安静的美男子在看着自动控制原理吗，反正那个吧台的妹子就是这样被我迷上的。我在练摊的那段时间白天有时间就去省图看书，晚上出摊。我知道这并不是我想要的生活，可除了眼下的生活我又能怎样，我接受，但不满足。我上网也会浏览行业内的招聘信息，看到合适的投个简历，抱有希望而不是侥幸。<br />
有个跨国公司给我打了个电话，说他们有个项目在非洲问我愿不愿意去。我说好啊！所以现在我就在非洲大陆上码字呢。</p>

<p>&nbsp;</p>

<blockquote>
<p><span style="color:#008000">Zack: &nbsp;知乎上看到此文. 真是&quot;DOTA毁一生,&nbsp;网游穷三代啊&quot; (黑). 有多少大学生又和他情况是一样呢.</span></p>
</blockquote>
]]></description><link>http://zackyang.com/post/25-nothing-the-legend-of-sasquatch-and-powerlessness-to-do</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 28 Nov 2014 11:02:32 GMT</pubDate></item><item><title><![CDATA[Angular运行原理揭秘 Part 1]]></title><description><![CDATA[<p>当你用AngularJS写的应用越多, 你会越发的觉得它相当神奇. 之前我用AngularJS实现了相当多酷炫的效果, 所以我决定去看看它的源码, 我想这样也许我能知道它的原理. 下面是我从源码中找到的一些可以了解AngularJS那些高级(和隐藏)功能如何实现的代码.

</p>
<h2>1) 依赖注入的实现原理</h2>
<p>依赖注入(DI)让我们可以不用自己实例化就能创建依赖对象的方法. 简单的来说, 依赖是以注入的方式传递的. 在Web应用中， Angular让我们可以通过DI来创建像Controllers和Directives这样的对象. 我们还可以创建自己的依赖对象, 当我们要实例化它们时, Angular能自动实现注入.

</p>
<p>最常见的被注入对象应该是 <code>$scope</code> 对象. 它可以像下面这样被注入的:

</p>
<pre><code>function MainCtrl ($scope) {
  // access to $scope
}
angular
  .module(‘app’)
  .controller(‘MainCtrl’, MainCtrl);</code></pre>
<p>对于从来没有接触过依赖注入的Javascript开发人员来说, 这样看起来只是像传递了一个参数. 而实际上, 他是一个依赖注入的占位符. Angular通过这些占位符, 把真正的对象实例化给我们, 让来看看他是怎么实现的.

</p>
<h3>function的参数</h3>
<p>当你运行你代码的时候, 如果你把function声明中的参数换成一个其它字母, 那么Angular就无法找到你真正想实例化的对象. 因为Angular在我们的function上使用了 <code>toString()</code> 方法, 他将把我们的整个function变成一个字符串， 然后解析function中声明的每一个参数. 它使用下面4个正则(RegExps)来完成这件事情.

</p>
<pre><code>var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;</code></pre>
<p>Angular做的第一件事情就是把我们的整个function转换为字符串, 这确实是Javascript很强大的地方. 转换后我们将得到如下字符串:

</p>
<pre><code>‘function MainCtrl ($scope) {...}’</code></pre>
<p>然后, 他用正则移除了在 <code>function()</code> 中有可能的所有的注释.

</p>
<pre><code>fnText = fn.toString().replace(STRIP_COMMENTS, &#39;&#39;);</code></pre>
<p>接着它提取其中的参数部分.

</p>
<pre><code>argDecl = fnText.match(FN_ARGS);</code></pre>
<p>最后它使用 <code>.split()</code> 方法来移除参数中的所有空格, 完美! Angular使用一个内部的 <code>forEach</code> 方法来遍历这些参数, 然后把他们放入一个 <code>$inject</code> 数组中.

</p>
<pre><code>forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
  arg.replace(FN_ARG, function(all, underscore, name) {
    $inject.push(name);
  });
});</code></pre>
<p>正如你现在想的, 这是一个很大的性能开销操作. 每个函数都要执行4个正则表达式还有大量的转换操作----这将给我们带来性能损失. 不过我们可以通过直接添加需要注入的对象到 <code>$inject</code> 数组中的方式来避免这个开销.

</p>
<h3>$inject</h3>
<p>我们可以在function对象上添加一个 <code>$inject</code> 属性来告诉Angular我们的依赖对象. 如果对象是存在的, Angular将实例化它. 这样的语法更具有可读性, 因为我们可以这些对象是被注入的. 下面是一个例子:

</p>
<pre><code>function SomeCtrl ($scope) {

}

SomeCtrl.$inject = [&#39;$scope&#39;];

angular
  .module(&#39;app&#39;, [])
  .controller(&#39;SomeCtrl&#39;, [&#39;$scope&#39;, SomeCtrl]);</code></pre>
<p>这将节省框架的大量操作, 它不用再解析function的参数, 也不用去操作数组(查看下一节数组参数), 它可以直接获取我们已经传递给他的 <code>$inject</code> 属性. 简单, 高效.

</p>
<p>理想情况下我们应该使用构建工具, 比如 <code>Grunt.js</code> 或者 <code>Gulp.js</code> 来做这个事情: 让他们在编译时生成相应的 <code>$injext</code> 属性, 这样能让Web应用运行的更快.

</p>
<p>注: 实际上上面介绍的内容并不涉如何实例化那些需要被注入的对象. 整个操作只是标记出需要的名字----实例化的操作将由框架的另一部分来完成.

</p>
<h3>数组参数</h3>
<p>最后要提到的是数组参数. 数组的前面每个元素的名字和顺序, 刚是数组最后一个元素function的参数名字和顺序. 比如: <code>[‘$scope’, function ($scope) {}]</code>.

</p>
<p>这个顺序是非常重要的, 因为Angular是以这个顺序来实例化对象. 如果顺序不正确, 那么它可能将其它对象错误的实例化到你真正需要的对象上.

</p>
<pre><code>function SomeCtrl ($scope, $rootScope) {

}

angular
  .module(&#39;app&#39;, [])
  .controller(&#39;SomeCtrl&#39;, [&#39;$scope&#39;, ‘$rootScope’, SomeCtrl]);</code></pre>
<p>像上面一样, 我们需要做的就是把函数最为数组的最后一个元素. 然后Angular会遍历前面的每一个元素, 把它们添加到 <code>$inject</code> 数组中. 当Angular开始解析一个函数的时候, 它会先检查目标对象是不是一个数组类型, 如果是的话, 他将把最后一个元素作为真正的function, 其它的元素都作为依赖对象添加到 <code>$inject</code> 中.

</p>
<pre><code>} else if (isArray(fn)) {
  last = fn.length - 1;
  assertArgFn(fn[last], &#39;fn&#39;);
  $inject = fn.slice(0, last);
}</code></pre>
<h2>2) Factory和Service</h2>
<p>Factory和Service看起来非常相似, 以至于很多开发人员都无法理解它们有什么不同.

</p>
<p>当实例化一个 <code>.service()</code> 的时候, 其实他将通过调用 <code>new Service()</code> 的形式来给我们创建一个新的实例, <code>.service()</code> 的方法像是一个构造函数.

</p>
<p>服务(service)实际上来说是一个最基本的工厂(factory), 但是它是通过 <code>new</code> 来创建的, 你需要使用 <code>this</code> 来添加你需要的变量和函数, 最后返回这个对象.

</p>
<p>工厂(factory)实际上是非常接近面向对象中的&quot;工厂模式(factory pattern)&quot;. 当你调用时, 它会创建新的实例. 本质上来说, 那个实例是一个全新的对象.

</p>
<p>下面是Angular内部实际执行的源码:

</p>
<pre><code>  function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }

  function service(name, constructor) {
    return factory(name, [&#39;$injector&#39;, function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }</code></pre>
<h2>3) 从 $rootScope 中创建新的 $scope</h2>
<p>所有的scope对象都继承于 <code>$rootScope</code>, <code>$rootScope</code> 又是通过 <code>new Scope()</code> 来创建的. 所有的子scope都是用过调用 <code>$scope.$new()</code> 来创建的.

</p>
<pre><code>var $rootScope = new Scope();</code></pre>
<p>它内部有一个 <code>$new</code> 方法, 让新的scope可以从原型链上引用它们的父scope, 子scope(为了digest cycle), 以及前后的scope.

</p>
<p>从下面的代码可以看出, 如果你想创建一个独立的scope, 那么你应该使用 <code>new Scope()</code>, 否则它将以继承的方式来创建.

</p>
<p>我省略了一些不必要的代码, 下面是他的核心实现

</p>
<pre><code>  $new: function(isolate) {
    var child;

    if (isolate) {
      child = new Scope();
      child.$root = this.$root;
    } else {
      // Only create a child scope class if somebody asks for one,
      // but cache it to allow the VM to optimize lookups.
      if (!this.$$ChildScope) {
        this.$$ChildScope = function ChildScope() {
          this.$$watchers = null;
        };
        this.$$ChildScope.prototype = this;
      }
      child = new this.$$ChildScope();
    }
    child[&#39;this&#39;] = child;
    child.$parent = this;
    return child;
  }</code></pre>
<p>理解这一点对写测试非常重要, 如果你想测试你的Controller, 那么你应该使用 <code>$scope.$new()</code> 来创建$scope对象. 明白scope是如何创建的在测试驱动开发(TDD)中是十分重要的, 这将更加有助于你mock module.

</p>
<h2>4) Digest Cycle</h2>
<p>digest cycle的实现其实就是我们经常看到的 <code>$digest</code> 关键字, Angular强大的双向绑定功能依赖于它. 每当一个model被更新时他都会运行, 检查当前值, 如果和以前的不同, 将触发listener. 这些都是脏检查(dirty checking)的基础内容. 他会检查所有的model, 与它们原来的值进行比较, 如果不同, 触发listener, 循环, 直到不在有变化为止.

</p>
<pre><code>$scope.name = &#39;Todd&#39;;

$scope.$watch(function() {
    return $scope.name;
}, function (newValue, oldValue) {
    console.log(&#39;$scope.name was updated!&#39;);
} );</code></pre>
<p>当你调用 <code>$scope.$watch</code> 的时候, 实际上干了2件事情. watch的第一个参数是一个function, 这个function的返回你想监控的对象(如果你传递的是一个string, Angular会把他转换为一个function). digest cycle 运行的时候, 它会调用这个function. 第二个参数也是一个function, 当第一个function的值发生变化的时候它会被调用. 让我们看看他是怎么实现监控的:

</p>
<pre><code>$watch: function(watchExp, listener, objectEquality) {
    var get = $parse(watchExp);

    if (get.$$watchDelegate) {
      return get.$$watchDelegate(this, listener, objectEquality, get);
    }
    var scope = this,
        array = scope.$$watchers,
        watcher = {
          fn: listener,
          last: initWatchVal,
          get: get,
          exp: watchExp,
          eq: !!objectEquality
        };

    lastDirtyWatch = null;

    if (!isFunction(listener)) {
      watcher.fn = noop;
    }

    if (!array) {
      array = scope.$$watchers = [];
    }
    // we use unshift since we use a while loop in $digest for speed.
    // the while loop reads in reverse order.
    array.unshift(watcher);

    return function deregisterWatch() {
      arrayRemove(array, watcher);
      lastDirtyWatch = null;
    };
  }</code></pre>
<p>这个方法将会把参数添加到scope中的 <code>$$watchers</code> 数组中, 并且它会返回一个function, 以便于你想结束这个监控操作.

</p>
<p>然后digest cycle会在每次调用 <code>$scope.$apply</code> 或者 <code>$scope.$digest</code> 的时候运行. <code>$scope.$apply</code> 实际上是一个rootScope的包装, 他会从根$rootScope向下广播. 而 <code>$scope.$digest</code> 只会在当前scope中运行(并向下级scope广播).

</p>
<pre><code>$digest: function() {
    var watch, value, last,
        watchers,
        asyncQueue = this.$$asyncQueue,
        postDigestQueue = this.$$postDigestQueue,
        length,
        dirty, ttl = TTL,
        next, current, target = this,
        watchLog = [],
        logIdx, logMsg, asyncTask;

    beginPhase(&#39;$digest&#39;);

    lastDirtyWatch = null;

    do { // &quot;while dirty&quot; loop
      dirty = false;
      current = target;

      traverseScopesLoop:
      do { // &quot;traverse the scopes&quot; loop
        if ((watchers = current.$$watchers)) {
          // process our watches
          length = watchers.length;
          while (length--) {
            try {
              watch = watchers[length];
              // Most common watches are on primitives, in which case we can short
              // circuit it with === operator, only when === fails do we use .equals
              if (watch) {
                if ((value = watch.get(current)) !== (last = watch.last) &amp;&amp;
                    !(watch.eq
                        ? equals(value, last)
                        : (typeof value === &#39;number&#39; &amp;&amp; typeof last === &#39;number&#39;
                           &amp;&amp; isNaN(value) &amp;&amp; isNaN(last)))) {
                  dirty = true;
                  lastDirtyWatch = watch;
                  watch.last = watch.eq ? copy(value, null) : value;
                  watch.fn(value, ((last === initWatchVal) ? value : last), current);
                  if (ttl &lt; 5) {
                    logIdx = 4 - ttl;
                    if (!watchLog[logIdx]) watchLog[logIdx] = [];
                    logMsg = (isFunction(watch.exp))
                        ? &#39;fn: &#39; + (watch.exp.name || watch.exp.toString())
                        : watch.exp;
                    logMsg += &#39;; newVal: &#39; + toJson(value) + &#39;; oldVal: &#39; + toJson(last);
                    watchLog[logIdx].push(logMsg);
                  }
                } else if (watch === lastDirtyWatch) {
                  // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                  // have already been tested.
                  dirty = false;
                  break traverseScopesLoop;
                }
              }
            } catch (e) {
              $exceptionHandler(e);
            }
          }
        }

      } while ((current = next));

      // `break traverseScopesLoop;` takes us to here

      if((dirty || asyncQueue.length) &amp;&amp; !(ttl--)) {
        clearPhase();
        throw $rootScopeMinErr(&#39;infdig&#39;,
            &#39;{0} $digest() iterations reached. Aborting!\n&#39; +
            &#39;Watchers fired in the last 5 iterations: {1}&#39;,
            TTL, toJson(watchLog));
      }

    } while (dirty || asyncQueue.length);

    clearPhase();

    while(postDigestQueue.length) {
      try {
        postDigestQueue.shift()();
      } catch (e) {
        $exceptionHandler(e);
      }
    }
  }</code></pre>
<p>这个实现非常有才, 虽然我没有进去看它是如何向下级广播的, 但这里的关键是循环遍历 <code>$$watchers</code>, 执行里面的函数(就是那个你通过 <code>$scope.$watch</code> 注册的第一个function), 然后如果得到和之前不同的值, 他又将调用listener(那个你传递的第二个function). 然后, 砰! 我们得到了一个变量发生改变的通知. 关键是我们是如何知道一个值发生变化了的? 当一个值被更新的时候digest cycle会运行(尽管它可能不是必须的). 比如在 <code>ng-model</code> 上, 每一个keydown事件都会触发digest cycle.

</p>
<h3>$scope.$apply</h3>
<p>当你想在Angular框架之外做点什么的时候, 比如在 <code>setTimeout</code> 的方法里面你想让Angular知道你可能改变了某个model的值. 那么你需要使用 <code>$scope.$apply</code>, 你把一个function放在它的参数之中, 那么他会在Angular的作用域运行它, 然后在 <code>$rootScope</code> 上调用 <code>$digest</code>. 它将向它下面所有的scope进行广播, 这将触发你注册的所有listeners和watchers. 这一点意味着Angular可以知道你更新了任何作用域的变量.

</p>
<h2>通过特征检查和闭包实现Polyfilling</h2>
<p>Angular实现polyfilling的方式非常巧妙, 它不是用像 <code>Function.prototype.bind</code> 一样的方式直接绑定在一个对象的原型链上. Angular会调用一个function来判定浏览器是否支持这个方法(基础特征检查), 如果存在它会直接返回这个方法. 如果不存在, 他将使用一段简短的代码来实现它.

</p>
<p>这样是比较安全的方式. 如果直接在原型链上绑定方法, 那么它可能会覆盖其它类库或者框架的代码(甚至是我们自己的代码). 闭包也让我们可以更安全的储存和计算那些临时变量, 如果存在这个方法, Angular将直接调用. 原生方法通常会带来极大的性能提升.

</p>
<h3>函数功能检查</h3>
<p>Angular支持IE8+的浏览器(撰写本文时Angular版本是1.2.x), 这意味着它还是要兼容老的浏览器, 为它们提供那些没有的功能. 让我们来用 <code>indexOf</code> 来举例.

</p>
<pre><code>function indexOf(array, obj) {
  if (array.indexOf) return array.indexOf(obj);

  for (var i = 0; i &lt; array.length; i++) {
    if (obj === array[i]) return i;
  }
  return -1;
}</code></pre>
<p>它直接取代了原来的 <code>array.indexOf</code> 方法, 它自己实现了indexOf方法. 但如果浏览器支持这个函数, 他将直接调用原生方法. 十分简单.

</p>
<h3>闭包</h3>
<p> 实现闭包可以用一个立即执行函数(IIFE). 比如下面这个 <code>isArray</code> 方法, 如果浏览器不支持这个功能, 它将使用闭包返回一个 <code>Array.isArray</code> 的实现. 如果 <code>Array.isArray</code> 是一个函数, 那么它将直接使用原生方法----又一个提高性能的方法. IIFE可以让我们十分的方便来封装一些东西, 然后只返回我们需要的内容.

</p>
<pre><code> var isArray = (function() {
  if (!isFunction(Array.isArray)) {
    return function(value) {
      return toString.call(value) === &#39;[object Array]&#39;;
    };
  }
  return Array.isArray;
})();</code></pre>
<p>这就是我看的第一部分Angular源码, 第二部分将在下周发布.

</p>
<p>原文: <a href="http://www.binpress.com/tutorial/angular-js-looking-under-the-hood/153">AngularJS: Looking under the hood [Part 1]</a></p>
]]></description><link>http://zackyang.com/post/AngularJS-Looking under the hood-part-1</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 06 Nov 2014 02:59:12 GMT</pubDate></item><item><title><![CDATA[在AngularJS中使用的表单验证功能]]></title><description><![CDATA[<p>验证功能是AngularJS里面最酷炫的功能之一，它可以让你写出一个具有良好用户体验的Web应用。

</p>
<p>在AngularJS中，有许多用于验证的指令。我们将先学习几个最流行的内置指令，然后再创建一个自定义验证规则的指令。

</p>
<pre><code>&lt;form name=&quot;form&quot;&gt;
  &lt;label name=&quot;email&quot;&gt;Your email&lt;/label&gt;
  &lt;input type=&quot;email&quot; name=&quot;email&quot; ng-model=&quot;email&quot; placeholder=&quot;Email Address&quot; /&gt;
&lt;/form&gt;</code></pre>
<p>AngularJS可以让我们轻松的处理客户端验证。虽然我们不能仅靠客户端验证来保证我们Web应用的安全性，但他们提供了良好用户体验。

</p>
<p>我们首先必须确保<code>form</code>上标签有一个<code>name</code>属性，像上面的例子一样。

</p>
<p>我们可以进行一些基本的验证，例如最小长度，最大长度，等等，这些都是HTML5自带的属性验证功能。

</p>
<p><strong>Tips:</strong> 通常需要在<code>form</code>标签中加上<code>novalidate</code>属性，这样可以禁用浏览器自带的验证功能，从而使用AngularJS提供的。

</p>
<p>下面来看看我们可以在input中设置哪些验证：

</p>
<h3>必填</h3>
<p>验证是否已输入文字，只需在标签上加上<code>required</code>：

</p>
<pre><code>&lt;input type=&quot;text&quot; required /&gt;</code></pre>
<h3>最小长度</h3>
<p>验证至少输入{number}个字符，使用指令<code>ng-minlength=“{number}”</code>：

</p>
<pre><code>&lt;input type=&quot;text&quot; ng-minlength=5 /&gt;</code></pre>
<h3>最大长度</h3>
<p>验证至多输入{number}个字符，使用指令<code>ng-maxlength=“{number}”</code>：

</p>
<pre><code>&lt;input type=&quot;text&quot; ng-maxlength=20 /&gt;</code></pre>
<h3>正则匹配</h3>
<p>确保输入匹配一个正则表达式，使用指令<code>ng-pattern=&quot;/PATTERN/&quot;</code>:

</p>
<pre><code>&lt;input type=&quot;text&quot; ng-pattern=&quot;/a-zA-Z/&quot; /&gt;</code></pre>
<h3>Email</h3>
<p>验证输入是一个Email，设置<code>input</code>的<code>type</code>属性为<code>email</code>：

</p>
<pre><code>&lt;input type=&quot;email&quot; name=&quot;email&quot; ng-model=&quot;user.email&quot; /&gt;</code></pre>
<h3>数字</h3>
<p>验证输入是一个数字，设置<code>input</code>的<code>type</code>属性为<code>number</code>：

</p>
<pre><code>&lt;input type=&quot;number&quot; name=&quot;number&quot; ng-model=&quot;user.age&quot; /&gt;</code></pre>
<h3>Url</h3>
<p>验证输入是一个URL，设置<code>input</code>的<code>type</code>属性为<code>url</code>：

</p>
<pre><code>&lt;input type=&quot;url&quot; name=&quot;homepage&quot; ng-model=&quot;user.facebook_url&quot; /&gt;</code></pre>
<h3>自定义验证</h3>
<p>AngularJS可以很容易的使用指令来添加自定义验证。例如，我们要验证我们的用户名是可用的（在数据库中不重复）。要做到这一点，我们将实现一个指令，它在输入字符变化时触发一个Ajax请求：

</p>
<pre><code>var app = angular.module(&#39;validationExample&#39;, []);

app.directive(&#39;ensureUnique&#39;, [&#39;$http&#39;, function($http) {
  return {
    require: &#39;ngModel&#39;,
    link: function(scope, ele, attrs, c) {
      scope.$watch(attrs.ngModel, function() {
        $http({
          method: &#39;POST&#39;,
          url: &#39;/api/check/&#39; + attrs.ensureUnique,
          data: {&#39;field&#39;: attrs.ensureUnique}
        }).success(function(data, status, headers, cfg) {
          c.$setValidity(&#39;unique&#39;, data.isUnique);
        }).error(function(data, status, headers, cfg) {
          c.$setValidity(&#39;unique&#39;, false);
        });
      });
    }
  }
}]);</code></pre>
<h2>验证表单状态</h2>
<p>AngularJS将DOM验证的结果保存在$scope对象中。这使我们能够实时做出一些处理。提供给我们的属性有：

</p>
<p>请注意，这是这个属性的格式：

</p>
<pre><code>formName.inputFieldName.property</code></pre>
<h3>未修改过的表单</h3>
<p>表示用户是否修改了表单。如果为<code>ture</code>，表示没有修改过：

</p>
<pre><code>formName.inputFieldName.$pristine;</code></pre>
<h3>修改的表单</h3>
<p>当且用户是否已经修改过表单：

</p>
<pre><code>formName.inputFieldName.$dirty</code></pre>
<h3>经过验证的表单</h3>
<p>表示否通过验证：

</p>
<pre><code>formName.inputFieldName.$valid</code></pre>
<h3>未通过验证的表单</h3>
<p>表示否通过验证。如果表单当前没有通过验证，他将为true：

</p>
<pre><code>formName.inputFieldName.$invalid</code></pre>
<p>最后两个属性在用于DOM元素的显示或隐藏时是特别有用的。当然，如果想要设置特定的class时，他们也是非常有用的。

</p>
<h3>错误</h3>
<p>另一个有用的属性是AngularJS提供的$error对象。这个对象包含每一个无效的<code>input</code>验证的集合。为了访问这个属性，使用下面的语法：

</p>
<pre><code>formName.inputfieldName.$error</code></pre>
<p>如果验证失败，则此属性将是true的(因为length&gt;0)。

</p>
<h2>控制验证时的样式</h2>
<p>当AngularJS处理的验证时，它将根据验证的状态增加一些特定的class属性。

</p>
<p>这些class是:

</p>
<pre><code>.ng-pristine {}
.ng-dirty {}
.ng-valid {}
.ng-invalid {}</code></pre>
<p>这些class对应着其对应的验证对象的结果。

</p>
<p>当一个字段是无效的, <code>.ng-invalid</code>将被应用到这个字段上。我们可以通过css来设置这些class的样式:

</p>
<pre><code>input.ng-invalid {
  border: 1px solid red;
}
input.ng-valid {
  border: 1px solid green;
}</code></pre>
<h2>全部放一起试试</h2>
<p>让我们编写一个注册表单。本申请表单将包括姓名，Email，以及用户名。

</p>
<p>让我们定义一个form表单:

</p>
<pre><code>&lt;form name=&quot;signup_form&quot; novalidate ng-submit=&quot;signupForm()&quot;&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;Signup&lt;/legend&gt;

    &lt;button type=&quot;submit&quot; class=&quot;button radius&quot;&gt;Submit&lt;/button&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;</code></pre>
<p>这个表单的名字是<code>signup_form</code>，当我们点击提交时我们将调用<code>signupForm()</code>方法.

</p>
<p>现在，让我们添加用户的Name:

</p>
<pre><code>&lt;div class=&quot;row&quot;&gt;
  &lt;div&gt;
    &lt;label&gt;Your name&lt;/label&gt;
    &lt;input type=&quot;text&quot; 
        placeholder=&quot;Name&quot; 
        name=&quot;name&quot; 
        ng-model=&quot;signup.name&quot; 
        ng-minlength=3 
        ng-maxlength=20 required /&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>我们增加了一个名字为name的输入框，并且将对象绑定在<code>$scope</code>对象的<code>signup.name</code>对象上（通过ng-model）。

</p>
<p>我们还设置了几个验证。这些验证分别是：必须有一个长度为3或更多的名字。并且最大长度限制为20个字符。最后，名称应该是必填的。

</p>
<p>让我们用属性来控制显示还是隐藏错误信息。我们还将使用<code>$dirty</code>属性，以确保当用户没有输入字符前错误信息不会显示：

</p>
<pre><code>&lt;div class=&quot;row&quot;&gt;
  &lt;div&gt;
    &lt;label&gt;Your name&lt;/label&gt;
    &lt;input type=&quot;text&quot; 
        placeholder=&quot;Name&quot; 
        name=&quot;name&quot; 
        ng-model=&quot;signup.name&quot; 
        ng-minlength=3 
        ng-maxlength=20 required /&gt;
   &lt;div class=&quot;error&quot; 
        ng-show=&quot;signup_form.name.$dirty &amp;&amp; signup_form.name.$invalid&quot;&gt;
    &lt;small class=&quot;error&quot; 
        ng-show=&quot;signup_form.name.$error.required&quot;&gt;
        Your name is required.
    &lt;/small&gt;
    &lt;small class=&quot;error&quot; 
            ng-show=&quot;signup_form.name.$error.minlength&quot;&gt;
            Your name is required to be at least 3 characters
    &lt;/small&gt;
    &lt;small class=&quot;error&quot; 
            ng-show=&quot;signup_form.name.$error.maxlength&quot;&gt;
            Your name cannot be longer than 20 characters
    &lt;/small&gt;
  &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>在之前，当输入内容改变时它只能告诉我们我们输入是否有效。现在，我们将看到当那些没有通过的验证时的错误信息。

</p>
<p>让我们接着看Email验证:

</p>
<pre><code>&lt;div class=&quot;row&quot;&gt;          
  &lt;div&gt;
    &lt;label&gt;Your email&lt;/label&gt;
    &lt;input type=&quot;email&quot; 
      placeholder=&quot;Email&quot; 
      name=&quot;email&quot; 
      ng-model=&quot;signup.email&quot; 
      ng-minlength=3 ng-maxlength=20 required /&gt;
    &lt;div class=&quot;error&quot; 
         ng-show=&quot;signup_form.email.$dirty &amp;&amp; signup_form.email.$invalid&quot;&gt;
      &lt;small class=&quot;error&quot; 
             ng-show=&quot;signup_form.email.$error.required&quot;&gt;
             Your email is required.
      &lt;/small&gt;
      &lt;small class=&quot;error&quot; 
             ng-show=&quot;signup_form.email.$error.minlength&quot;&gt;
              Your email is required to be at least 3 characters
      &lt;/small&gt;
      &lt;small class=&quot;error&quot; 
             ng-show=&quot;signup_form.email.$error.email&quot;&gt;
             That is not a valid email. Please input a valid email.
      &lt;/small&gt;
      &lt;small class=&quot;error&quot; 
             ng-show=&quot;signup_form.email.$error.maxlength&quot;&gt;
              Your email cannot be longer than 20 characters
      &lt;/small&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>这一次，我们增加了Email字段。请注意，我们设置了input的type属性为email并且添加了<code>$error.email</code>错误信息。这是基于AngularJS的Email验证（使用了HTML5属性）。

</p>
<p>最后，让我们来看看在我们的最后一个验证，用户名：

</p>
<pre><code>&lt;div&gt;
  &lt;label&gt;Username&lt;/label&gt;
    &lt;input type=&quot;text&quot; 
            placeholder=&quot;Desired username&quot; 
            name=&quot;username&quot; 
            ng-model=&quot;signup.username&quot; 
            ng-minlength=3 
            ng-maxlength=20 
            ensure-unique=&quot;username&quot; required /&gt;
  &lt;div class=&quot;error&quot; ng-show=&quot;signup_form.username.$dirty &amp;&amp; signup_form.username.$invalid&quot;&gt;
    &lt;small class=&quot;error&quot; ng-show=&quot;signup_form.username.$error.required&quot;&gt;Please input a username&lt;/small&gt;
    &lt;small class=&quot;error&quot; ng-show=&quot;signup_form.username.$error.minlength&quot;&gt;Your username is required to be at least 3 characters&lt;/small&gt;
    &lt;small class=&quot;error&quot; ng-show=&quot;signup_form.username.$error.maxlength&quot;&gt;Your username cannot be longer than 20 characters&lt;/small&gt;
    &lt;small class=&quot;error&quot; ng-show=&quot;signup_form.username.$error.unique&quot;&gt;That username is taken, please try another&lt;/small&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>在我们的最后一个字段，我们使用之前编写的自定义验证指令：

</p>
<pre><code>app.directive(&#39;ensureUnique&#39;, [&#39;$http&#39;, function($http) {
  return {
    require: &#39;ngModel&#39;,
    link: function(scope, ele, attrs, c) {
      scope.$watch(attrs.ngModel, function() {
        $http({
          method: &#39;POST&#39;,
          url: &#39;/api/check/&#39; + attrs.ensureUnique,
          data: {&#39;field&#39;: attrs.ensureUnique}
        }).success(function(data, status, headers, cfg) {
          c.$setValidity(&#39;unique&#39;, data.isUnique);
        }).error(function(data, status, headers, cfg) {
          c.$setValidity(&#39;unique&#39;, false);
        });
      });
    }
  }
}]);</code></pre>
<p>当表单输入是有效的时，它将发送POST api/check/username请求到服务器来检查用户名是否可用。很明显，因为我们在这里只谈论前端代码，我们写后端代码，尽管很容易。

</p>
<h2>更新:</h2>
<p>根据评论，我加入了服务器超时检查。要查看完整的源代码，请点击<a href="https://gist.github.com/auser/6417470">这里</a>。

</p>
<p>最后，我们加上提交按钮，根据验证是否有效使用ng-disabled来控制按钮的禁用和启用：

</p>
<pre><code>&lt;button type=&quot;submit&quot; ng-disabled=&quot;signup_form.$invalid&quot; class=&quot;button radius&quot;&gt;Submit&lt;/button&gt;</code></pre>
<p>正如我们上面所说的，表单是否有效的属性<code>$invalid</code>给我们提供了便利。

</p>
<h2>更新 2:</h2>
<p>虽然及时验证很棒，它可以立即提醒用户，但是当他们正在输入很长的能通过验证的文字时，他们将在输入中途看到错误提示。有更好的方式来处理验证：当用户点击提交时，或者当他们将光标移开输入框之后。让我们来看看这2种方式。

</p>
<h3>点击提交后显示验证信息</h3>
<p>要在用户试图提交表单时显示的验证，你可以通过在scope中设置一个&#39;submitted&#39;值，并检查该值来控制显示错误。

</p>
<p>让我们来看看第一个例子，只有在点击提交表单时才显示错误。使用<code>ng-show</code>指令来控制显示，我们可以添加一个检查，看是否已点击提交按钮：

</p>
<pre><code>&lt;form name=&quot;signup_form&quot; novalidate ng-submit=&quot;signupForm()&quot;&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;Signup&lt;/legend&gt;
    &lt;div class=&quot;row&quot;&gt;
      &lt;div&gt;
        &lt;label&gt;Your name&lt;/label&gt;
        &lt;input type=&quot;text&quot; 
            placeholder=&quot;Name&quot; 
            name=&quot;name&quot; 
            ng-model=&quot;signup.name&quot; 
            ng-minlength=3 
            ng-maxlength=20 required /&gt;
       &lt;div class=&quot;error&quot; 
            ng-show=&quot;signup_form.name.$dirty &amp;&amp; signup_form.name.$invalid &amp;&amp; signup_form.submitted&quot;&gt;
        &lt;small class=&quot;error&quot; 
            ng-show=&quot;signup_form.name.$error.required&quot;&gt;
            Your name is required.
        &lt;/small&gt;
        &lt;small class=&quot;error&quot; 
                ng-show=&quot;signup_form.name.$error.minlength&quot;&gt;
                Your name is required to be at least 3 characters
        &lt;/small&gt;
        &lt;small class=&quot;error&quot; 
                ng-show=&quot;signup_form.name.$error.maxlength&quot;&gt;
                Your name cannot be longer than 20 characters
        &lt;/small&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;button type=&quot;submit&quot; class=&quot;button radius&quot;&gt;Submit&lt;/button&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;</code></pre>
<p> 现在，那个错误信息只将在<code>signup_form.submitted</code>为<code>true</code>时才显示。我们可以这样实现signupForm方法：

</p>
<pre><code>app.controller(&#39;signupController&#39;, [&#39;$scope&#39;, function($scope) {
  $scope.submitted = false;
  $scope.signupForm = function() {
    if ($scope.signup_form.$valid) {
      // Submit as normal
    } else {
      $scope.signup_form.submitted = true;
    }
  }
}]);</code></pre>
<p>现在，当用户尝试提交表单并且同时有一个无效的元素时，你可以捕获它，并告诉他们错误的原因。

</p>
<h3>当时去焦点时验证错误</h3>
<p>如果你想保留错误验证的实时性，那么可以在用户离开该输入框时显示错误信息。要做到这一点，我们可以添加一个指令，将添加一个新的变量。

</p>
<p>我们使用<code>ngFocus</code>指令：

</p>
<pre><code>app.directive(&#39;ngFocus&#39;, [function() {
  var FOCUS_CLASS = &quot;ng-focused&quot;;
  return {
    restrict: &#39;A&#39;,
    require: &#39;ngModel&#39;,
    link: function(scope, element, attrs, ctrl) {
      ctrl.$focused = false;
      element.bind(&#39;focus&#39;, function(evt) {
        element.addClass(FOCUS_CLASS);
        scope.$apply(function() {ctrl.$focused = true;});
      }).bind(&#39;blur&#39;, function(evt) {
        element.removeClass(FOCUS_CLASS);
        scope.$apply(function() {ctrl.$focused = false;});
      });
    }
  }
}]);</code></pre>
<p>要使用<code>ngFocus</code>，我们只需要简单加上这个指令到输入框元素上，像这样：

</p>
<pre><code>&lt;input ng-class=&quot;{error: signup_form.name.$dirty &amp;&amp; signup_form.name.$invalid}&quot; type=&quot;text&quot; placeholder=&quot;Name&quot; name=&quot;name&quot; ng-model=&quot;signup.name&quot; ng-minlength=3 ng-maxlength=20 required ng-focus /&gt;</code></pre>
<p>加上<code>ngFocus</code>指令后，将在输入框的<code>blur</code>和<code>focus</code>事件中注册相应操作，当焦点在该输入框时，它添加一个class（ng-focused），并且该输入框的<code>$focused</code>属性也将变为<code>true</code>。因此，你可以根据需求是否在焦点上来个性化设置显示错误消息。例如：

</p>
<pre><code>&lt;div class=&quot;error&quot; ng-show=&quot;signup_form.name.$dirty &amp;&amp; signup_form.name.$invalid &amp;&amp; !signup_form.name.$focused&quot;&gt;</code></pre>
<p>我希望这篇文章可以告诉你如何很酷炫的使用AngularJS来进行验证。



</p>
<p>原文：<a href="http://www.ng-newsletter.com/posts/validations.html">Form validation with AngularJS (en)</a>

</p>
<p>注：原文有一些demo可供测试，若有需要请查看原文。</p>
]]></description><link>http://zackyang.com/post/Form validation with AngularJS</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 06 Nov 2014 02:57:34 GMT</pubDate></item><item><title><![CDATA[黑客是如何发现女朋友出轨的]]></title><description><![CDATA[<div class="page" id="readability-page-1">
<div id="article_content">
<p>作为一个不合格的乌云白帽子，下边只是冰山一角吧。但如果你是异地，那这也许是最好的教材。</p>

<p>事情一开始是这样，我和GF异地接近一年了，GF有两个号码，有一个是我给她买的，另一个是自己买的。</p>

<p>有一天我突然感觉我俩每天的日常通话时间越来越短，从一开始每天半小时左右下降到了隔两天一两分钟，妹子说忙。但我感觉也许可能我要绿了，当然我不相信男人的直觉这种事儿的，我对我们四年多的感情还是很自信的，毕竟按计划马上要结婚了。</p>

<p><strong>但悲剧的是最后，远在千里之外的我发现了妹子一年中除了我之外交往的三个男人。</strong></p>

<p>白帽子的职业习惯，有了疑问就先踩点侦察一下吧。我忍不住想看一下妹子的通话详单，两个号码，一个电信一个联通，尝试登陆网厅密码错误或者查详单都会有短信通知，什么拦截短信就不搞了，没工具。简单暴力的祭出5-6个短信轰炸网站，开了十多个页面，上千条短信过去了，网厅的短信混在一大堆验证短信里，从当晚的通话看，妹子果然没发现。</p>

<p>具体怎么爆破网厅密码，可以买本Burpsuit的书慢慢看，妹子号码的网厅那时验证码正好可以爆破，用身份证号码和验证码重置了服务密码，下载了异地的一年中的详单，开始分析。</p>

<p>不出所料，数据异常多，筛选出来了7个可疑的号码，看了下，两个是岳父岳母大人的，另外五个单独拎出来，时序分析。结果不详细说了，看不出来什么特征。只是有一个号码平时联系频繁，周末就不联系了，而且通话经常大于半小时，比较可疑。直到这时，我还在幻想，也许这只是工作上的同事，要是出轨了也只有一个情敌吧。</p>

<p>拿剩下的5个手机号搜索微信和QQ，3个有结果，看了下，一个是妹子的同事女的，不管了，另外两个男人来路不明，继续社工，QQ关系库查了下，一个是公安大学的，另外一个好像没上过学，但是很有钱，又Baidu和Google了下长尾信息，确认一个是在经商，另外一个是国宝。</p>

<p>突然想起来还有开房的数据库，但能连G安内网的时候都在查别人，没想到自己也有这天，虽然泄露的2000W是很少一部分，现在只能碰碰运气了。之前没往这个方面想，早就下载了，干脆载入数据库，写语句，输入身份证一查，瞬间崩溃了，开始只是有点吃醋的意思，直到看到屏幕上白底黑字的结果还是忍不住潸然泪下&hellip;&hellip;</p>

<p>彻底不淡定了！！！妈蛋，继续回到详单，这回什么心情也没了，盯着开房数据库的时间戳，看附近的通话记录。有几个座机比较可疑，百度了下，有赶集网的数据，好像他们还一起租商铺和房子了。把固话全都拎出来，单独搜索，发现大部分是各大酒店前台的电话，一部分是吃喝玩乐场所，少部分是工作单位的座机。</p>

<p>后边详细的分析不说了，比较枯燥，反正看样子自己也是彻底绿了，未婚夫变备胎，不对，也许只是千斤顶，换备胎的时候用一下。那就不管妹子的心情了，试了下QQ密码已经改了，等到凌晨两点，妹子一般这时候睡了，果断上id.qq申诉重置密保，妹子是SVIP7+心悦俱乐部会员，企鹅很乖，催了一下半个多小时密保就重置成功了。还好我和妹子异地前已经悄悄点开了漫游所有好友一个月的聊天记录和永久漫游个别好友的聊天记录。</p>

<p><strong>妈蛋，果然是这几个渣男骗走了俺心爱的妹子。 = =。 ToT。 QAQ 。</strong></p>

<p>防止妹子夜里看到iphone的推送消息，赶紧先把聊天记录都下载下来，太多先不看了，用QQ邮箱重置了icloud的id，重置了taobao、京东密码，进去看收货地址和交易记录，发现连情趣玩具都是妹子自己买了邮寄给渣男的。重置了校内微博的密码，看了看私信。去icloud上，看了看&ldquo;查找我的iphone&rdquo;，大致位置就在他们出租的商铺附近。下载下来icloud的短信，照片，联系人。</p>

<p>最后出轨的三个对象都确定了，前面说的有个身份证是四十多岁的排除了，可能只是约了个炮而已，或者那次开房用的是假身份证。剩下4个号码，现在确定有两个是同一个人用的，就是那只国宝，国宝和妹子也异地，不过就像广州和东莞这样，见面很方便，每周都要一起开房亲热下。另外一个商人也确定了，是妹子本地的，可能是妹子单位同事介绍的，政协副主席的儿子，俩人几个月前已经一起租了爱巢，都不用开房了= =，还在一起做生意。还有一个主要交流在微信，没法弄到聊天记录，是当地本地人，不知道干什么的，空间也没东西，只在Baidu网页快照里有个已婚男士倾诉婚后又遇到真爱的苦恼，帖子中的那个楼主留了自己的QQ号码，看了下时间，妈蛋，这真爱不就是我妹子嘛，我艹啊啊啊啊，妹子把空分复用，时分复用，码分复用发挥到了极致了啊。</p>

<p>要不要飞过去，像普希金一样决斗，战胜三个情敌，然后我就可以继续和妹子幸福的在一起继续生活了。想到这里，又忍不住哭了好久，和妹子是初恋，而且情投意合，兴趣、爱好、Taste、Status 都很搭，我这么爱你，你竟然异地不到一个月就和这么多男人出轨，好伤心啊好伤心。他们能像我一样，一次让你GC好几回吗？他们只爱你的身体，能和我一样关心你的灵魂吗？他们天天就知道请你吃别人做的好吃的，能像我一样在家做出媲美米其林星厨的菜肴吗？</p>

<p>大脑不能正常工作了，其实结婚早就准备就绪，俩人又约好趁年轻多玩几年再结婚生宝宝，我还以为是一起旅游游戏恋爱享受生活，没想到竟然是这样玩儿&hellip;&hellip;记得我没喝酒，而是照常爬起来去上班了，刚毅冷静，上司又夸奖了我一回，说过一阵儿先给我涨工资，尽量定P7。我都想辞职去找妹子去了，听说有P7，我就没辞职，记得每次发工资后给妹子买包包或者转账，妹子都会很开心，我多赚点儿钱，也许妹子会回心转意呢。</p>

<p>当天妹子发现所有密码全不对了，已经抓狂，打电话过来威胁要让国宝调查我，我像王自如一样，努力的和妹子吵了一架没吵赢，挂了后火速找伯父伯母打小报告，伯父伯母表示站在我这边，但是妹子今天已经给他们告过我状了。</p>

<p><strong>偷偷补完的分割线</strong></p>

<p>晚上回家，整理了下哭晕在地的心情，找到相关人士的联系方式并没有太费力，既然通过简单技术途径能找到的基本都找到了，就买好了机票，打算周末直接过去。看了看鹅厂的街景地图，突然觉悟愚蠢的男人们能利用的不仅仅是技术手段，还有最薄弱的环节&mdash;&mdash;脆弱的人类啊。</p>

<p>梳理了下和妹子关系网的交集，想妹子游戏公会里的死党们也许会知道些什么。其实游戏里也都是之前线下就认识的同学或者朋友，隔三差五一起玩游戏，五湖四海时差党乱入，也会聊一些不敢和身边的朋友聊的话题。</p>

<p>昨晚没想到这回事儿，就开始猜YY密码，终于上线，看了看好友，自己认识的是自己大学宿舍的几个兄弟和妹子的闺蜜，另外还认得几个熟悉的ID。一上线就收到宿舍的兄弟的消息，不对，不是发给我的，是发给妹子的。在一起时间久了，不语音的话 ，估计不会发现是我吧。但是聊了几句就感觉气氛不对，为啥抱怨我给他发好人卡&hellip;&hellip;连续被晴天霹雳击中的我已经没心思继续调查了，没等妹子挤掉我自己下线了。</p>

<p>万念俱灰的我拨通了妹子闺蜜的电话。这是和妹子相互欣赏，真心对彼此好的闺蜜，从追妹子到现在，一直没敢怠慢。</p>

<p><strong>/*&nbsp;写得再多，也不能逆转时光的注释行。*/</strong></p>

<p>这就是发现出轨的过程，已经跑题了。你们把我顶太高了，可能朋友也会看到，会被人肉的，只好注释掉了，求谅解。总之，我幸存了下来，不然也没法来答题了。</p>

<p>题目是问会导致我们男性发现女票出轨的细节，那就总结一下吧，大家也可以帮忙补充。</p>

<p><strong>一：静默出轨模式。</strong></p>

<p>像战前无线电静默一样，去出轨时候，尽量不留下任何身份认证相关信息，包括手机等智能设备的联网记录，主要是别随便连酒店或者别人家的Wifi；关闭数据网络连接和定位服务，关闭手机找回服务，手机不要留木马；不要登记身份证，不要在线订酒店，不要在线买车票机票，不要团购，一切尽量在线下进行；不要随便使用自己银行卡，尽量用现金；不要登陆各种网络服务，要出轨的话，就自己去黑皮，不要发微博上空间逛淘宝留下蛛丝马迹；照片的信息量最大了，删也删不彻底，还容易到处同步，爱自拍的忍一会。记不全就念叨一句话&mdash;&mdash;上网不涉密，涉密不上网。</p>

<p><strong>二：物理一致性。</strong></p>

<p>保持自己的身体，周边物品尽量一致。TT用掉了，就赶紧补上同批次同款。预计会被按在墙上把衣服弄脏，或者被按在床上把膝盖磨破之类的，就提前防范，别留太明显的印记。日常通讯是最危险的环节，这是男人的强项，到处充满了可留意的细节，更不说iMessage、QQ之类的聊天容易被强行同步，用一些小众的也可疑，推荐WeChat，可以挥一挥衣袖，变得干干净净。</p>

<p><strong>三：学会同时爱两个以上的人。</strong></p>

<p>前两条主要是针对另一半是理工科的，这一条说是说在情感方面，不要因为爱上了小鲜肉，就对家里的大叔提不起兴趣了，敏感的文科生很容易觉察到这些细节。学会同时爱两个以上的人，对TA们的昵称别叫错了，分不开就都叫宝贝；出轨前要有承受巨大压力的心理准备，从自己一个人不停的练习和两个对象间不同相处模式的切换开始吧。</p>

<p>最后，相信我，也许所有出轨的人都会后悔。因为得到的总会发现并没那么好&hellip;&hellip;但是失去的却再也没法拥有了，在这件事上，细节不决定成败。T T</p>
<!--开源软件资源链接--><!--开源软件资源链接结束--><!-- 相关资料开始 --></div>
</div>
]]></description><link>http://zackyang.com/post/hack-gf</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Sun, 19 Oct 2014 14:46:56 GMT</pubDate></item><item><title><![CDATA[做一个网站多少钱？]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-76619">
		<!-- BEGIN .entry-header --><!-- BEGIN .entry-header --><!-- BEGIN .entry-meta --><!-- END .entry-meta --><!-- BEGIN .entry -->
		<div class="entry">
			<p class="copyright-area">
				&nbsp;</p>
			<!-- div id="ad1">
<script type="text/javascript">
google_ad_client = "ca-pub-7056282119617872";
google_ad_slot = "6645040531";
google_ad_width = 300;
google_ad_height = 250;
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<br/ -->
			<h3>
				<span>「一辆车子多少钱？一个房子多少钱？」</span></h3>
			<p>
				<span><span>这问题在工程师或设计师的眼里就如「一辆车子多少钱？一个房子多少钱？」,这个问题实在空泛到一个让人无法言语的境界，这也是我最常被问到的问题「做一个网站多少钱？」。</span><span>说真的我大概能了解提问人的想法，或许只要说出个大概就是他们要的答案，例如说个多少X千和多少X万之间，或许我的职业病，我实在没有办法容忍这种不明确的答案。</span></span></p>
			<p>
				<span><span>为何我回答不了这个问题的原因大概是，最起码，给我一个参考的范例嘛，例如你问「这一台这样的车子，二手的，T牌2005年产，你估多少？」虽然提供的资讯不是很多但是起码还是可以计算的。</span><span>就是大概会落在某个价格区间上，而影响最后价格的大概就是细节！</span><span>没错，就是细节，或许大家对于网站的理解不是很深所以没有办法提供什么明确的资讯，所以一般我都会把这类问题归类为「随便问问」，所以我都会「随便答答」。</span></span></p>
			<p>
				<span>「嗯～大概是XX万」</span></p>
			<p>
				<span>其实真正的数字是多少我已经不在乎了，我只是想随便打发他一下，毕竟对于一点概念都没有日后也不知道怎么沟通，我仿佛变成一个商业大师而脑袋就出现一道光，隐隐约约有那么一句话「有案子来很好，但是拒绝一些案子会让妳日子过得更好！」</span></p>
			<p>
				<span>「我只想要一个简单的网站」</span></p>
			<p>
				<span><span>马上就来了第二句我平生最害怕的一句话，这句话就如我老师说暑假要到学校上课，周末要继续加班一样，简简单单的一句话就吓的我手足无措，什么叫做上课！</span><span>什么叫做加班！</span><span>！</span><span>还有，什么叫做「简单」。</span></span></p>
			<p>
				<span><span>不到半秒钟的时间，发问者马上说，就简单的一个首页，然后可以看到我们的资料，可以浏览我们的产品，不需要购物车（用手语和脸部表情来强调，仿佛以为没有这个项目就会一切变得简单），然后手机和平板看得到。</span><span>好吧，这算是有提供一些资讯了，但是这说不上简单，或许比较恰当的话，可以用「一般」。</span></span></p>
			<h3>
				<span>如果你不是工程师，不要说简单</span></h3>
			<p>
				<span><span>乍听之下，这也没有那里比较简单啊？</span><span>算了，我想大概有参考的网站，当然这时候就会看到一些千奇百怪，这样说好像不恰当，应该是千变万化的网站范例出来，然后每个举例他们喜欢的「部分」，例如你喜欢「 F牌的车头」还有「蓝牌的车身」，不过里面的座位部分我们喜欢有「T牌的感觉」，这很简单，就是这样而已。</span></span></p>
			<p>
				<span><span>医生说我心脏不太好不可以一天受太多刺激。</span><span>我想大概每个工程师或设计师听到「这很简单」这四个字的时候，恨不得就马上起立，把电脑交给对方让对方马上示范一次，如何简单！</span><span>若无法完成的话，我想这把怒火应该会燃烧个三天三夜，不过好歹我是个专业的（演员），马上露出12分的微笑和假装情不自禁的拍手说「这想法真不错～」我自己小时候也梦想自己会飞，那多好（喂～），有时候我们听客户的想法就如听小孩子的梦想一般，你不能说不可能，就目前为止，比较不可能。</span><span>最起码，你给的预算不可能，甚至时间上也不可能。</span></span></p>
			<p>
				<span><span>虽然他的建议我们还是要听，所以我们大概就能画出一个「F蓝T」的车子（网站）出来，集各家之所长的网站。</span><span>别以为这样就会结束，制造过程中，客户会马上变成设计总监和设计大师甚至兼职网路行销专家，会要你马上修改一些很「简单」的东西，例如左边的logo换去右边的logo，把「马上购买」放大到一个极度浮夸的程度，又或者把某网站的功能拿过来，即便用在客户的网站上很怪也无所谓，因为本来就有「F蓝T」了，多加一个也没差。</span></span></p>
			<p>
				<span><span>但是也有极端的例子，他真的要很简单的网站，简单的程度就是他根本不在乎设计是怎样，他们只想要秀出产品和联络方法，这种那么极端的事情我还真的遇到不少，当然我也不知道为何会这样，反正他们就是只愿意花个数百几千，而且对他们来说已经算是很「阔气」了，当然我并没有什么褒贬义，每个生意人对于每个成本的拿捏自有一套准则那是很合理的事，所以回归到我们的主题，做一个网站多少钱？</span><span>把它换一个角度问就是为何我要花这个钱做这个网站？</span></span></p>
			<h3>
				<span><span>网站并没有带来直接的效益？</span><span>为何要花钱？</span></span></h3>
			<p>
				<span><span>这显然​​是一个很大的课题，但是狭义来说，就如一家店的装潢，百万装潢，和几张IKEX家居构建而成的，都可以营业，客人都可以坐下用餐，没有问题。</span><span>差别就是在你对你品牌的专业度和用心上，客人买的很多时候也是差异化。</span><span>当你去google 「Why your business needs a website」出来几十亿则结果所以可以慢慢去理解看看大家怎么说。</span></span></p>
			<p>
				<span><span>一个网站并没有带来效益？</span><span>这不是一个是非题，就如一个实体店面，也未必会有任何效益，假设他没有间接或直接的商业活动，网站本身就如一个实体店面，想要直接获益就必须要经营，甚至就如一个广告，如旗舰店的概念，24小时都灯光通明的，老远的地方都看到一个水果挂在远方的玻璃建筑物上，网站也是一样，至2014年3月为止资策会的资料显示台湾平均每四个人就有三个会上网。</span><span>而他们都上网做些什么？</span></span></p>
			<p>
				<a class="cboxElement" href="/upload/offsite/2014.09.09.c016fe8b-ab4f-4d60-8987-33974dc26890\0621331b-b0d3-47d5-8e27-74394c208b35.jpeg" rel="lightbox[76619]" title="做一个网站多少钱？"><img alt="1-Ut1xYI7UwG1x1Mu8QkqFew" class="alignnone size-full wp-image-76620" src="/upload/offsite/2014.09.09.c016fe8b-ab4f-4d60-8987-33974dc26890\0621331b-b0d3-47d5-8e27-74394c208b35.jpeg" /></a></p>
			<p>
				<span><span>这些就是潜在客户群，而一个专业，实用、好用的网站就是一个24小时的行销工具，那么你觉得你应该花多少钱时间和预算在这个地方，那就视每个公司的营运决策而定。</span><span>值不值得花这个钱，我也没有办法说得准，毕竟你来我餐厅吃饭，我是在没有办法告诉你那一道菜不好吃，我只能和你说每道菜的特色，让妳来选，因为从我的角度，我当然希望你们全部都点（认真一点写！不要开欢笑）</span></span></p>
			<h3>
				<span>那你可以做什么？</span></h3>
			<p>
				<span>假设以后你想要请人制造网站，或许可以想像自己的需求是什么？</span></p>
			<p>
				<span>一，这网站的功能（目的）是什么？</span></p>
			<p>
				<span>二，你的预算是多少？</span></p>
			<p>
				<span><span>三，你有喜欢的设计吗？</span><span>举例一个就好。</span></span></p>
			<p>
				<span><span>四，你需要更新资料的后台吗？</span><span>你之后会不会增加功能？</span></span></p>
			<p>
				<span><span>先想一下你目前为何要做这个网站，然后想一下可以花多少钱在这个地方，找一个你大概喜欢网站的样子，想一下之后网站做好后的事。</span><span>大概就四步很简单！</span></span></p>
			<p>
				<span><span>到了第二步，如果预算真的没有很多，我倒是很建议大家去开一个免费blog，或者FB来个粉丝专页，等之后真的觉得很需要一个​​官网再来弄也不迟。</span><span>所以别老是问「做一个网站多少钱？」，好希望有一天客户和我说「我准备好XX来做这个网站了」，直接进入主题，那么岂不是很好沟通吗☺</span></span></p>
			<!-- div id="ad1">
</div -->
			<p>
				<a href="http://www.jobdeer.com/?fr=jobbole" rel="nofollow" target="_blank"><img src="/upload/offsite/2014.09.09.c016fe8b-ab4f-4d60-8987-33974dc26890\641ae2b0-3381-42b3-b63d-d25dd6871861.png" /></a></p>
		</div>
		<!-- END .entry --><!-- JiaThis Button BEGIN --><!-- JiaThis Button END --></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/how-much-does-a-website-cost</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 09 Sep 2014 01:53:25 GMT</pubDate></item><item><title><![CDATA[程序猿媳妇儿注意事项]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			十一年前我和程序猿第一次见面，还是大一军训期间。我甚至不确定程序猿是否记得那是第一次见面。当时不小心装伪文艺参加了吉他社，想借一本吉他入门书，然后同在吉他社热心的海哥说他一同学有，就带着我去拿书了。于是我们第一次&ldquo;见面&rdquo;了，我只看见一个对着电脑，佝偻着背的背影......严重怀疑程序猿根本没抬头看一眼那个已经晒得像反转熊猫一样的妹子，因为他递过来书以后，又迅速投入到了电脑的怀抱，相对应的，我也不记得他长什么样了。</p>
	</div>
	<div>
		<p>
			我从来没有读懂过这个上天用那个背影给我的预警，于是堕入了一生的深渊。</p>
		<p>
			当时的我对计算机、程序猿当时一无所知，只知道这些计算机系的，天然呆居多，玩游戏，不学习，民工气质愈演愈烈，穿着黄色民工拖鞋上课，在食堂和民工大哥们一起吃饭，头发不洗戴帽子遮，没衣服穿了从脏衣服堆里找，喝水的杯子长时间没刷竟然被蜜蜂筑了巢，天天拆别人电脑、烧别人电脑CPU或者对着电脑研究大便（debian）或者聚众看片儿..</p>
		<p>
			即使程序猿后来文艺了一把还加入了一个乐队，当贝屎手，还是乐队里面最天然呆的，只会低头猛弹，不像主唱和吉他风骚。</p>
		<p>
			经过初步了解，配电脑、修电脑、装系统等都可以找程序猿来干。而且程序猿不会油嘴滑舌的。很多妹子也都这么想的，于是大学四年，程序猿钻了不少次各种妹子宿舍，一去就一下午，他说装系统太慢，我暂且就信了吧。</p>
		<p>
			程序猿大四差点没毕业，挂科十几门，从基础课的英语、高数、大物，到专业课的图形学什么的无一幸免，还好最后万分惊险，侥幸过关了。</p>
		<p>
			我问他：你不是喜欢学计算机吗？怎么还学成一坨渣。他说：那些用过时教材的老师才教的是一坨渣。</p>
		<p>
			事实证明，他是对的。我觉得有点莫名其妙，没见过他学习，原来也会写代码啊，还帮别人写了毕业论文，毕业了还顺利找到了工作。</p>
		<p>
			关于毕业后的去向，程序猿是这么说的：国内也就北上广深还有点IT产业，你选个地方吧。我说：那就北京吧。这么着，我们就来帝都了。</p>
		<p>
			七年前在北京，我们的第一份工作，程序猿的起薪还只有2500RMB，我找了份出版社的工作，起薪也是2500RMB。</p>
		<p>
			刚开始工作的两年，在我记忆中是程序猿最最累的时候。两年时间，几乎没有休息过，周一至周五晚上加班到10点、11点以后才回来，甚至更晚或者通宵。周六日白天去公司加班。那时候还在做手机移植。人年轻，通宵一下还能扛得住，通宵后第二天还能继续上班。现在偶尔程序猿也会通宵发版，但是第二天几乎要休息大半天，不服年龄不行。</p>
		<p>
			从大学的时候天天腻歪在一起到后来要适应等待程序猿加班的日子，习惯需要一个过程，也有始终习惯不了的，像我。直到现在，如果程序猿加班很晚回来，我都没有办法睡觉，一定要他回来才能睡，所以身体也跟着一起熬差了。</p>
		<p>
			在北京工作了4年，我俩才考虑结婚，此时他已经换了一次工作，到了一家创业公司，开始做iOS。我比较佩服程序猿的一点在于他对行业发展还是比较敏感的，当时学习iOS就是个例证，以及自己没事儿吹牛说起大学就预测出微博类的产品会火，比特币刚出来几乎还没什么人知道的时候还挖了两天矿等等。但是不知此人是否天生命里没有横财，所以还只是勤勤恳恳打工过日子。</p>
		<p>
			新换到创业公司也成了技术负责人，加班没那么猛了，但是也难看到出路，公司的风格很难改变，所以最后没有相信公司给出硕大的饼。我说如果公司真上市了，所有的期权加起来要上3000w？ 程序猿很平静地说，放心吧，上不了市。</p>
		<p>
			当时公司目标3年还是5年上市，忘记了，反正至今也没上市。</p>
		<p>
			后来程序猿又经过人介绍来到现在的公司，也算国内比较大的公司了，于是又拼命了一段时间，疯狂地加班，后来还算好一些。</p>
		<p>
			七年，从一个年轻小伙熬成了大叔，体重从55kg变成了75kg，从天然呆的码农到在大公司的小经理。非常符合程序猿成长路线。不知是喜是忧。</p>
		<p>
			既然已经嫁给程序猿这么多年了，虽然至今仍然是小白一枚，但是也能总结几点：</p>
		<p>
			一要耐得住寂寞</p>
		<p>
			程序猿永远陪伴电脑的时间比陪媳妇儿时间长，加班相当频繁，要锻炼自己独立入睡。</p>
		<p>
			二要耐得住落寞</p>
		<p>
			也不能说程序猿没有情趣，但是也不能太指望。自从结婚后没有过过任何的纪念日之类的。偶尔会在生日什么的给买个礼物，基本以电子设备为主。</p>
		<p>
			三要照顾得了程序猿的生活</p>
		<p>
			当然大部分的程序猿对衣食标准要求不高，但也别指望他们能做太多。某猿只会每天早上大喊没有袜子穿啦，没有T恤穿啦。</p>
		<p>
			吃货程序猿也会做几个大菜，但是只是有客人来露一手用的。</p>
		<p>
			四要给程序猿财务自由去买电子产品</p>
		<p>
			比如1k多的机械键盘，1k多的耳机，各种Nk的游戏设备，还有很多其他七七八八的腕带啊之类的。总之要电子设备新出来什么，他们想买就得买，不然他们浑身难受。</p>
		<p>
			五要会玩三国杀等各类纸牌游戏以及德州扑克</p>
		<p>
			坐着不动又能彰显他们智商的牌类游戏最适合程序猿了。</p>
		<p>
			六参加他们的TB活动的时候要能融入进去</p>
		<p>
			比如吃饭就要低头猛吃，饮料猛喝。偶尔听见&ldquo;来干一下&rdquo;，就干一下，呵呵一笑，然后继续低头猛吃，饮料猛喝。吃完喝完三国杀或者德州扑克。</p>
		<p>
			七要听懂一些基本术语</p>
		<p>
			比如说bug等、各编程语言名称。能听懂基本的IT笑话，比如前两天刚懂了类风湿的笑话。在iOS的拼写上，不要犯大众错误。</p>
		<p>
			八要崇拜乔布斯，要记住IT圈各大佬的名儿</p>
		<p>
			没事儿多看看IT圈新闻。</p>
		<p>
			九要提醒提防程序猿病</p>
		<p>
			小心眼角膜炎、肩颈疾病、脂肪肝、腱鞘炎。</p>
		<p>
			十不要太担心程序猿在男女问题方面出问题</p>
		<p>
			相信他们更愿意娶个电脑。如果真的出了问题，可能他本质不是程序猿，而是产品或者设计狮。</p>
		<p>
			十一不要让亲戚朋友们找程序猿买电脑攒电脑修电脑装系统</p>
		<p>
			因为程序猿说了，他们不是卖电脑的。</p>
		<p>
			十二最后一条也是最重要的，要赞美程序猿，欣赏他们的审美，因为编程也是一门艺术。</p>
		<p>
			程序猿身上都是有某种气质的，不然现在我们不会那么轻易在大街上的人群中分辨出程序猿。</p>
		<p>
			因为程序猿是有使命感的，他们定是感受到了命运的召唤，要用计算机改变和毁灭人类的未来，他们已经并即将做到。</p>
		<p>
			向程序猿们致敬。</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/code-monkey-wife-considerations</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Wed, 06 Aug 2014 11:16:42 GMT</pubDate></item><item><title><![CDATA[为什么我不再用 .NET 框架]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			.NET平台很棒。真的很棒。直到它不再那么棒。我为什么不再用.NET？简单来说，它限制了我们选择的能力(对我来说很重要)，转移了我们的注意力，使得我们向内认知它的安全性，替代了帮助我们认知外面广阔世界的所有可能性。</p>
		<p>
			[系好安全带：这个文章的长度几乎成了一本书&hellip;]</p>
		<h2 align="left">
			优点</h2>
		<p>
			首先让我开始说说.NET做得对的许多事吧，尽管这其中的大多数并不来自.NET本身，但却是由.NET社区而来。</p>
		<h3>
			C#</h3>
		<p>
			C#令人惊叹。我认为它是一个令人惊叹的编程语言。从强大的C语言背景而来，我彻底地喜欢其语法，流和这门语言的所带来的感觉。当然有我可能改变的事，但总体来说它是一门扎实的语言。并且基于<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/C_.html">开发人员使用的编程语言如此巨额的百分比</a>和Windows操作系统的优越性，它是一门众所周知的语言。</p>
		<h3>
			ReSharper</h3>
		<p>
			我也很喜欢Resharper。在JetBrains工作的开发者们都是奇迹般的人。如果没有ReSharper和一些相关的工具，我可能并不会如此喜欢C#。</p>
		<h3>
			BDD and MSpec</h3>
		<p>
			我也很喜欢简称为机器规格(mspec)的BDD风格的框架。它是一个令人惊叹的测试框架，真正支持在测试中使用正确的语言测试本身。在使用mspec之前，我的测试真是一团糟并且很碍我的事。</p>
		<p>
			另外，当我们创建<a href="http://smartystreets.github.io/goconvey/">GoConvey</a>&mdash;基于Golang的BDD测试框架的时候，Mspec对于我的组织来说是一个巨大的灵感和激励。</p>
		<h3>
			多语言运行时</h3>
		<p>
			我认为多语言的CLR(公共语言运行时)的观念真得使得JVM的世界思考着。我不知道任何非Java的JVM语言在CLR之前，但随着&ldquo;公共语言运行时&rdquo;的到来，我的理解是这使得使用JVM的人们向前进并且最终创造了如Scala和Clojure这样伟大的JVM编程语言。如果我错了请纠正我。再者，CLR使得Sun公司的人们坐下来并关注它，因为Java有一点陈旧并且随着Java 8的到来，仅仅现在才在多个方面追赶着。竞争是一件非常好的事。</p>
		<h3>
			NuGet</h3>
		<p>
			另一个显著的例子是NuGet。这个包在Windows中作为一个整体特别是在Windows的开发中，它的管理轶事是糟透的。NuGet解决了很多问题，他们也通过从Python和Ruby借用了很多东西去做了很多正确的事。有改进的余地吗？当然。但比起其他一些选择在这儿或那儿的包升级来说，我还没有感到使用NuGet有这许多痛楚。</p>
		<h3>
			Mono</h3>
		<p>
			对于Mono的开发者们，我不能不说太棒了。他们所创造的太惊奇了。没有任何官方支持和不顾潜在的悬在他们头上的法律问题，他们向前推进并创造了一个居然能替代官方运行时的实现。我已经有一些运行在产品中应用程序，在Mono下运行了几乎一年而没有任何问题。它的产品准备好了吗？这可能取决于你的应用程序(见下文&ldquo;Mono&rdquo;)。</p>
		<h3>
			CQRS 和事件溯源</h3>
		<p>
			可以认为，关于.NET最好事之一是，它是CQRS的诞生地并有相关的技术：事件溯源。就算这样，CQRS+ES本身并没有什么很新的东西。正如Greg Young将会告诉你的，这是由一堆40年历史原料为我们重新打包并更名的。对于大型代码库我有些非常严重的问题，当我5年前使用CQRS+ES的时候，它完全释放了我的域。CQRS+ES现在是命名模式的并且其成长是显而易见的。这可能是因为.NET已经能够和其他的开发平台交互共享的原因。除了这个之外，大多数的创新是从外部来的。</p>
		<h2>
			缺点</h2>
		<p>
			优点先放在一边，让我们看看什么出错了和我为什么不再用.NET框架。关于我<a href="http://blog.jonathanoliver.com/why-i-love-go/">最近开发平台的迁移</a>，最能激励我的事是我可以利用许多最好的部分而丢下不好的部分(如下文所说)。</p>
		<h3>
			Windows</h3>
		<p>
			<a href="http://blog.jonathanoliver.com/why-i-left-windows/" target="_blank">正如前文所述</a>，当面对基于网络的服务器软件时，Windows并不是一个好的选手。在我看来，Windows的另一个真正的大问题是传统的Windows开发者是通常仅仅擅长于Windows，当他们离开安乐窝之后就会很快迷失，这对于Linux开发者来说却不是问题。计算远不止是Windows。开发者仅仅能操作单一的操作系统的一个问题是它不可避免得导致Windows的激增。换句话说，Windows生了Windows。没办法打破这个循环。</p>
		<p>
			另一方面，*NIX的开发者通常熟悉多操作系统(Linux，Unix，OSX，Windows等等)，一个操作系统的内部工作原理，不同的分布(基于Debian和基于Fedora)，窗口管理器，桌面管理器，文件系统，包管理，编译，重新编译，重新打包，命令行&ldquo;fu&rdquo;等等。</p>
		<p>
			我的一个心病是文件系统。NTFS并不是系统唯一的文件系统，对于任何给予的任务它几乎都不是最好的选择。ZFS，BTRFS，ReiserFs，ext*等等，有一些很酷的特性。我也很喜欢为了各种高速/透明的磁盘操作，能从BASH创建回路设备或者创建RAM设备。这在Windows中不会发生&mdash;如果没有第三方软件的话。</p>
		<p>
			在AWS云服务中，启动一个Windows机器要花掉足足10多分钟。我大约15-20秒就能启动一个简单的Linux机器。当涉及到云计算规模，它能够迅速扩展是很重要的，因为当扩展很重要时，10-15分钟就像是永恒的。</p>
		<h3>
			Visual Studio</h3>
		<p>
			在我这另一根刺，当属Visual Studio。我需要一个大大超出预期的 IDE 去做任何开发，这个想法困扰着我。它只是如Windows一样庞大的资源猪。我有一个内核i7 3770K 3.5GHZ的台式机，以16GB的内存和最大4512GB的固态硬盘去编译。它差不多刷爆了Windows体验指数，但Windows+VS仍然很慢。(是的，ReSharper使得它更慢了，但是ReSharper对这来说是值得的。)</p>
		<p>
			现在我在MacBook Pro上开发，它比起我的强大的台式机来说只有更少的CPU马力，但运行明显更快，在一个短小的学习曲线之后，UX（用户体验）变得无限美好了。事实上，我甚至不再用鼠标了&mdash;我的双手一直在键盘或触控板上，我可以用手势操作我的电脑并让它回应&mdash;不像在Windows。</p>
		<p>
			关于VS很酷的一个事是调试器。它的查看和使用，令人难以置信得方便。每隔一段时间会在监视窗口报告错误的值，导致花费更多时间去调试。同时，这也是很大的负面，因为CLR默认的，多线程的世界使得我一开始就需要一个调试器。没有调试器是一个解脱的体验，因为它迫使你以另一种方式编程。</p>
		<p>
			VS同样也有创建&ldquo;csproj&rdquo;和&ldquo;sln&rdquo;文件的坏毛病。我恨这些。当然，C#必须知道编译什么和何时编译。我理解这点。在Golang中，引用在代码中使用了很重要的语句。如果它不是.NET中用到的工程文件，我可能使用简单的文本编辑器编码C#，并且对这门语言更流畅。使用git rebase操作时，这些文件也有导致合并冲突。</p>
		<p>
			别让我开始说换行符的差异。我不能相信直到今天我们还在处理这样的事。如果VS解决方案文件以Linux行结束符结束，通过双击它并不能载入该解决方案，因为VS解决方案文件分析器读不出它来。</p>
		<h3>
			源代码管理</h3>
		<p>
			幸运的是，我早就跳出了微软阵营的源代码管理<span>(版本控制系统VSS)</span>。我早在2000年初，在VSS无数次丢失了我的提交之后，就使用了Subversion<span>(译者注：Subversion是开源的版本控制系统)</span>。之后git<span>(译者注：git是开源的版本控制系统，内容管理系统等)</span>出现了，我又迷上了它。不幸的是，没有Windows的接口&mdash;对我来说是典型的遭遇。最终有人创建了一个接口，我就用了那个并且没有回头。Git是一把非常锋利的刀，但当你正确运用它的时候，它是一个强大而高效的工具。我曾经在一个小工程中用过TFS<span>(译者注：Team Foundation Server，工作流协作引擎)</span>，它是一个怪物&mdash;和所有来自Redmond<span>(译者注：美国微软总部)</span>的产品一样。它感染了我的项目文件并且污染了我的源代码目录。真可恶。不，还是谢谢你。给了我任意一天用命令行git&hellip;或者可能是<a href="http://www.sourcetreeapp.com/">SourceTree</a>，如果你需要从GUI得到一点关爱。</p>
		<h3>
			Mono</h3>
		<p>
			是的，这是第二次提及Mono。正如Mono本身如此惊艳一样。在.NET的世界，它仍然二等公民。无论什么时候我尝试在Mono上运行任何重要的东西，我通常都在和漏洞作斗争。幸运的是，对下载代码，查找问题，发送请求和在Linux上编译代码我没有感到不舒服。但是这件事我都记不清做了多少遍了。</p>
		<p>
			是的，CLR是个巨大的怪物，并且对一个非官方的应用在不同的操作系统都有相同的行为，简直是个类似于分开红海的奇迹。但事实是，我不得不花费如此多的时间来填补漏洞以使我的代码能够正确运行，实在是很难为其辩护。</p>
		<p>
			Mono的特定区域也慢。也许它不是在慢在过载，但对我来说Web服务器是关键所在。并且它非常慢，<a href="http://www.techempower.com/benchmarks/#section=data-r8&amp;hw=i7&amp;test=plaintext">最后，慢到了最底下</a>&mdash;即使是微不足道的东西。我想好消息是它只能从这儿得到更好的。我也应该提及Mono的开发者可能忘了Linux，比起我可能知道的还多，所以我不能太挑剔。</p>
		<h3>
			IIS</h3>
		<p>
			也许IIS在尝试着为太多的应用程序做太多的事情。它从作为一个web服务器变为像J2EE应用程序容器一样的应用程序宿主。它也站在<a href="http://www.techempower.com/benchmarks/#section=data-r8&amp;hw=i7&amp;test=plaintext">慢速这一边</a>。我猜如果我需要更高的性能，我应该编写我自己的web服务器，但我真的很想只关注我应用程序的代码。可能利用Windows事件服务器将是好的，但nginx<span>(译者注：一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器)</span>和其他服务器只是不喜欢在Windows中生产。</p>
		<p>
			虚拟的以JVM为基础的实现，例如Netty(译者注：JBOSS提供的一个java开源框架)，很容易处理每秒650K+/的请求量。IIS在运行一个简单的CLR应用程序&ldquo;Hello,World!&rdquo;，处理大约每秒50K的请求量时就会壅塞。(有趣的题外话，参考基准开发者通过TCP套接字创建了一个简单的C#的web服务器，它能处理大约每秒120K的请求量。)</p>
		<h3>
			狭隘的心理</h3>
		<p>
			前些年有个运动叫做ALT.NET。该运动是全部是关于寻找我们自身之外的更广阔的开发社区以作为一个整体，并汇聚不同的部分。有趣的是，那是StructureMap、Autofac、NuGet、ASP.NET MVC和许多其它工具的灵感来源。在传统的.NET的圈子里，这个运动受到了很多的不屑和鄙视。我把这看作是，作为一个整体的社区普遍的狭隘心理和怠惰的一个极大的例证。(的确，它们中的一些可能会消失，进而以包括Redis，MongoBD还有其它的不同的技术而出现。)</p>
		<p>
			有这么多很棒的方案在那里。假定微软已注定是唯一正确之路的想法是荒谬的。如果是这样的话，我们就都还在使用Visual Studio的设计工具去拖放按钮和链接元素到一个WebForm的界面上，我们会设定了该按钮并且依赖ViewState以帮助我们与可怕的HTTP所带来的恐惧隔开。我从我的一个部署的代码库中最后一个WebForm中摆脱的那一天，是个光荣的值得庆贺的日子。</p>
		<p>
			谁又曾想过&ldquo;网络控制&rdquo;是个好主意？很显然我考虑过因为我喝了Kool-Aid<span>(译者注：卡夫公司出品的饮料，这里意指明知是注定的或有危险的仍然去做,有负面涵义)</span>并且完全接受它。它狠咬了我。见过2MB的ViewState吗？</p>
		<p>
			[注：当我写这篇文章的时候，原来的标题，&ldquo;为什么我不再用.NET&rdquo;，意味着整个.NET生态系统。标题感觉有点短于是我更新为&ldquo;为什么我不再用.NET框架&rdquo;。我想.NET作为一个生态系统，包括了所有的工具，工程，平台，组织还有很多开发者。这就是为什么有些更广泛的.NET社区的元素在我的这篇文章中受到抨击原因。]</p>
		<h3>
			性能杀手</h3>
		<p>
			C，Java和C#中典型的多线程范例都强烈推荐使用锁和互斥。对于锁来说有个隐藏的开销：它们慢得难以忍受。使用Disruptor<span>(JVM中的无锁的环形缓存[译者注：实际上就是拥有一个序号指向下一个可用元素的数组])</span>，你可以很容易得每秒处理20M以上的事件。在.NET中使用规定的&ldquo;最佳实践&rdquo;等任何超过每秒十几次的传输，都被认为是体面又好的性能表现，在这一点上来说你仅仅需要更大/更好/更多的硬件设备。事实上，我见过第三方客户端库(Rabbit，Couch，Mongo等等)中锁语句遍布整个代码。即使在我的代码中没有任何的并发，默认的和首选的方法都用了锁。</p>
		<p>
			无锁的、事件驱动的方法允许你大幅降低硬件和资金支出。大部分应用程序可以轻易地运行在两台机器上，第二台机器仅仅在冗余和失效备援时是必须的，以防因为硬件相关的问题导致第一台机器不可用的时候起作用。</p>
		<p>
			这个问题的另一个方面是调用网络和磁盘子系统的传统方式：同步，阻塞代码。如果你需要多个并发的HTTP请求，你需要更多的线程。大多数人不知道的是，为维持线程多出的1-2MB和上下文切换线程的需求，使得CPU内核消耗所有的时间颠簸在上下文切换上而不是做真正的工作。所以现在我们得到了在一个应用程序中数百或数千的线程，占用了RAM，并造成CPU停滞不前。还有个更好的方式。</p>
		<p>
			Netty/NIO (JVM)，Erlang，Node，Gevent (Python)和Go都支持使用事件驱动的子系统操作(选择/epoll[译者注：Linux内核中的一种可扩展IO事件处理机制]/kqueue[译者注：FreeBSD的可扩展的事件通知接口])。这就意味着当等待数据包被tx/rx跨网络的时候，CPU可以自由地去做其它，重要的工作。因为JVM的成熟，Netty可以认为是做这项工作最快的，但我喜欢Go用Goroutines操作这个的方式&mdash;它简单，优雅，很容易推理，没有像意大利面条一样的回调。</p>
		<h3>
			SQL Server</h3>
		<p>
			作为一名.NET开发者，当你开始一个新的工程时，有一些事是你通常会去做的：</p>
		<ul>
			<li>
				创建一个新的solution</li>
			<li>
				将其部署到Team Foundation Server<span>(译者注：Microsoft 应用程序生命周期管理 (ALM) 解决方案的核心协作平台)</span></li>
			<li>
				IIS中建立相应的网站入口</li>
			<li>
				创建一个新的SQL Server数据库</li>
			<li>
				在solution中关联Entity Framework(通常是2010年之后创建的工程)</li>
			<li>
				开始设计你的数据库和ActiveRecord实体</li>
		</ul>
		<p>
			在大多数情况下这不是编写代码的正确方式。当然它可能在某些情况下有效，但是作为一个&ldquo;默认的架构&rdquo;它并不是你想要的。为什么在我们甚至还没理解问题领域之前已经做了任何技术上的选择？这简直是本末倒置了。</p>
		<p>
			微软的生态系统鼓励每个人使用SQL Server。在Visual Studio中和SQL Service进行交互或者使用SQL Management Studio<span>(和它的前身，SQL查询分析器)</span>是如此令人难以置信的容易。这种以数据库为中心的重点，是钦定的或唯一正确的方式的一部分。它使你更加迷恋微软。厂商锁定始终对厂商来说是好的。</p>
		<p>
			为什么我们要如此开发？为什么我们不更多地考虑应用程序的行为而不是它如何存储的？现在我所有的项目都使用基于JSON的键/值存储。有了这种功能，我可以选择任何我想要的存储引擎，包括SQL Server，Oracle，PostgreSQL，MySQL，Cassandra, CouchDB, CouchBase, Dynamo, SimpleDB, S3, Riak, BerkeleyDB, Firebird, Hypertable, RavenDB, Redis, Tokyo Cabinet/Tyrant, Azure Blobs，文件系统中的明文JSON文件等等等等。突然之间，我们能够开始根据其优点而不是仅仅对其熟悉来选择存储引擎了。</p>
		<p>
			题外话：在AWS RDS的云上运行过SQL Server吗？别这么做。当然它会工作，但是一些例如复制这样最简单的事是不存在的。文章充斥着对SQL Server不能在AWS RDS上工作的引用。</p>
		<h2 align="left">
			结论</h2>
		<p>
			也许我在软件开发中学到的两件最重要的教训是：</p>
		<ul>
			<li>
				边界和封装的重要性(以多种形式)</li>
			<li>
				付出代价以得到正确的模型和抽象</li>
		</ul>
		<p>
			许多年前我恨&ldquo;模型&rdquo;这个词。每个人都会把它到处扔，它是一个如此过载的术语，很难理解它的含义和它为什么这么重要。就这点来说，我仅仅会说模型是对你想要封装的现实的一个有限的表示。也许最简单的例子就是地球仪的墨卡托投影了。这很确切得说明了一件事：导航。如果你在其他的事情上使用它，它并不毫无价值。如果你不专注于付出代价去使模型正确，去封装商业现实，那么没有任何技术能够拯救你。</p>
		<p>
			我对.NET最大的抱怨是，&ldquo;唯一正确的方式&rdquo;引导你远离理想的模型并把你推向关注实现细节和技术缺陷的方向。这样的关注导致技术实施渗血并且感染模型，最终导致它腐烂变质，因为它不能适应不断变化的商业需求。当这发生的时候，开发者挣扎着并蹬踢着，如同吸毒者一样，他们从一个新技术转向另一个，以期望下一个强大的技术能够治愈他们的病痛。</p>
		<p>
			技术本身并不是灵丹妙药，相反地，它是关于取舍和选择。只有正确地理解了商业行为并把它们封装进结构良好的，易于理解的模型中，以帮助保持技术堆栈在属于它的地方&mdash;作为一个实现细节。</p>
		<p>
			<span>And that&rsquo;s why I left the .NET Framework because it kept reasserting itself and wanting to be more than it was: an implementation detail.&nbsp;</span>这就是我为什么不再用.NET 框架，因为它不断地重申自己(的主张)，不断地想要比它的本身更多的：一个实现细节。</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/why-i-no-longer-use-net-framework</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Wed, 09 Jul 2014 02:04:58 GMT</pubDate></item><item><title><![CDATA[那些年，官方点偏的科技树]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			一些技术问题&mdash;&mdash;比如网络速度的提升，在国外，受限的都是技术因素，需要等研究的深入一步步解决；但到了国内，首先成了政策问题，这项技术带来哪些利益先不说，会不会影响之前的既得利益？才是首要考虑的。</p>
		<p>
			所以，在科技圈，国内的奇葩事件层出不穷，在这我就简单的盘点一下，在科技的车轮面前，国内上演过哪些螳臂挡车的举动。</p>
		<h3>
			龙芯</h3>
		<p>
			那是2001年前的5月份，中科院计算所知识创新工程支持下的龙芯课题组成立，同年10月，龙芯1号设计与验证系统成功启动了Linux系统，并在国庆节那天通过了中科院组织的鉴定。</p>
		<p>
			研制龙芯的动力很奇葩，在某些人的煽动下，舆论追捧龙芯为完全自主研发的真正&ldquo;中国芯&rdquo;，就为了借此对英特尔、AMD等处理器巨头说&ldquo;不&rdquo;。</p>
		<blockquote>
			<p>
				如果企业、政府机关、科研机构都大规模使用英特尔、AMD等国外产品，中国没有独立自主研发的芯片，必然会让中国的信息安全形势变得更为严峻。假如中美爆发冲突，那么整个国内的信息系统恐怕会大范围瘫痪，整个国民经济将面临毁灭性打击，这将是中国人民不能承受之重。</p>
		</blockquote>
		<p>
			不过，芯片的研发需要极其苛刻的条件&mdash;&mdash;大量的资金投入，以及科研人员的长期研发。一款模拟收发机的设计，流片，性能优化，良率优化，到商用至少流片4-5次，周期至少两年。简单计算成本，流片费用+人工费+软硬件使用费用，至少千万。但是，成本不是制约能否研发出优质芯片的根本，制约优质芯片的根本是芯片的商用价值和科研人员和设计驱动力。</p>
		<p>
			龙芯二号研制不久，关于龙芯的侵权风波迅速来临。2005年7月，专业半导体调研机构In-Stat发布独立分析报告称，龙芯处理器架构与美国MIPS 近似度达95%，龙芯二号处理器与美普思10年前推出的产品非常相似，由于未获授权，如果龙芯未来销往海外，可能引发知识产权纠纷。因此，中科院计算机研究所之后紧急辟谣。龙芯研究组组长胡伟武强调，龙芯2号是中国人自主研发而成，在所有的指令系统中，有意避开了国外已有专利。</p>
		<p>
			龙芯至少不是「汉芯」那种骗经费的坑爹货，其实还是值得赞扬。但天朝宣传部门总爱帮倒忙，为了增强民族自信，大肆吹捧民族产业，动辄&ldquo;世界先进水平&rdquo;。要是记者说说也就算了，一群专家也跟着掺和的&hellip;让不明真相的群众以为可以和Intel等世界顶级的产品一较高下，结果产生巨大的心理落差。</p>
		<p>
			不过，龙芯真正存在的问题是，其商业运作有问题。X86其实算不上特别优秀的架构，技术上比它优越的价格不少。但技术上成功不代表商业成功。按理说，龙芯这种背靠国家，能利用一些行政资源的项目，机会还是不少的，关键是看怎么运作&mdash;&mdash;瑞芯微，从很简单的MP3芯片做起，现在慢慢可以做ARM的中低端芯片，不少低端机在用，甚至都搭上Intel。华为的海思经过卧薪尝胆，也初尝战果。</p>
		<p>
			相比之下，龙芯的商业运作弱爆了。家用PC的话，龙芯目前是不兼容X86的，就是说不能装WIN系统，所以家用台式跟普通的笔记本电脑暂时无法普及龙芯。服务器级别的话，目前龙芯在性能上还与主流的AMD 英特尔CPU有比较大的差距。历史上，基于龙芯的笔记本电脑也出过几波，但始终坚定的树立于&ldquo;非主流&rdquo;集团。在i7都出到第四代、ARM主频到2GHz的今天，龙芯本只能开始清仓。</p>
		<p>
			<img alt="52649a336140c.jpg_v6 (1)" class="aligncenter size-full wp-image-398304" height="613" src="/upload/offsite/2014.07.01.8f13c6c0-051e-40ab-bfe9-5de07146b65c\bb4571a8-16b5-400d-ad2f-cee9cce2f10e.jpg" width="600" /></p>
		<h3>
			禁WiFi</h3>
		<p>
			现在，WiFi对我们来说，几乎是必不可少的一个功能，但大家可能忘了，在5年以前，WiFi进入中国，可谓险阻重重。</p>
		<p>
			&ldquo;据我所知,中国是全球唯一一个禁止手机支持WiFi的国家。&rdquo; 5年前，WiFi联盟市场总监Kelly Davis-Felner埋说到。当时的运营商和手机厂商都是以踩地雷的心态，在摸索手机上加入WiFi功能。当年工信部禁止手机支持WiFi，有两方面的考虑：</p>
		<p>
			1、WiFi手机可以实现VoIP网络电话功能，用户通过WiFi网络能免费或以低廉资费拨打电话，工信部担心这会冲击电信运营商的传统语音收入；</p>
		<p>
			2、国内厂家提出了完全具备WiFi功能，但却更加安全的WAPI技术，于是，工信部就将WAPI定为中国的无线局域网技术标准。</p>
		<p>
			WiFi独独在中国，被断定它会成为一个&ldquo;祸害&rdquo;。由于国内手机入网必须经过批准，为了拿到入网许可证，当时，任何一批手机，进入中国的时候都要进行一次集体手术，俗称阉割，将WiFi功能拿掉。工信部想凭此紧紧扼守这最后的关口。</p>
		<p>
			但WiFi手机是全球化的趋势，想禁也禁不了，当时市场上千千万万台水货手机都具有WiFi功能。在历史的车轮面前，后续的机型终于陆续开放了WiFi功能，进入寻常百姓家。</p>
		<p>
			5年过去了，回头再看这一举动&mdash;&mdash;「禁WiFi」，真是显得可笑。现在有多少人会为了省一点点钱，到处找WiFi热点去打几个语音质量不好的电话？而所谓的「中国标准」，可以参考今天的TD-SCDMA网络，已被移动放弃，终成鸡肋，被扫进历史的垃圾桶。</p>
		<h3>
			COS操作系统</h3>
		<p>
			今年年初的时候，由中国科学院软件所和上海联彤网络通讯技术有限公司共同发布的COS（China Operating System）操作系统，在圈子里热闹了一遍。以中国冠名，足见面市之初对其的期待之大。</p>
		<p>
			在央视的报道中，对COS系统的描绘是&ldquo;完全独立自主&rdquo;，人民网上COS系统的宣传稿更是声称，&ldquo;从底层到应用层均由中国科学院软件研究所与上海联彤设计、开发，不侵犯他人知识产权&rdquo;。</p>
		<p>
			<img alt="cos" class="aligncenter size-full wp-image-398310" height="406" src="/upload/offsite/2014.07.01.8f13c6c0-051e-40ab-bfe9-5de07146b65c\6521a5ee-78ae-425c-abb9-21a461ffdcd4.png" width="550" /></p>
		<p>
			但相关报道一出来，便引发了广泛质疑。</p>
		<p>
			COS系统宣称，「现在就有10万应用可以运行」。而不管是iOS还是Android，积累十万的应用都需要相当一段时间。COS作为一个完全独立自主的操作系统，是如何做到这一点的？中国科学院软件研究所总体部主任武延军在接受人民网采访时有个新的说法，&ldquo;COS系统基于Linux内核开发，除了少数东西，几乎都是我们自己开发的。当然涉及到近千万的代码，都是我们自己开发，这部分可以作为自主知识产权&rdquo;。</p>
		<p>
			其实所谓的COS自主产权的操作系统，据网上传闻，是某HTC员工带着sense6.0泄露版在大陆找买主，联系几家价格谈不拢，表示不买账，最后找到冤大头中科院，表示是某大学联合中科院自主研发的系统。让中央拨资金。最后2000万成交。骗子拿了巨额经费，中科院拿了所谓研究成果。</p>
		<p>
			COS系统实际上就是简单替换了部分桌面图标，甚至连状态栏的图标都没有替换。相对于阿里云操作系统这种对Android系统的深度修改，COS系统只是对HTC的Sense界面进行了一定程度的修改&mdash;&mdash;拿着HTC的自带系统换了换资源，加上了几个功能的apk，重新打包就成了所谓的COS系统，半年不到，关于COS系统的消息几乎销声匿迹，无人再提起。</p>
		<h3>
			禁盒子</h3>
		<p>
			就在上周，<a href="http://www.leiphone.com/sarft-injunctions.html" target="_blank">广电总局发函禁止浙、沪两地电视盒子预装视频App</a>。</p>
		<p>
			根据报道中知情人士透露，总局网络司此次分别下发关闭函给浙江省新闻出版广电局、上海市文化广播影视管理局两家单位。其中浙江关闭函点名批评，华数传媒推出的&ldquo;天猫魔盒&rdquo;载有视频类App爱奇艺、搜狐视频、聚合类App电视猫、兔子视频等；上海关闭函点名批评，百视通推出的&ldquo;小红互联网电视机顶盒&rdquo;载有优酷等视频类App。<strong>两者为政治有害、淫秽色情和低俗不良节目及侵权盗版节目大量进入电视机提供了技术支持和通道，严重违反了中央要求和总局相关管理政策。</strong></p>
		<p>
			据其透露，这是近期国内一系列&ldquo;净网行动&rdquo;的延续。国内在互联网电视盒子上一直有明文规定，广电总局181号文细则&ldquo;互联网电视盒子的内容服务平台不能与设立在公共互联网上的网站进行相互链接&rdquo;，翻译过来就是&ldquo;互联网电视盒子可以接牌照方（比如华数、百视通）的内容，但是不能接第三方内容App（比如优酷、泰捷视频）。&rdquo;<strong>天猫魔盒与百视通小红机顶盒此次由于预装了大量未经广电认可的视频内容App，所以横遭封杀、关闭整顿。</strong></p>
		<p>
			广电的思路跟前面禁WiFi的思路差不多&mdash;&mdash;电视盒子无疑动了机顶盒的奶酪，并且不利于监管，在目前还能用电视牌照来做钳制，所以能做限制就尽量做限制。</p>
		<p>
			但科技发展的车轮，从来都不会止步于这些小波折，未来电视内容互联网化是必然趋势。</p>
		<p>
			逆潮流的打着「民族」牌，来骗经费，或者打出「信息安全」的口号来维护自己的利益&mdash;&mdash;这些行为，最终都将被证明是个笑话。</p>
		<p>
			我们经历了太多前车之鉴，每当我们痛心国内某些科技领域与国外的差距时，国内某些部门是否反思一下，当下的管理制度是否顺应时代的发展？为了鼠目寸光的眼前利益，作出逆潮流的行为，不觉得可笑？</p>
		<p class="sourcelink">
			&nbsp;</p>
	</div>
</div>
]]></description><link>http://zackyang.com/post/in-those-years-official-tech-tree</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 01 Jul 2014 07:42:02 GMT</pubDate></item><item><title><![CDATA[网络“反鸡汤段子”]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			1、又一天过去了。今天过得怎么样，梦想是不是更远了？</p>
		<p>
			2、只要是石头，到哪里都不会发光的。</p>
		<p>
			3、我有位家境一般的朋友，一直觉得如果自己有钱一定会更幸福。后来他妈做婴幼教育发财了。快十年后我见他，问：现在你倒是有钱了，你真的幸福吗？他回答：爽翻啦！我默默地走开了。</p>
		<p>
			4、只有能力强会被当成纯技术人员；而光会社交拍马又会被认为没有真才实学；所以，要想在单位中脱颖而出，最重要的是有关系。</p>
		<p>
			5、我发现没有任何一个煤矿工人靠挖煤多又快当上了煤老板。</p>
		<p>
			6、我有个朋友，在几年前停止了抱怨和自怨自艾，开始努力改变自己。到今天，他的物质生活和精神状态都没有什么改善。</p>
		<p>
			7、很多时候，乐观的态度和好听的话帮不了你。</p>
		<p>
			8、回首青春，我发现自己失去了很多宝贵的东西。但我并不难过，因为我知道，以后会失去的更多。</p>
		<p>
			9、秋天是收获的季节。别人的收获是成功与快乐，你的收获是认识到并不是每个人都会成功与快乐。</p>
		<p>
			10、父母一直注重对我的品德教育。到了社会上，我按照父母教我的接人待物，却发现自己并不受人待见。<br />
			11、最靠得住的是金钱，最靠不住的是人心。</p>
		<p>
			12、对今天解决不了的事情，也不必着急。因为明天还是解决不了。</p>
		<p>
			13、青年靠什么混日子？头等青年靠出身，二等青年靠关系，三等青年靠天资，四等青年靠努力，五等青年耍文艺，六等青年打游戏，穷游，看美剧。</p>
		<p>
			14、每次看到穷游日志的感受都是：那么穷就别TM出去浪了。</p>
		<p>
			15、&ldquo;不去努力然后告诉自己我根本就不想要&rdquo;的痛苦，比&ldquo;拼命努力后失败&rdquo;的痛苦，要小得多。</p>
		<p>
			16、没有钱包的充实，哪来内心的宁静。很多人都本末倒置了。</p>
		<p>
			17、一些年轻人通过美剧、旅游和Youtube视频拥有了朴素的自由民主和人权观念；他们觉得自己工作烂，人缘差，没对象，都是中国的体制害的。</p>
		<p>
			18、你只需看着别人精彩，老天对你另有安排。</p>
		<p>
			19、普通人一生的四个阶段：心比天高的无知快乐与希望&mdash;&mdash;愧不如人后的奋斗与煎熬&mdash;&mdash;毫无回报的愤懑与失望&mdash;&mdash;坦然的平凡和颓废。你走到哪一步了？</p>
		<p>
			20、大部分成功靠得既不是厚积薄发的努力，也不是戏剧化的机遇，而是早就定好的出身和天赋。</p>
		<p>
			21、小孩问富翁：叔叔为什么你这么有钱呢？富翁说：我给你讲个故事吧。很小的时候，我注意到楼下的矿泉水卖一块钱，而三站地外的篮球场上，要卖一块五。我拿着一个大书包，从楼下买水带到球场去卖，卖一块二。一个月我挣了十块钱。小孩说：我好像明白了。富翁说：你明白个屁。后来我爸死了，把钱留给我了。</p>
		<p>
			22、&ldquo;为什么我总是感觉自己特别普通？&rdquo;&ldquo;可能是因为你确实比较普通吧。&rdquo;</p>
		<p>
			23、很多人不是心理疾病，而是心理残疾，治不好的。</p>
		<p>
			24、我发现很多混得不好的人看得都很开。也不知道他们是因为看得透彻而不屑于世俗的成功，还是因为不成功而不得不看得开。</p>
		<p>
			25、除了有钱人，世上还有两种人：其一是省吃俭用买奢侈品装逼，其二是省吃俭用也买不起奢侈品的。</p>
		<p>
			26、一场说走就走的旅行归来后，除了该做的事情被拖延的更久了，什么都没有改变。</p>
		<p>
			27、你努力后的成功，不能弥补你成功前的痛苦。</p>
		<p>
			28、假如今天生活欺骗了你，不要悲伤，不要哭泣，因为明天生活还会继续欺骗你。</p>
		<p>
			29、要是有个地方能出卖自己的灵魂换取物质享受就好了。</p>
		<p>
			30、好身材的因素很多。不是节食和锻炼就能拥有好身材的。</p>
		<p>
			31、每天显得无聊或寂寞了，去找朋友一起吃饭和逛，只不过是为了满足自己与人交往的需求，算不上是社交。</p>
		<p>
			32、优秀的女生在脆弱的时候(比如分手，工作不如意)，会需要比平时更多的关爱，于是会和更多的人交流。如果她在恢复正常后，回到了自己原来的圈子，不再理你，请你不要奇怪。</p>
		<p>
			33、朋友，那不是懒，懒是可以克服的。你只是脑子比较弱(笨)，没办法长时间经受高强度的思考，去搞逻辑太复杂的东西和处理太多的信息量。</p>
		<p>
			34、有些年轻人，一毕业就到某些大型国企和机关中工作。每天没什么事儿，就是吃饭喝酒，福利好得不得了。人生还没有奋斗过就开始养老，自己的理想被丢在一旁，用民脂民膏来享受特权。对于这样的年轻人，我只想问你们四个字：哪投简历？</p>
		<p>
			35、所有抱怨社会不公和制度的人翻译过来只有一句话：请给我金钱，女人和社会地位。</p>
		<p>
			36、常听到别人说：我希望他/她有什么话当面说，不要在别后中伤人。一些人信以为真，而实际上，我的实践证明，当面说别人坏话，别人会非常愤怒，难堪。所以中伤别人一定要在背后。</p>
		<p>
			37、其实找谁做女朋友都差不多，都是在不停地争吵。只不过一些人是和比较漂亮的女孩子在争吵。</p>
		<p>
			38、爱情开始时都差不多。但当两个人平淡到左手牵右手时，是加班挤地铁还房贷然后给他农村父母寄钱假期在屋里大眼瞪小眼，还是开小车朝九晚五住大房子周末采购装点自己的小家出国旅游，区别就非常大了。</p>
		<p>
			39、坏女人爱男人的钱和权；好女人爱男人因有钱和有权儿产生的自信、宽大、精力充沛、乐观进取。还好，殊途同归。</p>
		<p>
			40、精神追求应当是物质追求得到满足后的自然反应。而不是在现实受挫后去寻求的安慰剂。</p>
		<p>
			41、我的梦想就是一手拿着相机，一手拉着你，四处旅行。每天日落时的歇脚处都是我们的家。然后在三十多岁的时候还在初级职位上拿着微薄的薪水，和刚毕业的年轻人一起被呼来喝去。</p>
		<p>
			42、那些能够彼此帮忙托关系的友谊，比那些天天在一起就是扯淡吃喝旅游的友谊，要强得多。</p>
		<p>
			43、一些人追求卓越是因为他们天性如此，且能力出众。很多其他人却也喜欢跟着凑热闹。</p>
		<p>
			44、那些人人羡慕的精英，其实过得并不如你想象的那样好。但肯定比你是强得多。</p>
		<p>
			45、幸亏当事者迷，不然真的看清事实真相，很多人是承受不来的。</p>
		<p>
			46、没钱没事业的人，才有时间去提高自己的人生境界。</p>
		<p>
			47、年轻时总是缺乏对自己的正确认识。时而觉得自己能力超群，海阔天空，时而觉得一无是处，平凡无能。长大后，经历得多了，逐渐认清自己，才发现自己原来是一无是处，平凡无能。</p>
		<p>
			48、成语造句：很多年轻人想要从工作中找寻快乐和人生的意义，真是缘木求鱼。</p>
		<p>
			49、路上看到两个长得不好看也看起来很穷的男女热吻。我说两个物质生活质量很差的人，彼此相伴。朋友立刻反驳我：物质生活质量不行就不会幸福吗？他们如此相爱，比那些有钱又美但离婚的名人强多了！我说我根本没说他们不幸福呀，你努力反驳的，可能是你自己内心的声音吧。</p>
		<p>
			50、社会学家研究表明：难看和没钱的男人，并不比高帅富更加靠谱。</p>
		<p>
			51、普通人结婚的另一半其实并不欣赏自己，只不过找不到更好的人。他们真正欣赏喜欢的，另有其人。</p>
		<p>
			52、爱情就是，如果没有更好的选择了，我才陪你到天荒地老。</p>
		<p>
			53、他给你的爱会消逝，他给你的TIFFANY却不会贬值。</p>
		<p>
			54、我问过很多女大学生这个问题：出国旅游和用名牌，真的这么重要吗？第一种回答是：不重要，但男朋友愿意而且能够给我买，很重要。第二种回答是：对啊，很重要啊！</p>
		<p>
			55、错把放纵当潇洒，把颓废当自由，把逃避责任当做追求自我价值。不过是懒，怕吃苦，哪来那么多好听的理由。</p>
		<p>
			56、有些女生觉得说自己是吃货能显得可爱，其实并没有这样的效果。</p>
		<p>
			57、女生的冷暖自知什么的，在长得好看面前弱爆了。</p>
		<p>
			58、一些女生在背后议论长得美家境好的女生，说对方生活轻浮，道德不高。她们说得有根有据，也很有道理，但听起来总是显得酸溜溜的。</p>
		<p>
			59、我有一些漂亮又受过教育的姐妹，本来有机会嫁给官富二代，但很多被那些长得不错、有名校高学历、刚毕业在知名外企工作、加班到很晚还健身的男生所吸引。觉得人家上进又有潜力。五六年后，她们悔得肠子都青了。</p>
		<p>
			60、我大学宿舍的一个女生，每天要花半个小时拌狗粮拿到外面去喂流浪狗。可她半个月才给家里打一次电话。她家是三线城市的工薪阶层。同学们都说她是爱心小天使。</p>
		<p>
			61、几年前BBS有女生写道：不知为什么，每次有丑男看我，我都感觉他很猥琐，特别反感；但帅哥看我就感觉很好。今日又看到有男生写：我发现我老是喜欢抢着给漂亮的女生帮忙，不自觉地就会问她需要什么；但每次丑女让我帮忙，我就感觉：你自己不会干吗？&mdash;&mdash;一些很明显的实话说出来，显得格外可爱。</p>
		<p>
			62、美国人的生活就是像你在电影电视剧看的那样好。天天玩儿，随便搞搞就挣大钱，到处都是感人的细节，帅哥美女随便搞。导演们把这些日常生活拍下来，送到电视台电影院播放。</p>
		<p>
			63、口中的道德和原则虽然重要，却总是要给手里的利益让道。</p>
		<!--Ad Injection:random-->
		<p>
			64、一提到钱，大家就不是那么亲热了。</p>
		<p>
			65、你这么努力，忍受那么多寂寞和纠结，我们也没觉得你有多优秀。</p>
		<p>
			66、人生就是这样，有欢笑也有泪水。一部分人主要负责欢笑，另一部分人主要负责泪水。</p>
		<p>
			67、很多人不断地规划自己的人生，每天压力很大。其实不管你怎么过。都会后悔的。想想你这前几十年就明白了。</p>
		<p>
			68、三十岁时，大部分人都卡在初级职位上。现有的工作升不上去，又无法承担转行的时间成本，更来不及再去读书。父母开始多病；自己收入有限，也没有存款。更大的痛苦，是看到身边没有背景但努力又聪明的人已经小有成就，有背景的人已经开始过上贵族生活了。</p>
		<p>
			69、这个世界没有错，谁让你长得不好看又没钱。</p>
		<p>
			70、有些妹子喜欢带上墨镜自拍。其实再戴上口罩，会显得更美。</p>
		<p>
			71、多照照镜子，很多事情你就明白原因了。</p>
		<p>
			72、我从来不会脑残地在网上晒自己买的名牌，因为我买不起。</p>
		<p>
			73、小时候以为有钱人都很跋扈，心都是黑的。长大后才发现，很多有钱人都懂得很多，经历很丰富，做事儿很认真，为人很宽厚，理性，比穷人更好相处。</p>
		<p>
			74、长相不行的人，为人也未必好。只不过由于长久寂寞的折磨，有时会发疯似地对人好。</p>
		<p>
			75、26岁的他辞掉工作，和朋友建了支乐队，到各民办大学演出，反响平淡。30岁钱花完了，父亲得病要很多钱。&ldquo;唱完这场就放弃，青春就到这里了。&rdquo;甘肃七里河大学演唱会前，他留下眼泪说。一位女学生递上纸条：我喜欢你的歌，要坚持梦想。他把纸条攥紧决定坚持梦想。34岁，他欠了十几万的债，父亲也病逝了。</p>
		<p>
			76、&ldquo;老师您好，请问像我这样的，没有背景的北大毕业生应该如何定位自己？&rdquo;&ldquo;社会底层群众中受教育程度最高的一批人。&rdquo;</p>
		<p>
			77、如果你每天干的活明显多于别人，但自己很高兴还感觉得到器重，那么与其说你很有才干，不如说你的领导很会管人。</p>
		<p>
			78、当别人和你说忙，是他/她要留时间给更重要的人。</p>
		<p>
			79、&ldquo;那些出身好能力强的人努力是为了成功，因为人家有可能会成功。我们努力是为了啥呢？&rdquo;&ldquo;为了活下去。&rdquo;</p>
		<p>
			80、基因是你给的，成长环境是你给的，社会阶层是你给的&mdash;&mdash;还有脸埋怨自己孩子没出息。</p>
		<p>
			81、有些人努力了一辈子，就是从社会的四流挤入了三流。</p>
		<p>
			82、弱者都是这样，觉得生活中的无奈太多，自己又无力改变。</p>
		<p>
			83、学术能力的缺乏并不意味着你就擅长混社会，说不定还不如在学校的表现。</p>
		<p>
			84、你全力做到的最好，可能还不如别人随便搞搞。</p>
		<p>
			85、如果你知道一些事情有意思，但不能去做而失落，那还好；要是觉得什么都没意思，应该就是抑郁症。</p>
		<p>
			86、我要是有钱或者长得好看就好了。那样，即使我性格有点儿怪，也会有人愿意倾听我的想法和感受，跟我做朋友。</p>
		<p>
			87、出身不好的限制也不光是平台问题。出身不好，说明你父母混的也不怎么样，也许你基因里就写着&ldquo;不行&rdquo;两个字。</p>
		<p>
			88、经过十年的不断奋斗和磨砺，我终于从一个懵懂无知、敏感脆弱的少年，成长为了一个懵懂无知、敏感脆弱的青年。</p>
		<p>
			89、为什么有些人要把追求精神满足和追求物质上的富足对立起来呢？你不幸福是因为你境界不高，你物质生活差是因为你能力不行。这完全是两回事儿。</p>
		<p>
			90、成败是评判英雄的唯一标准。</p>
		<p>
			91、优秀幸福的人是喜欢撒娇的，告诉别人自己这儿过得不好，那儿过得也不好。有些人当真的了，觉得别人天天是在宝马车中哭泣。</p>
		<p>
			92、如果外貌好能够获得他人的关注，又有钱能够支持各种娱乐活动，谁会愿意每天呆在家里打游戏，刷微博，看电视剧。</p>
		<p>
			93、如果你很忙，除了你真的很重要以外，更可能的原因是：你很弱，你没有什么更好的事情去做，你生活太差不得不努力来弥补，或者你装作很忙，让自己显得很重要。&mdash;&mdash;史蒂夫&middot;乔布斯</p>
		<p>
			94、很难想象让敏感多变的年轻人去做Leader，进行重大的决策。这些人睡一觉起来，被别人说了几句，或者吃了顿好饭，人生观世界观就可以发生翻天覆地的变化。</p>
		<p>
			95、尽量不要和比自己生活质量高的人起冲突，不论你是假装若无其事、努力争辩或者破口大骂，在别人看来，都是自己很可笑并且已经输了。</p>
		<p>
			96、有些人，社交能力很差。只能和那些志同道合，彼此欣赏的人做朋友。而那些性格不随和，不喜欢自己，但是能给自己带来提升的人，他们没有能力搞定。</p>
		<p>
			97、老板和领导很清楚哪些人能够得到晋升。对于那些不能的人，他们也会不断地鼓励和给她们希望。</p>
		<p>
			98、以前每次看到网上的青年在微博校内大谈国事，我担心他们会干出些什么事情来。后来我发现他们还同时说着&ldquo;明天一定要早起&rdquo;，&ldquo;这个假期要多看几本书&rdquo;，&ldquo;再也不能多吃了&rdquo;，于是我放心了。</p>
		<p>
			99、一些人的情商比较低，没法扮演好自己的社会角色，只能一直以最真实的自己面对世界。</p>
		<p>
			100、人生的自由和无限可能性都是错觉。每个人都被社会压力，亲近的人和自己束缚的死死的，每天做着自己一定会去做的事情。</p>
		<p>
			101、社会精英阶层一边啃着心灵鸡腿和心灵鸡胸，一边为我们送上了心灵鸡汤，说人生的价值并不在于你挣了多少钱和外在是否美。</p>
		<p>
			102、出卖自己的灵魂和原则并不丢人，丢人的是没能卖一个好价钱。</p>
		<p>
			103、我们所咒骂的那些品德败坏的人，其实不过是直接或间接地损害了我们的利益。</p>
		<p>
			104、直到三十岁才知道，和不同的人说不同的话，表现出不一样的态度，是一种非常可贵的能力，而不是虚伪。</p>
		<p>
			105、别减肥了，你丑不仅是因为胖。</p>
		<p>
			106、有些人感慨：&ldquo;自己岁数不小了，还没有成熟起来。&rdquo;其实你们已经成熟起来了，你们成熟起来就这样。</p>
		<p>
			107、只有拥有找男女朋友的能力和很多备胎，才能真正享受单身生活。</p>
		<p>
			108、女生们宁肯做高帅富的备胎，也不肯接受屌丝的行为，从基因上保证了人类的进步。</p>
		<p>
			109、Loser面对生活比自己好的人，心中生出了怨恨。</p>
		<p>
			110、我去找心理医生看抑郁症。他听完我的陈述，说道：如果你说的都真的话，为什么你不去自杀呢？你这不是抑郁症；抑郁症是看事情悲观，本来好，却认为不行。你是本来就过得不如别人。</p>
		<p>
			111、很多人发现自己在钱、权、女人的问题上比不过别人，于是开始试着在道德和人生境界上做文章。</p>
		<p>
			112、碰到一个认识的人，想一起聊聊天。她说自己去香港和希腊玩了，又买了苹果和化妆品；我不知道怎么回应，因为我很久没有出去玩和买东西了。我又说我最近思考了人为什么活着和出身的问题，她也沉默，因为很久没有思考这样的问题。此后再也无话。</p>
		<p>
			113、我追逐自己的梦想，别人说我幼稚可笑，但我坚持了下来。最后发现，原来还真是我以前幼稚可笑。</p>
		<p>
			114、你年轻时一事无成；时而自怨自艾颓废堕落，时而咬紧牙关拼命努力，经营关系，但你的生活一直没有改善，你一直很痛苦，直到三十岁。&rdquo;他听后兴奋地问：那三十岁之后呢？有转机吗？算命先生微微抬起头：三十岁后&hellip;&hellip;你就开始习惯了。</p>
		<p>
			115、很同情那些名校毕业生。这些人中的绝大多数，一生最大的成就就是高考的成功，一下超越了社会中的各种阶层，仿佛升到顶端。之后一辈子都在走下坡路。</p>
		<p>
			116、哪怕抛掉出身的因素，我觉得你也未必干得过别人。</p>
		<p>
			117、吹牛逼是一些人的天性。当对于一些话题自己乏善可陈时，就会搬弄外援：我有个朋友，拥有比你们更牛逼的经历。讲完后洋洋得意，潜台词是作为其朋友，自己肯定也不会差到哪去。</p>
		<p>
			118、有时我们觉得别人误会了自己，其实是我们误会了自己。</p>
		<p>
			119、所谓人生理想，就是支持你捱过每天的无聊与痛苦，最终没有实现的那个愿望。有了它，临死前是无穷的空虚和痛苦；没有它，这辈子都熬不下来。</p>
		<p>
			120、好多重要又紧迫的事情，先干哪一件都会感觉别的事情被耽误了。所以还是先上会儿网吧。</p>
		<p>
			121、很多时候别人对你好，并不是因为别人喜欢你，而是因为他们喜欢对人好。</p>
		<p>
			122、女生有这样的梦想：某一天辛苦工作之后，在客户处认识一位优秀男人。他自信、Self-centered、成熟、幽默，又对人很caring。你们坠入爱河。他对你说：别工作了，我帮你开家咖啡馆吧！于是你的生活变了，每天在充满情调的咖啡馆里钻研咖啡甜点。你又开始相信爱情了。后来你发现男朋友开了十几家咖啡馆了。</p>
		<p>
			123、年轻的男孩只希望自己的女朋友是美丽的。而随着他不断长大，阅历的不断积累，他终归会认识到：美丽并不是选择伴侣的全部，性感也很重要。</p>
		<p>
			124、如果你是长得好看的话，在公车地铁上睡着了，头靠在旁边人的肩上，旁边的人会一直陪着你直到醒来。你要是长的丑的话，头一旦靠在旁边的人肩上，他会立即拍醒你，并温馨提醒你保管好财物。</p>
		<p>
			125、&ldquo;妈不是说你，你看你找那个对象，长得那么丑，话也说不明白，我要是和别人说这是我女婿我都觉得丢人&rdquo;&ldquo;他家有十几个亿。&rdquo;&ldquo;当然了，人也没必要活得那么虚荣，为什么非要在意别人的看法呢？更何况爱情本来就是盲目的，妈支持你！&rdquo;</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/the-network-antichicken-jokes</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 13 Jun 2014 01:53:31 GMT</pubDate></item><item><title><![CDATA[屌丝应该知道的 6 个残酷人生事实（血泪翻译）]]></title><description><![CDATA[<div id="readability-page-1" class="page"><div id="article" class=""><p>原译文标题为：Loser应该知道的 6 个残酷人生事实（血泪翻译），译者（天理难容）没有翻译 Loser，
这个词不难理解——失败者。但是，我把 Loser 改成了「屌丝」。</p><p>来自: 天理难容 (Weixu@Rutgers) 2013-01-20 09:24:29</p><p>译注：此文转载并翻译自 cracked.com，文章中很大一块其实和拖延症有关的所以发在这里。</p><p>【补注1：最初本文发在一个另一个论坛，我用了 loser 这个词来吸引眼球，但转发豆瓣的时候忘记改标题了。现在为了 SEO 的目的我就不修改标题，厚着脸皮继续哗众取宠了。】</p><p>【补注2：本文是我看原文后 2 小时粗译出来的。如果觉得译文生涩，可以搜索一下原文标题看原版。感谢大家推荐和关注。现在关注的人多了，我深感责任重大，正准备重新翻译一遍。鉴于最近忙碌的程度，二度翻译遥遥无期】</p><hr><p>原文标题：<br>6 Harsh Truths That Will Make You a Better Person<br>六个可以让你变得更强大的残酷事实<br>by David Wong</p><hr><p>【补注 by justjavac：我在译文的基础上又做了一些修改，主要是语法和修辞上。感谢「天理难容 (Weixu@Rutgers)」和原作者。】</p><p>正文：</p><p>如果你的职业道路非常顺利，你的生活美满感情顺利，你可以不用读这篇文章。
祝你一天愉快，这篇文章不是为你写的。
你做的非常出色，我们都为你自豪。</p><p>对于其余的人来说，我希望你做一件事情：说出 5 件你引以为豪的事情。
写在纸上也好，或者喊出来也好都可以。
但这里有一个条件：你不可以列出你「是」怎样的人（比如，我是一个温柔的人，我很诚实），
只能列出你「做」的事情（比如，我刚获得了全国象棋冠军，我做的 chili 是全麻省最好的）。
如果你发现很难列出五件事情，这篇文章就是为你所写的。
而且你他娘的肯定一边听一边心里会不舒服。
我的感受是，如果有人在 1995 年的时候跟我讲这些事情就好了。</p><h2>6：这个世界只关心你能给予什么</h2><p>我们假设一下你最爱的亲人在大街上被枪击了。
TA 一边失血一边尖叫。
一个路人冲上来说「让一下」。
他仔细检查了伤口并拿出一把小刀准备在大街上动手术取出子弹。</p><p>你问他：「你是医生吗？」</p><p>他回答说：「不是」</p><p>你说：「你知道你要做什么，对吧？你是不是退伍的军医，还是……」</p><p>这个时候那个路人感觉有点不快了。
他告诉你说他是一个好人，是一个诚实的人，他上班从来不迟到。
他告诉你说他是一个孝顺的儿子。
业余生活丰富，生活非常富足。
而且～他还说他从不说脏话……</p><p>你有点疑惑，说：「这 TMD 和我亲人被枪击躺在马路上有什么关系？
我需要一个可以在伤口上动手术的人！你到底能不能做？」</p><p>现在这个路人非常生气了——为什么你就那么自私肤浅呢？
你难道不在乎他的那些优良品德么？
他刚才不对你说他总是记住女友的生日吗？
他有那么多优良品质，你为什么就抓着他会不会外科手术这个事实不放呢？</p><p>在那个疯狂的情形下，你会用你沾满鲜血的双手用力摇晃他的肩膀，
大喊道：「废话！你说的那些优良品质都是屁话，因为在当前情况下我只需要一个可以止血动手术的人！
你这个神经病给我滚！！！」</p><p>所以，这就是我要说的第一点成人世界的残酷事实：
<strong>你其实天天都身处于上述的「当前情况」之中。
只不过换作你是那个喋喋不休的好心路人，而社会上其他所有人都换作成那个流血的伤者</strong>。</p><p>如果你想知道为什么社会对你不屑，或者你为什么从不受到尊重，
这是因为社会充满了【需要某样东西】的人。
他们需要人来造房子，他们需要食物，他们需要娱乐，他们需要人来满足性欲。
你从出生开始就进入了这样的需要解决人们需求的社会系统。</p><p><strong>你要么选择学习某种技能担当某样角色满足他人的需要，要么就选择被社会抛弃</strong>。
这个社会不在乎你有多么善良，礼貌，无私。
你会变穷，你会没有朋友，你会被遗弃。
但这是不是说我们要刻版、自私呢？
爱和温柔重要吗？
当然了，但前提是这些爱是别人需要的，也是从其他人那里得不到的。</p><p>否则的话……</p><h2>5：别去相信嬉皮士的话 (Hippies are wrong)</h2><p>【原文此处引用了一段视频。
国内看不了 Youtube。
可以翻墙且听力没问题的可以此处看：<a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=8kZg_ALxEz0">http://www.youtube.com/watch?feature=player_embedded&amp;v=8kZg_ALxEz0</a> 】</p><p>对于那些无法看视频的读者，这是一段著名的影院神片 Glengarry Glenn Ross 里 Alec Baldwin 的演讲。
Baldwin 的角色——你会假设是反角——对一屋子的销售员疯狂施压，警告他们说他们都会被解雇，
除非他们可以搞定他们手上的单子。</p><p>「好人？关我屁事！慈父？去你妈的！回你的家和你孩子玩去！如果你想在这里工作，给我敲定手上的单子」</p><p>非常残酷、粗鲁、甚至有点疯狂。
可是，这恰恰是这个社会对你期望的最诚实的写照。
不同的是，在现实世界里，人们认为那样讲话太粗鲁了对你不礼貌，
于是他们干脆什么都不说眼看着你失败。</p><p>这个电影片段改变我的人生。
我如果知道怎么做的话，会把它录成闹钟每天早上叫我起床。
Baldwin 因此还拿了奥斯卡奖，而这个片段是他整个电影唯一出场的场景！
正如前人已经分析过，这段演讲精彩之处在于，一般的人会理解为
「天哪，我要有这么一个混蛋老板会怎样啊？」。
而另一半人却会想「太 TMD 励志了！我现在就想去上班做业务去！」</p><p>或者，有一个心理学家写道：「如果当时你在那个房间里，你们中的一些人会明白这是工作，
会从那段演讲里吸收能量，就像一个球队教练冲你大骂一样。
你会觉得‘这家伙太有能耐了’。
而另一些人会非常介意，认为这个老板是混蛋，你没有权利跟我这样说话。」</p><p>以上节选自一篇对于「hipster（这个词很难翻译，姑且翻译为非主流潮人）」的批判文章。
文章解释了这些人为什么会难找工作，并指出上述两种不同的态度——受刺激 VS 受激励——很大程度上决定你是否在现实生活中能成功。</p><p>比如说，有人会引用搏击俱乐部里的经典台词「You are not your job」。
但事实上，你完完全全就是你的 job（职责）。
当然了，你的职责和你为公司的服务不是一回事请，但其实你只不过是你所有有用技能经验的综合体罢了。
技能是某一个个体能为社会中其他人提供的有用服务。
但别搞错了，你的「职责」——你为他人提供的有用服务——就是你的全部。</p><p>这就是为什么外科医生比喜剧作家更受到尊重。
也是为什么机修工比无业潮人更受到尊重。
如果你的死讯能登上新闻，这说明你的工作已经成为了你的标签。
搏击俱乐部里 Tyler 说 You are not your job，但他同时又操办了一家成功的肥皂公司同时成为了社会运动的领导人。
He was totally his job （这句不翻译比较好理解）。</p><p>我们再这样理解一下：你还记得 Chick-fil-A 餐厅反对同性恋婚姻么？
不论嬉皮们如何抗议，公司还不是照样卖出了成千上万的汉堡？
这不是说顾客们认可他们，而是因为他们成功地完成了履行了他们的职责——做好吃的汉堡。
这一点才是最关键的。</p><p>你不一定非要从心里喜欢这个事实。
我也不喜欢我生日的时候天下雨。
但天还是要下雨。
人们有需求，人们会认可能够满足他们需求的人。
世界就是通过这么简单的机制运行的，谁也改变不了。</p><p>如果你抗议说，我不是肤浅的物质主义者，金钱不是万能的，我只能说：「我有说过金钱吗？
说明你没看懂我的要点。」</p><h2>4：你所做的事情不一定要换成钱，但一定要有益于他人</h2><p>那么我们换一个非金钱的例子好了。
这个网站(cracked.com)主要面向 20 出头的男性。
我每天都要从邮箱里收到一大堆挫男抱怨女人不愿意接近他们，虽然他们是世界上最 nice 的男人。
我可以解释他们的思路有什么问题，不过最好是让 Alec Baldwin 解释最好。</p><p>（译注：此处再次引用上述视频，我真的建议大家去看那个片段！）</p><p>在我们说的例子里，Baldwin 就是你生活里那个女神。
他们当然不会像 Baldwin 的角色那样粗鲁直接——社会教育我们不要对别人那么「诚实」——
但问题是一样的：「你是好人？关我屁事！想在这里工作，就给我搞定工作。」</p><p>所以，你有什么感想呢？
你对在书店里遇到的女神每天白日梦意淫，为她午餐不吃色拉感到惋惜。
她 10 年后会成为一个外科医生，你呢？</p><p>「什么？你是说除非我找到一个好工作赚大钱否则不可能把到女神？」</p><p>不！你的大脑跳跃太快了，因此你可以给自己一个理由认为所有拒绝你的女神都是肤浅自私的。
我在这里就问一个问题：你给予了什么？你聪明么？幽默吗？情趣吗？天才？雄心？创意？
好，那你做什么事情能向这个世界证明自己的优点呢？
不要跟我说你是个好人——这是最起码的。
你的女神每天有三打的男人对她「好」。
用我们上文的例子来说，伤者在大街上流血，你到底会不会开刀？</p><p>「我不歧视女人，不歧视种族，不贪婪，不肤浅，也不虐待人！我和那些屌不垃几的男人不一样。」</p><p>很抱歉，如果你所能做的事情只不过是你「没有」一堆缺点，就 TMD 给我从伤者身边滚出去！
我们有的是风趣、英俊、事业成功的男人来帮助你的女神。</p><p>伤到你自尊了么？有一点？那现在怎样呢？
你想碎碎念呢，还是打算学习怎么去做手术治疗那个伤者？
取决于你。</p><p>但你不要去抱怨为什么女神就喜欢找你口中的坏男人。
她们吃这套是因为那些屌不拉几的男人有其他东西可以满足你的女神。
「但我是一个聆听者！」
是吗？你可以坐在女神身边几个小时听她念叨？你猜怎么着？
角落里还有另一个男人可以这样做，他还是吉他高手！
你如果不停地说你是一个好人，就像一个餐厅说他们的卖点是他们的食物不会让你拉肚子一样，
就像一部电影的标题是「This Movie is in English」。</p><p>这就是为什么你可以做一个好人但仍然觉得自己是 loser（屌丝）。</p><h2>3：你恨自己是因为你无所作为</h2><p>「所以你的意思是要我去买一本教我如何把妹的书么？」</p><p>当然不是，除非那本书的第一章是「让自己变成女孩子愿意接近的人」。
因为这一步总是容易被忽略——人们总是问「我怎么能找到工作？」
而不是「我如何成为雇主愿意雇用的人？」；
人们总是问「怎么让女孩喜欢我？」而不是「我怎么成为女孩喜欢的人？」。</p><p>对吧？因为后者往往要求你放弃自己喜欢的爱好，注重外表，天知道还要做其他什么牺牲。
你甚至还可能要改变你的天性。</p><p>「但是为什么我不能就去找一个喜欢原本的我的人呢？」
答案很简单：人是有需求的。
别忘记我们的例子：伤者在流血，而你所做的只是抱怨找不到会自动愈合的伤口？</p><p>【此处插入一段 Youtube 上点击率很高的猥琐街头艺人表演的视频】</p><p>每个人看了上面这段视频都会会心一笑。
你能为人们带来笑声么？为什么不呢？
是为什么阻止你穿上猥琐的衣服在街头边唱边甩鸡鸡呢？
那家伙似乎知道赢得掌声的门道……做怪事……总比什么都不做好……</p><p>「但是我什么都不擅长！」我有好消息告诉你：如果你尝试反复练习做一件事情，
任何事情，你都可以擅长此事。我小时候可能是全世界最糟糕的作者。
到了 25 岁的时候稍微好那么一点点。
但当我职场失意的时候，我用业余时间写作长达八年，一周写一篇文章，直到它为我换回了钞票。
我花了 13 年时间才能登上纽约时报畅销书榜单。
我大概花了 20000 个小时才慢慢磨快了我拙劣的文笔。</p><p>不希望花那么多时间磨练一门技术？那么我有好消息和坏消息告诉你。
好消息是漫长的磨练可以让你慢慢走出困境——我忍受了多年琐碎的办公室工作，
因为我知道我同时在学习一门技能。
人们半途而废是因为要看到结果实在是太漫长了，同时也是因为他们没有意识到「结果」就是过程本身。</p><p>坏消息是你别无选择。「想继续在这里工作？——那就给我搞定手里的单子」</p><p>从我个人角度出发看，你并不是因为缺乏自信而恨自己，或者是因为别人羞辱你。
你恨自己是因为你【什么都不做】。
连你自己都不能爱「原本的自我」——这就是为什么你很可悲，不断写私信问我如何处理你的生活问题。</p><p>自己扳手指算一下：你有多少时间是在消费别人创造的东西（电视，音乐，电玩，网站）而不是生产你自己的东西？
只有你的「产出」才能为你添加作为人的价值。</p><p>如果你听到这里听不下去了，并且用你从小听到大的陈词滥调回应说：
「人的内在才是最重要的」，那么我只能说……（接下文）</p><h2>2：你的内在只有通过所做的事情才能表现出来</h2><p>在我所从事的行业里，我认识无数有理想的作家。
他们认为自己是作家，他们在聚会上介绍自己是作家，他们拥有一颗作家的热心。
他们只缺乏最后的一步：写点 TMD 像样的东西出来！！！！</p><p>是吗？难道「写点东西」就是真正决定谁是谁不是真正「作家」的标准吗？</p><p>我的天哪！！！当然是了！</p><p>这恰恰是对我以上所说一切最常见的反驳，也是对你生活中批评声音最常见的反驳。
这是你不断对你自己暗示以逃避能帮你改善自我的刻苦工作的理由。
「我知道我的内在是一个很好的人」。
你也会听到人说「我做我自己」。</p><p>不要误会我的意思：你的内在非常重要。
一个男人如果为了他的家庭从无到有造出一栋房子完全是因为他的内在是一个好人。
你所做的一切坏事最初是一个坏的念头，萦绕在你脑中，直到最后实施。
同样，做一件好的事情也是一样道理——内在的自我是你成功果实赖以生长的土壤。</p><p>但是所有人都应该知道，所有人却都不能接受的事实是：「没有最后的果实，你就什么都不是」</p><p>比如你内心非常同情穷人。很伟大。</p><p>这会让你最后做什么实事么？
你听到你社区里一些悲剧发生后，你会说「这些不幸的孩子啊，让他们知道我在内心同情他们」吗？
你要这么说我就只好说「fuck you」——给我去真正帮助他们才是真的。</p><p>数以千万的人看了那段 Kony 视频（译注：2012 年 Youtube 上很有争议的关于非洲儿童的视频），
所有看过的人都「在心里同情他们」。
那么这么强大的同情给儿童们带来了什么呢？屁都没有！
每天有非洲的儿童死于非命，因为数以百万的我们对自己说关心和行动一样重要。
这是我们内心的一种心理机制，控制着我们大脑里犯懒的那一部分，让我们不断逃避真正去做实事。</p><p>有多少人此刻正在想：「她（他）如果知道我是多么有趣的人，一定会爱上我。」
真的吗？你那些有趣的想法有多少让世人知道了呢？
如果你的心上人有一个隐藏摄像机跟着你拍一个月，他们会被录影的内容打动吗？
记住，人们不会读心术，他们只会观察你的行动。</p><p>我希望你做的，只不过是用你看别人的标准来看你自己罢了。
你有没有一个烦人的基督徒朋友给别人最大的帮助只不过是「我为你祈祷」？
你觉得烦不烦？
我这里还没涉及到祈祷是不是实际有用呢，他们提供的帮助不需要他们屁股离开沙发就可以做。
他们认为自己思想纯净，但是他们纯净的思想土壤有没有结出果实呢？
他们自己应该比别人更清楚这点——因为我「土壤-果实」的比喻就是从圣经里拿来的。
圣经里耶稣曾经不止一次说过「人们是根据果实来评判一颗树的」。
当然，耶稣从来不会说「想继续留在这里工作，就给我搞定单子」，
但他说「凡不结好果实的树，都要砍下來，扔在火里。」</p><p>对以上这些话无动于衷的人，就如同电影里对 Baldwin 无动于衷的业务员一样。（未完）</p><h2>1： 人的内心其实一直在拒斥进步</h2><p>人类的大脑是很神奇的。
但你会发现<strong>大脑在拒斥进步的时候运转得比做实事的时候还快</strong>。
你的意识会通过层层防御机制来排斥任何会让你改变现状的事情——
问一下对任何事物有瘾头的人就知道了。</p><p>所以，到现在，你们中的许多人一边读这篇文章，一边会感觉到大脑在不断提供排斥这篇文章的理由。
从经验上说，这些想法通常是：</p><p><strong>有意将任何批评理解为侮辱</strong></p><blockquote><p>他凭什么说我又懒又没用？一个善良的人从来不会这样对我说话！
作者写这些东西只不过是想显示自己有多么优越，让我这个loser对自己生活不满罢了！
等我回复更损人的话给你！</p></blockquote><p><strong>对人不对事</strong></p><blockquote><p>这人有什么资格告诉我怎么活？他自以为自己了不起吧？
不过是网上的一个白痴写手罢了！我要去人肉他，看他有什么丑事可以抖出来。
这人真自以为是，让我作呕</p></blockquote><p><strong>只看语气，不看内容</strong></p><blockquote><p>我会仔细看你的文章，找出一句话，断章取义只讨论那个。</p></blockquote><p><strong>不断修饰你的过去</strong></p><blockquote><p>事情没那么糟糕。
确实我上个月还想自杀呢，但现在我感觉好多了！
也许我只要继续做我现在做的事情，情况会好的。
让我继续给那个女神修电脑，女神总会到我身边的！</p></blockquote><p><strong>认为改善生活的行为总会让你失去自我</strong></p><blockquote><p>哦，那么你是让我扔掉所有的漫画书。
天天去健身房 6 小时？
因为除此之外我没选择了？」</p></blockquote><p>当然还有其他的想法。
记住：【痛苦是会让人感到舒坦的】。
许多人选择拥抱痛苦。
幸福是需要努力的。</p><p>还有：勇气。
人们无法批评你根本没有去创造出来的东西，所以人们选择什么都不做来避免批评。</p><p>人们很容易双手一叉裤袋批评别人的工作。
「这个电影很傻」，
「这对父母的小孩很皮」，
「那对情侣的感情很糟糕」，
「那个暴发户不学无术」，
「这个餐厅糟透了」，
「本文作者是个白痴」，
我倒不如留一条损的回复让网站开除他——「瞧，我这不「创造」了一些东西么？」</p><p>哦，是啊，我忘记提醒你了。
不论你尝试建造或者创造什么东西——诗歌也好，新的技术也好，或者新的感情也好——
你会立刻发现自己身边多了很多批评家。
这些批评家也许不会当你面损你，但是他们确实在挖苦你：
你的酒鬼朋友不希望你清醒，你肥胖的朋友不希望你苗条，你无业的朋友不希望看到你开始新的职业。</p><p>记住，他们不过在表达他们对生活的恐惧罢了，批评别人的工作是自己不作为的另一个理由。
「为什么我要创造什么东西呢，你看别人做的东西都糟透了！」
「我想写小说，不过我要等时机，我可不想写出暮光那样肤浅的东西」。
只要他们永远不动手去做事情，事情就永远是完美的。
或者他们如果真的着手做事情了，他们会故意不努力，让别人认为事情做不好是因为他们不在状态，
「他们真正的潜力是无穷的」，不是你看到的狗屎一样的产品。</p><p>往下翻读一下本文的回复——那些很极端的回复，永远都是「Cracked应该炒了这个作者」
「这个自负的白痴应该停止写作」。
所有一切的负面评论潜台词永远都是
「停止创作，如果换我来创作绝对比这个好千倍，你现在得到那么多人气让我自己很没面子。」</p><p>不要成为上述的那种人。
如果你是那种人，请不要继续成为那样的人。
这正是人们为什么不喜欢你的原因，这正是你恨自己的原因。</p><p>所以，我有个建议：给自己定一个期限，2013 年底，或者从你读本文之后的一年。
当别人跟你说「我的新年计划是减肥15磅」的时候，
我说咱们应该努力去做任何一件事情——
学习新的技能直到足够有用为止，或者随便选一件事情：学空手道，学跳舞，学陶艺，做一个鸟屋，学习按摩，学一门语言，甚至拍一部A pian，做蝙蝠侠打击犯罪……</p><p>关键在于：我不希望你把眼光放在某个过高的目标上，我希望你专注于获得一样新的，
【对其他人有用】的技能和经验。</p><p>「我没钱参加烹饪班」。那就 TMD 给我在 Google 上搜索：「如何烹饪」。
我的天，<strong>拜托你戒掉这些借口，否则这些借口就要你命了</strong>。
（You have to kill those excuses, or they will kill you）
（要么你干掉那些借口，要么让那些借口干掉你）</p><p>（完）</p></div></div>]]></description><link>http://zackyang.com/post/6-cock-wire-should-know-the-brutal-facts-of-life</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 12 Jun 2014 07:22:44 GMT</pubDate></item><item><title><![CDATA[手机上的生活]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-5625">
		<div class="post-meta">
			今天咱们来聊聊手机上的生活。</div>
		<div class="post-text">
			<p>
				你们知道人生的四大悲剧是什么吗？一是刚出门手机就没电。二是一上网速度就变慢。三是刚月初流量就用完。四是好不容易上传个照片，却没人一个人来点赞。 我很纳闷现在很多人好像没了手机就不能活，难道生活不该是放下手机，去读几页自己喜欢的书，去阳光里走走吗？这样一天下来，你就会发现，其实还是玩手机有意思。</p>
			<p>
				所以很多人的旅行，不过就是换个地方玩手机而已。因为所谓风景，在手机上看图片就好了，有时候想想还要费钱费时间跑到一个看图片就好的地方，呃，就是为了拍张照片发给朋友们看看，你们看，我来，我走了。</p>
			<p>
				现在吃饭也不过是就着手机下菜，否则真是吃什么都索然无味。你们这么爱手机，你们家里人知道吗？我家里人当然不知道，因为我玩手机玩的根本没时间理他们。呃，你们知道一个手机控是怎么生活的吗？</p>
			<p>
				早上刚醒来就把手机摸出来，迅速浏览要闻事件，这些事可以与我无关，但我绝对不能不管。我必须要表达我的观点，今天我们都是马伊琍，今天我们都是琼瑶，上网的孩子很忙你们知道吗？什么？黄海波嫖娼了？太过分了！今天我们都是黄海波！接下来的问题就是，嫖谁？</p>
			<p>
				出门上班绝对不能开车，因为对于一个手机控来说，最讨厌的事情就是一路绿灯。所以我选择坐地铁，一分钟不看手机就觉得自己无法呼吸，真搞不懂黄海波怎么会有时间去嫖娼。</p>
			<p>
				下地铁后买了《故事会》《读者》《知音》《青年文摘》，这四本书号称文艺青年的四大名著。可是我竟然发现自己患上了&ldquo;超过140字阅读障碍症&rdquo;。很纳闷很多人还要发长微博，微博发明出来不是让你写长篇的，这是博客时代的事情了好吗？唉，难怪罗玉凤会成为意见领袖，就是因为人家读得书多。</p>
			<p>
				上班的时候老板来找我开会，说：你边用电话边开会效率很低的。我很纳闷：效率高发微信不就行了吗？开什么会啊？要不是你这么喜欢开会，我的流量能用的那么快吗？</p>
			<!--Ad Injection:random-->
			<p>
				好不容易下班，微信圈里竟然没有人给我点赞，我就怀疑手机是不是被老板诅咒了？后来我才想清楚，是我发的内容太幸福了，于是我又发了一条：我病了，好痛苦。立刻有几百个朋友来点赞。真是一方有难，八方点赞。所以有一类朋友叫：点赞之交。朋友们纷纷留言：以后再有不开心的事情一定要告诉我们，让我们开心一下。</p>
			<p>
				怪不得很多人喜欢发挂吊瓶的照片呢，朋友们边点赞边夸奖：你果然没有放弃治疗。</p>
			<p>
				晚餐的时候约朋友吃饭也是集体玩手机，跟不玩微博的人，真没什么好聊的。跟玩微博的人，好像什么都没必要聊。约会这事纯粹浪费时间，百闻不如一见，见面不如刷微博。</p>
			<p>
				晚上回家，本来我是计划九点就要睡觉的，洗了个澡，刷了个牙，玩了会手机游戏，聊了会微信，对挂吊瓶的朋友点个赞。更新了下手机程序，维护下手机电池，一直到午夜0点了还没时间睡觉，因为每天只要决定睡觉，就感觉好忙。自从变成手机控，每天晚上从决定睡觉，到真正睡着，至少要缓冲3个小时以上。</p>
			<p>
				百年前躺着吸鸦片，百年后躺着玩手机。</p>
			<p>
				这么一想太可怕了，我必须要自律，我要控制，于是我在朋友圈发誓：</p>
			<p>
				从今天开始，我要控制对手机的依赖，当然我会把这个过程中的心得全部发到朋友圈和微博上。</p>
		</div>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/life-on-a-mobile-phone</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 10 Jun 2014 09:11:54 GMT</pubDate></item><item><title><![CDATA[在你月薪三千的时候，做月薪八千的事]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-5469">
		<div class="post-text">
			<p>
				曾有个月薪三千的妹子，编的稿件漏洞百出，我怒拍桌子，她却回了句：&ldquo;一个月三千块工资，你还想怎么样!&rdquo;琢磨她这话挺有意思，就像我们买了件便宜货，用不了两天就坏了，于是宽慰自己：就花那么点钱买的东西，你还想怎么样?当然，她的潜台词是，你给我八千，我自然就做得好好的。但问题是，老板付薪水也是一分钱一分货，你必须在拿三千工资时，先体现出八千的价值，老板才愿意买单。</p>
			<p>
				当年我刚入职时工资也是三千，但第二个月就涨到了八千。因为每次老板要的文案，我不仅写到位了，还会拿出两个以上的版本让他挑：一个是按他的要求写的，其它则是我建议的方案。</p>
			<p>
				当时我没有去想其中的关窍，只是因为喜欢写作，就会琢磨怎样写会更好;又因为珍惜自己的文字，所以觉得出自我手的文字，都关系我个人的品牌，于是很用心。在我看来，这是理所当然的事，但带过二十多个中文研究生后，才发现这种态度很稀缺。那些比一般人多念七年语文的人，竟连自己写的东西都不愿多看一眼，文字、标点、语法的错误触目惊心，对相关的知识背景一无所知，更别说去关心版式好不好看，配图美不美了。</p>
			<p>
				他们关心的是要不要加班，而想做好文字工作的人，是不会去考虑这件事。因为打磨文字所下的功夫，是看不到底的&mdash;&mdash;不然曹雪芹也不会&ldquo;加班&rdquo;十年，还写不完一部红楼。试问，要做好哪项工作不是如此?以&ldquo;要不要加班&rdquo;来评价一份工作好不好的人，绝不是企业需要的人才，因为他对工作的态度就是&ldquo;做了&rdquo;而不是 &ldquo;做好&rdquo;。</p>
			<p>
				举个例子，我公司附近的麦当劳门口，有个看自行车的大妈，夏天时她都会给所有的车，覆上自己带来的塑料布。顾客取车要走时，她还会笑着拧一把湿布，帮你擦擦坐垫，降降温。她从来没有开口，但很多人会主动多给她一块钱，还连声道谢。大妈和其他看车人的区别，就是&ldquo;做好&rdquo;和&ldquo;做了&rdquo;的差距&mdash;&mdash;在金钱上，差距是一倍;在成就感上，差距无法估算。</p>
			<!--Ad Injection:random-->
			<p>
				我完全了解有些新人的想法：又不想在你这久混，干嘛那么卖力气?其实，谁会在一家公司干一辈子?在中国可以活到3年以上的企业不到10%，向更好的企业、更好的工作迈进，是我们每个人的征程。不同的是，优秀的人在哪里都会垫下坚固的基石，所以越走越高。</p>
			<p>
				成为世界五百强的CEO，应该是每个职场人的向往吧，但对于新人而言，小公司也有小公司的好。大公司就像蔡京家的厨房，岗位细分到切葱花都要一个专职的厨娘，你可能老长时间连切肉的大活都没机会沾手，更遑论学会做一整个包子。而小公司人力资源紧张，同样三千工资不可能只让你切葱花，所以你必须很快学会做包子，还得会做很多种包子&mdash;&mdash;当然，前提是你愿意学。</p>
			<p>
				如果你第一份工作就进入大公司，庆贺之余也要提醒自己，公司看到的只是你光彩夺目的学生时代，在职场上你还是一个零，有可能变成正数，也有可能变成负数。很多人错把所在机构的强大，当作自己能力的强大&mdash;&mdash;这也是为什么有些离开央视的主持人，很快就被人淡忘。白岩松曾说，让一只狗天天上央视，就能变成名狗。但要知道，没了央视的舞台，不用多久它就会变回土狗。</p>
			<p>
				&ldquo;万般带不去，唯有业随身&rdquo;。这个&ldquo;业&rdquo;不妨这样解：一是做得好的技能，一是想做好的态度。有这份&ldquo;业&rdquo;在，不愁找不到舞台。但这份&ldquo;业&rdquo;不是白来的&mdash;&mdash;在你月薪三千的时候，就要像月薪八千那样做事，那没到手的五千，就是修炼这份&ldquo;业&rdquo;的学费。</p>
			<p>
				&nbsp;</p>
		</div>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/when-youre-a-monthly-salary-of-3000-8000-a-month</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 23 May 2014 05:43:53 GMT</pubDate></item><item><title><![CDATA[RESTful API 设计指南]]></title><description><![CDATA[<div id="readability-page-1" class="page"><div class="" id="main-content"><!-- div class="asset-body" --><p>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备......）。</p><!-- /div --><!-- div id="more" class="asset-more" --><p>因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现<a href="http://www.google.com.hk/search?q=API+first" target="_blank">"API First"</a>的设计思想。<a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">RESTful API</a>是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank">《理解RESTful架构》</a>，探讨如何理解这个概念。</p><p>今天，我将介绍RESTful API的设计细节，探讨如何设计一套合理、好用的API。我的主要参考资料是这篇<a href="http://codeplanet.io/principles-good-restful-api-design/" target="_blank">《Principles of good RESTful API Design》</a>。</p><p><img src="/upload/offsite/2014.05.23.f3b17954-9022-4986-9dfb-77f7ed8ed2ad\7d9fbb75-ed89-41f7-a7a7-eb9990a0589d.png" alt="RESTful API" title=""></p><h2>一、协议</h2><p>API与用户的通信协议，总是使用<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank">HTTPs协议</a>。</p><h2>二、域名</h2><p>应该尽量将API部署在专用域名之下。</p><blockquote><pre class=" language-javascript"><code class=" language-javascript">
https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com
</code></pre></blockquote><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><blockquote><pre class=" language-javascript"><code class=" language-javascript">
https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>org<span class="token regex">/api/</span>
</code></pre></blockquote><h2>三、版本（Versioning）</h2><p>应该将API的版本号放入URL。</p><blockquote><pre class=" language-javascript"><code class=" language-javascript">
https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token regex">/v1/</span>
</code></pre></blockquote><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。</p><h2>四、路径（Endpoint）</h2><p>路径又称"终点"（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的"集合"（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><blockquote>
  <ul>
<li>https://api.example.com/v1/zoos</li>
<li>https://api.example.com/v1/animals</li>
<li>https://api.example.com/v1/employees</li>
</ul>
</blockquote><h2>五、HTTP动词</h2><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><blockquote>
  <ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
</ul>
</blockquote><p>还有两个不常用的HTTP动词。</p><blockquote>
  <ul>
<li>HEAD：获取资源的元数据。</li>
<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li>
</ul>
</blockquote><p>下面是一些例子。</p><blockquote>
  <ul>
<li>GET /zoos：列出所有动物园</li>
<li>POST /zoos：新建一个动物园</li>
<li>GET /zoos/ID：获取某个指定动物园的信息</li>
<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>
<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>
<li>DELETE /zoos/ID：删除某个动物园</li>
<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>
<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>
</ul>
</blockquote><h2>六、过滤信息（Filtering）</h2><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><blockquote>
  <ul>
<li>?limit=10：指定返回记录的数量</li>
<li>?offset=10：指定返回记录的开始位置。</li>
<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>
<li>?animal<em>type</em>id=1：指定筛选条件</li>
</ul>
</blockquote><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h2>七、状态码（Status Codes）</h2><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><blockquote>
  <ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。。</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>
</ul>
</blockquote><p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank">这里</a>。</p><h2>八、返回结果</h2><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><blockquote>
  <ul>
<li>GET /collection：返回资源对象的列表（数组）</li>
<li>GET /collection/resource：返回单个资源对象</li>
<li>POST /collection：返回新生成的资源对象</li>
<li>PUT /collection/resource：返回完整的资源对象</li>
<li>PATCH /collection/resource：返回完整的资源对象</li>
<li>DELETE /collection/resource：返回一个空文档</li>
</ul>
</blockquote><h2>九、Hypermedia API</h2><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><blockquote><pre class=" language-javascript"><code class=" language-javascript">
<span class="token punctuation">{</span><span class="token string">"link"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string">"rel"</span><span class="token punctuation">:</span>   <span class="token string">"collection <a class="token url-link" href="https://www.example.com/zoos">https://www.example.com/zoos</a>"</span><span class="token punctuation">,</span>
  <span class="token string">"href"</span><span class="token punctuation">:</span>  <span class="token string">"<a class="token url-link" href="https://api.example.com/zoos">https://api.example.com/zoos</a>"</span><span class="token punctuation">,</span>
  <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"List of zoos"</span><span class="token punctuation">,</span>
  <span class="token string">"type"</span><span class="token punctuation">:</span>  <span class="token string">"application/vnd.yourformat+json"</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre></blockquote><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS" target="_blank">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/" target="_blank">api.github.com</a>会得到一个所有可用API的网址列表。</p><blockquote><pre class=" language-javascript"><code class=" language-javascript">
<span class="token punctuation">{</span>
  <span class="token string">"current_user_url"</span><span class="token punctuation">:</span> <span class="token string">"<a class="token url-link" href="https://api.github.com/user">https://api.github.com/user</a>"</span><span class="token punctuation">,</span>
  <span class="token string">"authorizations_url"</span><span class="token punctuation">:</span> <span class="token string">"<a class="token url-link" href="https://api.github.com/authorizations">https://api.github.com/authorizations</a>"</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
</code></pre></blockquote><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user" target="_blank">api.github.com/user</a>，然后就得到了下面结果。</p><blockquote><pre class=" language-javascript"><code class=" language-javascript">
<span class="token punctuation">{</span>
  <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Requires authentication"</span><span class="token punctuation">,</span>
  <span class="token string">"documentation_url"</span><span class="token punctuation">:</span> <span class="token string">"<a class="token url-link" href="https://developer.github.com/v3">https://developer.github.com/v3</a>"</span>
<span class="token punctuation">}</span>
</code></pre></blockquote><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h2>十、其他</h2><p>（1）API的身份认证应该使用<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank">OAuth 2.0</a>框架。</p><p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p><p>（完）</p><!-- /div --></div></div>]]></description><link>http://zackyang.com/post/restful-api-design-guidelines</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 23 May 2014 05:41:16 GMT</pubDate></item><item><title><![CDATA[基于AngularJS的企业软件前端架构]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			这篇是我参加QCon北京2014的演讲内容：</p>
		<h2>
			<strong>提纲：</strong></h2>
		<p>
			企业应用在软件行业中占有很大的比重，而这类软件多数现在也都采用B/S的模式开发，在这个日新月异的时代，它们的前端开发技术找到了什么改进点呢？</p>
		<p>
			B/S企业软件前端开发模式大体上与桌面软件类似，都是偏重量级的，在前端可能会有较多的业务逻辑，这些业务逻辑如何被合理模块化，与界面分离，以便测试，成为这个领域的一个重要挑战。另一方面，由于企业应用的界面相对规整，偏重的是数据存取，没有太多花哨的东西，所以常见的界面控件也是可枚举的，如何让开发界面的工作能更快完成，甚至由不擅长编写代码的业务设计人员来做，与界面原型的工作合二为一，能提高不少开发效率。</p>
		<p>
			在AngularJS等MV*框架出现之后，给这个领域带来一些契机，架构师们能够有机会去重新规划前端的架构，甚至是开发流程，从而让整个软件的生产更为高效。</p>
		<p>
			本文将探讨它给这个领域带来的变化。</p>
		<h2>
			<strong>正文：</strong></h2>
		<h3>
			<strong>企业应用前端的特点</strong></h3>
		<p>
			企业应用系统是一种很常见的软件系统，这类系统的特点是面向某个行业，功能较复杂，对界面的要求一般是整齐，不追求花哨。这类系统通常有C/S和B/S两个流派，其中的B/S方式因为部署和集成的便利，使用得较为普遍。</p>
		<p>
			同样是在浏览器中做东西，写企业应用和网站的差别也很明显。企业应用的业务逻辑较重，前端有一定的厚重性，但是对效果并不追求很多，主要是各类控件的使用，表单的存取值等等。</p>
		<p>
			企业应用产品的一些特点如下：</p>
		<ul>
			<li>
				独占模式&mdash;&mdash;一般用户使用互联网产品，都是片段时间使用，比如购物或者阅读，做完之后就刷新或者关闭浏览器了，而企业应用往往是工作的全部，从早上上班开始打开，到下班才关掉，一天绝大部分工作都在上面完成，比如一个呼叫中心的操作员。</li>
			<li>
				重业务，轻视觉&mdash;&mdash;企业应用对视觉的追求是比较低的，一般不会要求花哨效果，以业务操作的流畅性为第一目标。</li>
			<li>
				界面规整，单一模式&mdash;&mdash;企业应用的界面布局相对有模式可循，可以用很少的场景来穷举，界面横平竖直，比较规整，使用到的控件元素也是可穷举的，基本没有什么特效。</li>
			<li>
				键盘操作&mdash;&mdash;由于企业应用的用户都相对比较专业，在上岗之前需要经过统一培训，而且每个用户使用的频度较高，很多时候他们会用尽量快捷的方式来做操作，比如键盘，这一点在互联网产品中比较少见。所以，有时候大家为了追求好看，把系统原生的select用div来替换，在这种情况下反而增加了用户的麻烦。</li>
			<li>
				逻辑复杂&mdash;&mdash;我之前所在的行业中，业务逻辑很复杂，前端可能会需要写很多复杂的逻辑，JS代码大部分是在处理逻辑，而不是界面交互。</li>
			<li>
				加载速度的侧重不同&mdash;&mdash;互联网产品往往很重视首屏优化，但是其策略可能与企业应用不同。比如说，3个200k的模块，在网站型产品中可能优化成一个100k加三个150k的模块，但在企业应用中，很可能优化成一个400k加三个50k的模块。为什么会这样呢？因为内容型的网站讲究的优化策略是分摊，如果首次加载太慢，会很影响用户的信心，但企业应用用户的容忍度是较高的，他并不在乎刚打开的时候慢一些，因为打开了之后就要用一天，对于之后每步操作的模块加载速度倒是要求很高。另外，对于内存泄露的处理，也要求得比较高一些。整个这些策略，其实是来源于C/S系统的影响。</li>
			<li>
				浏览器版本相对宽松&mdash;&mdash;很多时候提到企业应用，大家的想法就是低端，IE6，但其实这个的原因是客户只购买软件，运维一般自己做，每年不会有很多持续的投入来改进，所以导致很多老系统不能持续升级。软件厂商其实反倒可以用更激进的策略去升级浏览器，用户对这个的接受度还是比较高的，使用系统的群体也是比互联网用户小很多的，抛弃老旧浏览器的事情也确实可以干，比如我就见过几年前某电信营业系统预装的都是Firefox。</li>
		</ul>
		<h3>
			<strong>企业应用常见的前端框架</strong></h3>
		<p>
			在开发B/S企业应用前端的人群中，有很大一部分群体选择了服务端的组件化方式，比如JSF之类，它的弊端是与异构服务端的第三方系统集成比较麻烦。也有不少人使用Bindows和ExtJS这样的框架，最近的KendoUI也是个不错的选择。</p>
		<p>
			每种类型选一个有代表性的来说说：</p>
		<ul>
			<li>
				HTC 在浏览器端扩展标签&mdash;&mdash;早期有些团队采用的方式，一般会跟XMLHTTP等结合使用，易于使用，界面代码整洁，但已被主流浏览器抛弃。</li>
			<li>
				JSF等 在服务端生成界面&mdash;&mdash;以后端为主的架构师最推崇的方式，受Struts的MVC模型影响很深，弱化了前端，使得前端蜕化为后端的一种附属。</li>
			<li>
				GWT 编译阶段生成界面&mdash;&mdash;写其他语言来生成HTML和JS，一般会依赖于一种前端UI库。这种方式也比较受后端架构师喜欢，因为他们觉得写JS很头疼，宁可写Java。</li>
			<li>
				ExtJS 用JS封装界面组件，干脆就不要HTML了&mdash;&mdash;这是另外一种极端，从Bindows开始，使用纯逻辑代码来描述界面，走着跟Java Swing一样的道路，也有不少人喜欢。但这种方式在没有好用的界面设计器的情况下非常痛苦。</li>
			<li>
				Flex等 脱离HTML体系，另辟蹊径&mdash;&mdash;这条路其实是对Java Applet的一种延续，好处是可以不受HTML体系的制约，独立发展，所以其实这些体系在企业应用领域的成熟度远超HTML体系。</li>
		</ul>
		<h3>
			<strong>曾经的企业B/S应用几件宝</strong></h3>
		<p>
			有一段时间，我们几乎只有IE6，所以那个时候的前端开发人员很快乐，没有兼容的压力。那时候，我们如何构建前端应用呢？参见这里的<a href="http://weibo.com/1858846672/B1fL3vuYN?mod=weibotime" target="_blank">分享</a>。</p>
		<ul>
			<li>
				HTC&mdash;&mdash;这是最好用的声明控件的方式。</li>
			<li>
				XMLHTTP&mdash;&mdash;尽管还没有AJAX的概念，但我们已经可以用它做前后端分离的传输机制了。</li>
			<li>
				VML&mdash;&mdash;在IE里面画矢量图，不使用插件，有其他选择吗？</li>
			<li>
				XSLT&mdash;&mdash;把XML数据转换成HTML，跟现在的前端模板像吗？</li>
			<li>
				popup&mdash;&mdash;创建右键菜单最好的方式。</li>
		</ul>
		<p>
			具体实例请参考<a href="http://xufei.github.io/assets/iom.swf">用这些技术构建的一个典型企业应用</a>。</p>
		<h3>
			<strong>单页应用和前端分层</strong></h3>
		<p>
			当时这些系统的构建方式也可以算单页应用，我们用iframe来集成菜单，每个菜单有自己独立的功能，整个主界面是始终不会刷新的。</p>
		<p>
			时光飞逝，这些年，前端有了什么本质的改变，产生了翻天覆地的变化吗？有时候我们回顾一下，却发现多数都是在增加完善一些细节，真正有颠覆性的有比如以RequireJS和SeaJS为代表的模块定义和加载库，npm这样的包管理器，grunt，gulp，百度fis这样的集成开发模式。为什么它们算是本质改进呢？因为这些标志着前端开发从粗放的模式，逐渐变化到精确控制的形态。比如我们再也不能不管代码的依赖关系，也不能一打开界面就不分青红皂白把所有可能要用到的代码都立刻加载过来，那个时代已经过去了，从任何角度讲，现代的前端开发都在精细化，从代码的可控，到界面体验的精细优化，到整个团队甚至公司甚至互联网上的组件共享，以及前端团队协作流程的改进，这已经是一个很成规模的产业了。</p>
		<p>
			我们把眼光放到2013年，在这一年里最火的前端技术莫过于NodeJS和AngularJS，前者给我们带来的是一种开发方式的改变，后者是一种典型的前端分层方案。Angular是前端MV*框架的一个流派，用过的人都会觉得很爽。它爽在什么地方呢？因为它帮我们做的事情太多了，一个双向绑定，无所不包，凡是存取值相关的操作，基本都不用自己写代码。在企业应用前端功能里，表单的存取值和校验占据了很大的比例，这些事都不用干了，那简直太好了。如果就因为这个用Angular，那还有些早。有一些第三方代码被称为库，另外一些称为框架，Angular是框架而不是库。框架的含义是，有更强的约束性，并非作为辅助功能来提供的。</p>
		<p>
			先看一下企业应用的通常形态吧，会有一个可配置的菜单，然后多半会采用MDI的形式，能打开多个业务功能，用选项卡的形式展示起来，可以随时切换操作。每个人每天常用的功能是可以穷举的，他进入系统之后，一般要用到下班才关掉。所以这种系统非常适合做成单页应用，开始的时候加载一个总体框架，每点击一个菜单，就加载这个菜单对应的功能模块，放在一个新的选项卡或者别的什么地方展示出来。</p>
		<p>
			在早期做这种系统的时候，一般都会用iframe来集成菜单，这种方式很方便，但是每个菜单页都要载入共同的框架文件，初始化一个环境，数据之间也不能精确共用。所以现在我们做企业信息系统，不再适合用iframe来集成菜单，所有菜单的业务代码，会在同一个页面的作用域中共存。这在某些方面是便利，比如数据的共享，一个选择全国城市的下拉框，在多个功能中都存在，意味着这些城市的数据我们可以只加载一次。但从另外一个角度来说，也是一种挑战，因为数据之间产生干扰的可能性大大增加了。</p>
		<p>
			我们回顾一下在传统的客户端开发中是怎么做的，早在经典的《设计模式》一书中，就提到了MVC模式，这是一种典型的分层模式。长期以来，在Web开发人员心中的MVC，指的都是Struts框架的那张图，但我们单页应用中的MVC，其实更接近最原始的《设计模式》书中概念。所以我们要在前端分层，而不仅仅把整个前端都推到视图层。</p>
		<p>
			做单页应用，前端不分层是很难办的，当规模扩大的时候，很难处理其中一些隐患。分层更重要的好处是能够从全盘考虑一些东西，比如说数据的共享。跨模块的数据共享是一个比较复杂的话题，搞得不好就会导致不一致的情况，如果考虑到在分层的情况下，把各种数据来源都统一维护，就好办多了。</p>
		<p>
			所以，以AngularJS为代表的前端MV*框架最重要的工作就是做了这些对于分层的指导和约束性工作，在此基础上，我们可以进一步优化单页应用这类产品。</p>
		<h3>
			<strong>前端的自定义标签体系</strong></h3>
		<p>
			构建一个大型企业应用，最重要的是建立整套组件体系。一般针对某行业的软件，长期下来都会有很多固定的模式，可以提炼成组件和规则，从前端来看，体现为控件库和前端逻辑。控件库这个是老生常谈，在很多框架里都有这个概念，但各自对应的机制是不同的。</p>
		<p>
			从写一个界面的角度来讲，最为便利的方式是基于标签的声明式代码，比如我们常见的HTML，还有微软的XAML，Flex中的MXML等，都很直接，设想一下在没有可视化IDE的情况用类似Java Swing和微软WinForm这样的方式编写界面，毫无疑问写XML的方式更易被接受。所以，我们可以得出初步的结论，界面的部分应该写标签。</p>
		<p>
			很遗憾，HTML自带的标签是不足的，它有基本表单输入控件，但是缺乏DataGrid，Tree之类更富有表现性的控件。所以绝大多数界面库，都采用某种使用JavaScript的方式来编写这类控件，比如：</p>
		<pre>
&lt;div id=&quot;tabs&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#tabs-1&quot;&gt;Nunc tincidunt&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#tabs-2&quot;&gt;Proin dolor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#tabs-3&quot;&gt;Aenean lacinia&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div id=&quot;tabs-1&quot;&gt;
  &lt;/div&gt;
  &lt;div id=&quot;tabs-2&quot;&gt;
  &lt;/div&gt;
  &lt;div id=&quot;tabs-3&quot;&gt;
  &lt;/div&gt;
&lt;/div&gt;
$(function() {
    $( &quot;#tabs&quot; ).tabs();
});
</pre>
		<p>
			如果这样，这些复杂控件就都要通过JavaScript来创建和渲染了，这与我们刚才提到的原则是违背的。那我们寻找的是什么呢，是一种能扩展已有HTML体系的东西。在早期，IE浏览器中有HTC，可以通过引入命名空间来声明组件，现在的标准浏览器中又引入了Web Components，在Polymer这个框架中可以看到更多的细节。说到底，这类方式要做些什么事情呢？</p>
		<ul>
			<li>
				隔离组件的实现，让使用变得简单</li>
			<li>
				支持自行扩展新的组件</li>
			<li>
				作一些作用域上的隔离，比如Web Components里面，style标签上可以加作用域，表示这个样式只生效于组件内部</li>
		</ul>
		<p>
			从另外一个角度讲，为什么我们非要这么做不可？最大好处来自哪里？对于大型项目而言，管理成本和变更成本都是需要认真考虑的。如果一个组件，需要在DOM中声明一个节点， 然后再用一个js去获取DOM，把DOM渲染出来，再填充数据的话，这个过程的管理成本是很大的，因为HTML和JS这两个部分丢了一个都会有问题，无论在什么时候，维护一个文件总是比维护多个文件要强的，我们看HTC那种方式，为什么它的使用成本很低，因为它可以把控件自身的DOM、逻辑、样式全部写在自己内部，整个一个文件被人引用就可以了。在现在这个阶段不存在这么好用的技术了，只能退而求其次。</p>
		<p>
			所以，在这个点上，Angular带来的好处是可扩展的标签体系，这也就是标签的语义化。Angular的主打功能之一是指令，使用这种方式，可以很容易扩展标签或者属性。比如，业务开发人员可以直接写：</p>
		<pre>
&lt;panel&gt;
     &lt;tree data=&quot;{{data}}&quot;&gt;&lt;/tree&gt;
&lt;/panel&gt;
</pre>
		<p>
			这样多么直观，而且可以跟原有的HTML代码一起编写，不造成任何负担。语义化的标签是快速编写界面的不二法门。</p>
		<h3>
			<strong>业务逻辑</strong></h3>
		<p>
			有了语义化标签之后，如果我们只写界面不写逻辑，那也够了，但现实往往没有这么美好，我们还要来考虑一下业务逻辑怎么办。</p>
		<p>
			企业应用一般都是面向某行业的，在这个行业内部，会有一些约定俗成的业务模型和流程，这些东西如何复用，一直是一个难题。以往的做法，会把这些东西都放在服务端，用类似Java这样的语言来实现业务元素、业务规则和业务流程的管理。这种做法所带来的一个缺点就是对界面层的忽视，因为他只把界面层当作展示，对其中可能出现的大量JavaScript逻辑感到无所适从。很多从事这一领域的架构师不认同界面层的厚度，他们认为这一层只应当是很薄的，纯展示相关的，但在这个时代，已经不存在真正轻量级的界面了。</p>
		<p>
			前面提到，我们在前端作分层，把展现层跟业务逻辑层完全隔离，带来的好处就是逻辑层不存在对DOM的操作，只有纯粹的逻辑和远程调用，这么一来，这一层的东西都可以很容易做测试。对于一个大型产品来说，持续集成是很有必要的，自动化测试是持续集成中不可缺少的一环。如果不做分层，这个测试可能就比较难做，现在我们能把容易的先做掉，而且纯逻辑的代码，还可以用更快的方式来测试。</p>
		<p>
			之前我们做前端的单元测试，都需要把代码加载到浏览器来执行，或者自行封装一些&ldquo;无头浏览器&rdquo;，也就是不打开实际的展示，模拟这个测试过程。这个过程相对来说还是有些慢，因为它还有加载的这个网络传输的过程，如果我们能在服务端做这个事情呢？我们看到，最近很火的NodeJS，它从很多方面给了前端工程师一个机会，去更多地把控整个开发流程，在我们这个场景下，如果能把针对前端逻辑的单元测试都放在node里做，那效率就会更高。</p>
		<h3>
			<strong>二次开发平台</strong></h3>
		<p>
			我们来看看，有了这么一套分层机制，又有了界面标签库之后，该做些什么呢？做企业软件的公司，有不少会做二次开发平台，这个平台的目标是整合一些已有的行业组件，让业务开发人员甚至是不懂技术的业务人员通过简单的拖拉、配置的形式，组合生成新的业务功能。</p>
		<p>
			从界面的角度看，拖拽生成很容易，很多界面原型工具都可以做，但要如何整合数据和业务？因为你要生成的这个功能，是实实在在要拿去用，不是有个样子看就可以，所以要能跟真实数据结合起来。 但这事情谈何容易！就比如说，界面上有一个选择所属行业的下拉框，里面数据是配置出来的，对这个数据的查询操作在后端，作为一个查询服务或者是业务对象管理起来，有些传统的方式可能是在后端作这个关联，Angular框架可以把这个事情推到前端来。相比Backbone这样的框架来说，Angular由于有双向绑定，这个过程会变得特别省事。一个界面片段想要和数据关联起来，要做的事情就是各种属性的设置，所以动态加载和动态绑定都会比较容易。</p>
		<p>
			比如：</p>
		<p>
			partial.html</p>
		<pre>
&lt;ul&gt;
     &lt;li ng-repeat=&quot;item in items&quot;&gt;{{item.name}}&lt;/li&gt;
&lt;/ul&gt;
</pre>
		<p>
			main.html</p>
		<pre>
...
&lt;div ng-include=&quot;&#39;partial.html&#39;&quot; ng-controller=&quot;CtrlA&quot;&gt;&lt;/div&gt;
...
</pre>
		<p>
			a.js</p>
		<pre>
function CtrlA($scope) {
    $scope.items = [{name:&quot;Tom&quot;}, {name:&quot;Jerry&quot;}];
}
</pre>
		<p>
			b.js</p>
		<pre>
function CtrlB($scope) {
    $scope.items = [{name:&quot;Donald&quot;}, {name:&quot;Micky&quot;}];
}
</pre>
		<p>
			在上面的例子里，这个列表显示什么，完全取决于ng-controller=&quot;CtrlA&quot;这句，如果我们把这句搞成配置的，就很容易把数据源换成另外一个CtrlB，甚至说，即使在同一版本上做项目化，引入另外一个包含CtrlA其他版本的js文件，也基本无需更改其他代码，这就达到了二次开发的一个目的：尽可能以配置而不是编码去新增、维护新功能。</p>
		<h3>
			<strong>移动开发</strong></h3>
		<p>
			现在的企业软件已经不能只考虑PC的浏览器了，很多客户都会有移动办公的需求。响应式设计是一种常见的解决方案，但是在企业应用领域，想要把复杂的业务功能设计成响应式界面的代价太大了，况且界面设计本身就是开发企业软件的这些公司的短板，所以我们的比较简单的办法是对PC和移动终端单独设计界面，这样就有了一个问题了，这两种界面的业务逻辑并没有差别，如果我们要维护两套代码，代价是非常大的，能有什么办法共用一些东西呢？</p>
		<p>
			如果不采用分层的形式，那这个很麻烦，我们注意到两种系统的差异只在UI层，如果我们用分层的模式，可以共用UI层以外的东西。具体到Angular里面来说，比如service，factory，甚至controller都是可以共用的，只有directive和HTML模板随设备产生差异就可以了。</p>
		<p>
			之前我们很少看到有基于Angular的移动端开发框架，但现在有了，比如Ionic，使用这样的框架，可以直接引用已有的业务逻辑代码，只在展示上作一些调整。这么做有很多好处，同时也对代码的架构水准有一定要求，需要把业务逻辑跟界面展示完全切割开。</p>
		<p>
			这样带来的好处也是很明显的，独立的业务逻辑，因为它不依赖于界面了，所以很容易控制，做单元测试，集成测试，打桩等等，总之它是纯逻辑的东西，在后端可以用什么方式保证代码质量，在前端的业务逻辑也一样可以用，业务逻辑可以因此而清晰稳定。对于企业应用而言，这么做可以极大程度地复用以往的业务逻辑，只在负责最终展示的代码部分作差异化。</p>
		<h3>
			<strong>工程化</strong></h3>
		<p>
			上面这些技术性的问题都解决了，剩下的都是规模带来的边际效应，这需要我们从工程化角度去考虑很多问题：</p>
		<ul>
			<li>
				某个JS模块被修改，如何得知会影响谁？</li>
			<li>
				某个界面片段被调整，会影响什么界面？</li>
			<li>
				如何最小化发布？</li>
			<li>
				如何一键测试、打包、压缩？</li>
		</ul>
		<p>
			这些话题，篇幅所限，不在本文中叙述，可以查看我另外的关于Web应用组件化的文章。</p>
		<!-- overlay --><!-- reply box --><!-- edit comment box --><!-- notification popup --></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/enterprise-software-front-end-based-on-angularjs-structure</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 23 May 2014 05:19:23 GMT</pubDate></item><item><title><![CDATA[悉心营造良好的技术文化]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-12452">
		<p>
			<strong>文&nbsp;/ 张克军</strong></p>
		<div class="entry fix">
			<p>
				众所周知，良好的技术文化不仅有助于人才成长和提升团队内聚力，更是吸引和留住优秀人才的一大法宝。然而，该如何营造良好的技术文化呢？且听本期三位嘉宾的经验分享。本文是专题《怎样营造良好的技术文化》中的第一篇。第二篇是作者许晓斌带来的《分享促进技术文化建设》，第三篇是天猫产品技术部资深经理庄卓然分享的《<a href="http://www.programmer.com.cn/12518/" target="_blank">技术文化建设实践</a>》。</p>
			<p>
				<strong>工程师的荣誉感</strong></p>
			<p>
				存在主义认为，文化是对一群人存在方式的描述。一个技术团队能长期存在下去，一定会产生某种技术文化。也就是说，技术文化会自然产生，受人的因素影响而变化。随着团队规模的变化，团队的技术文化可能变好或变坏，可以通过以下一些表象来衡量。</p>
			<ul>
				<li>
					技术上的活跃度。</li>
				<li>
					高质人才的密度。</li>
				<li>
					工程师的满意度和荣誉感。</li>
			</ul>
			<p>
				良好的技术文化能给工程师某种荣誉感，自然满意度也不会低。这种荣誉感里带有某种优越感，比如会觉得其他公司的技术很&ldquo;土&rdquo;，理念落后、工具落后等。一种技术文化中会包含某种共同的规范、意识、价值观和做事原则等，新加入的人如果认同，便会因受其影响而很好地融入到团队中。</p>
			<p>
				<strong>&ldquo;净化空气&rdquo;很重要</strong></p>
			<p>
				技术文化好比空气，营造良好的技术文化就是改善空气质量。降低&ldquo;污染物&rdquo;排放是第一要务。而哪些是&ldquo;污染物&rdquo;呢？</p>
			<ul>
				<li>
					过重的管理行为。管理的目的是保证产品开发按计划有序进行，而过重的管理行为会适得其反。</li>
				<li>
					不当的开发流程。这是一个槽点，草率进入开发环节，会致使开发进程不是一种有序的迭代，经常由于随意变更需求而做无用功。</li>
				<li>
					急功近利的心态。为了攒业绩，不管质量、不愿意同他人协作，或单纯追求本部门业绩，不为合作方考虑。</li>
			</ul>
			<p>
				不适合团队的人。不适合团队的人不一定是能力不行，主要是价值观跟团队技术文化中的价值观相悖。这些人的负面作用远大于他们的贡献，应该果断淘汰掉。</p>
			<p>
				<strong>提升团队内聚力</strong></p>
			<p>
				对于快速发展中的团队，注重团队技术文化塑造是团队进一步发展的基础。它的基因往往是最初的几个人或十几个人决定的。这方面跟企业文化的形成没什么不同。但如果在初期没有将其中的精华提炼出来，那么随着团队新人增多，技术文化会很快被稀释，而且人越多越难向好的方面导向。在<span>Facebook</span><span>创业初期，创始人</span><span>Mark</span><span>确定了几条很精练的工程师的行为准则，并贴在墙上。这些准则体现出了技术上务实、践行的风格，它吸引了一些同样有如此风格的优秀工程师。整个技术团队的内聚自然越来越强。</span></p>
			<p>
				对于快速发展中的团队，注重团队技术文化塑造是团队进一步发展的基础。营造良好的技术文化，需要在以下几方面努力。</p>
			<ul>
				<li>
					树立行为准则。它虽然没有强制性，但在各环节之间协作、各角色之间协作中出现分歧时，它是很好的参照物。因此它要有这样的效力，而不只是写在纸上的标语。</li>
				<li>
					注重技术积累。技术积累是技术文化的底蕴。认真对待每一次项目实践，不以解决问题为目的，而是在解决问题的同时，将经验记录和积累下来。</li>
				<li>
					奖励贡献，包容错误。激励制度是不可或缺的。工程师对团队的贡献要有荣誉和物质上的双重奖励，激励才能有效。包容错误，才不会让工程师顾虑重重，因为只有突破陈规、大胆尝试，才能有所收获。</li>
				<li>
					人人都要有工程技术思维。良好的技术文化的形成不只是技术团队内部的事情，它也受企业风气影响。不合理的开发流程、不适当的行政制度等，都会让所有试图改善技术文化的努力付之东流。</li>
			</ul>
			<p>
				营造良好的技术文化，就好比孩子性格的养成和心智的发展，它将决定这个孩子未来的命运。</p>
			<p>
				<strong><span>作者 张克军，豆瓣前端团队负责人。</span></strong></p>
			<p>
				<a href="http://www.programmer.com.cn/11512/" target="_blank"><strong>本文选自《程序员》杂志2012年05期，未经允许不得转载。如需转载请联系 market@csdn.net</strong></a></p>
			<p>
				<strong><a href="http://dingyue.programmer.com.cn/" target="_blank">《程序员》2012年杂志订阅送好礼活动火热进行中</a></strong></p>
		</div>
		<!--/entry -->
		<div>
			<a class="tmblog" href="javascript:void(0)" onclick="postToWb();return false;"><img alt="转播到腾讯微博" border="0" src="/upload/offsite/2014.05.16.5ee823e2-530d-4ddc-8e0c-cb21d189f0a2\819fd58c-109f-42be-a3c3-519c44d53359.png" /></a></div>
		<style type="text/css">
		</style>
		<!-- You can start editing here. --><a href="http://www.programmer.com.cn/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E3%80%8B%E6%9D%82%E5%BF%97%E8%AF%BB%E8%80%85%E4%BF%B1%E4%B9%90%E9%83%A8/"><span>-----&gt;立刻申请加入《程序员》杂志读者俱乐部，与杂志编辑直接交流，参与选题，优先投稿</span></a></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/carefully-create-a-good-technical-culture</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 16 May 2014 05:57:59 GMT</pubDate></item><item><title><![CDATA[编程是一个没有前途的工作]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="content">
		<p>
			你热爱编程吗？不要指望成为CEO，除非你自己开公司&mdash;&mdash;即使如此，但领导的工作很可能会导致你不能再写任何代码。</p>
		<p>
			对于大多数工作，如果你继续写代码，你获得升职的机会可能很有限。通常你都是由初级到高级再到主程序员或首席软件工程师这样一个层级发展的。有可能你会升职到架构师的角色，但在许多地方架构师都不再写代码了。</p>
		<p>
			如果你想转到管理层，那么你的空间是有限的。我们母公司的前CEO是做了25年的程序员后才转到管理层的；15年来，他使出全身本领来当一个市值40亿美元公司的CEO。10年后，也就是最近他坐拥豪宅和汽车，没有后顾之忧的退休了。与此同时，差不多与他（我们的老CEO）同一时间开始编程的同事，现在还依然只是高级软件工程师而已。</p>
		<p>
			这是不是有点不公平？我不知道，如果你热爱编程、拿着体面的工资且热爱你的工作，那么你真的需要这样一个恒久不变的升职之路吗？不是每个人都能或都想开公司（在我早期的职业生涯中，我开过两次公司）。有时候感觉这并不公平，因为就算你编程再牛你也不可能拿到一般执行官能拿到的工资。除非有很好的机会，不然你甚至可能都没有机会来决定做什么样的事或该怎样做事。或者你可以作出适当的让步，成为一个管理人员。</p>
		<p>
			我现在的经理在5年前担任我们的移动团队的经理前，是一名写了15年程序的老程序员。自团队建立取得成功后，他会偶尔修复下BUG或作一些细微的改动，因为除了他，其他所有人都很忙（因为他已经不再声称自己是一名程序员了）。他最终还是得到了升迁，在另外一个州的品牌公司担任副总裁级别的职务，这将有着更多的责任的和可见性，当然也有更高的薪水。我们的部门将改为只做营销品牌，因此我们的移动项目组将很快成为历史尘埃。我们剩下的人将可能会做同样的工作，拿着同样的薪水。这是野兽的本性。</p>
		<p>
			我想，作为一名程序员你可能会走运，任职于一家肯花大价钱的创业公司，但实际上这非常罕见。在90年代中期，有一家公司上市之后我立刻就与它签订了合同。我的邻居曾任职于很多创业公司，但都失败了。后来他做一些零散的编程工作，因为他仍热爱编程，但不需要钱或想做更多的事。这更可能是你拿着正常的工资但可能只能极少的奖金。我想任职于Google或一些大型公司的程序员比一般程序员能拿到更高的工资，但与执行官或管理者比起来还是很少的。</p>
		<p>
			一般的程序员，即使他们非常有才华，但还是可能会很长一段时间内拿着与常人一样的工资。许多公司可能认为所有的程序员都是一样的，都是可随意替代的，如果他们很厉害的话早就应该到管理层的位置上去了。</p>
		<p>
			在我的第一个创业公司，我作为主程序员，但还是会处理诸如新闻，投资，雇用，福利，市场等这些问题。这吞噬了我的大部分光阴。第二个是一个很吸引人的产品开发，所以编程以外的事情就少了许多，但还是很完整的。从那以后，我发誓以后还要再做这样的事！</p>
		<p>
			我的妹妹是以程序员身份进去现在的公司的，但6个月后，她被调离到管理部门，现在她已经成为水平相当高的副总裁。我的观点还是一样，如果你不放弃编程，那么你发展空间还是有限的。</p>
		<p>
			如果你像我一样热爱编程，你不能不意识到，在你的职业生涯中你的发展空间很小。也许这是愚蠢的，但是可以选择做你喜欢的事或付出很大的代价来做其它的事。对于有些人，自己开公司是不错的选择。对于其它人来说，将你的职业生涯转换一个轨道和放弃编程是一个不错的选择。对于我来说，编程是我想做的事，但我必须成为现实主义者。</p>
		<p>
			我曾在夏威夷工作（一个咨询公司）。和我共事的人说他们的待遇要比同岗位的(其它地区)低，但他们认为这是因为在夏威夷工作本身就是一个福利！</p>
		<p>
			无论你做什么，你必须要在热爱的工作和有足够薪水来过自己想要生活的工作，或家庭需要的工作之间做一个选择。有时候这很难让人选择！</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/programming-is-a-deadend-job</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 16 May 2014 05:36:41 GMT</pubDate></item><item><title><![CDATA[一位美女PM亲述：如何不被程序员嫌弃]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			最近有位刚做PM（产品经理）的小伙跑来跟我控诉，说公司技术部的RD们（程序员）个个不给力。需求过了千百遍还是理解错，或者就是简单回一句&ldquo;做不了&rdquo;，表情如死灰。</p>
		<p>
			这位PM血气方刚，张牙舞抓，脑子里总有一千万个新产品需求的想法扑腾着。他咄咄不停的抱怨RD们不配合，能力差，懒惰，没思考能力，没品位，顺带连抠脚味儿太大这种事也强烈谴责了。&ldquo;擦，老子明天就去学编程！&rdquo; 哎，我发现PM们都特喜欢说这句无比励志的话呢！</p>
		<p>
			面对他，我的心突然惆怅起来。几年前的自己也差不多是这个模样，懵懂如白纸，但谁又知道这样的PM，在很多RD的眼里就是个傻逼吧。身为一位女性PM，我至今为止并肩合作过的RD团队超过8组共200多人（动荡曲折的职业生涯啊），受过的委屈流过的泪就不在这里赘述了，打算留着以后写小说。今天我只想浅谈一些自己总结的PM与RD相处之道，所谓人艰不拆，希望大家看完后能更理解彼此&ldquo;都不容易&rdquo;的立场。</p>
		<p>
			<strong>PM眼里的RD分成两种：能沟通的，和不能沟通的。后者占90％。</strong></p>
		<p>
			如果你跟我一样，是个没有技术背景的PM，估计你会觉得世界上 &ldquo;不能沟通的RD&rdquo; 占九成以上。难道不是吗！</p>
		<p>
			每当你斗志昂扬讲完一个伟大的产品计划， 期待看到RD激动的眼神，却发现他们真的一点儿不兴奋。 给面子的RD会干巴巴的问：&ldquo;什么时候要 什么时候开始 设计稿确定了没 产品文档写完整了没。&rdquo; 不给面子的RD则会当场质疑你，&ldquo;这个新功能你到底想清楚了吗？ ！老板又风花雪月拍脑子了吧？！这么做有数据依据吗？！ 做过市场调研吗？！老用户会因此流失吗？！ 能保证上线后不再改了吗！？@$%^ ^%%$@% #$%^ ^% &rdquo; 真的是没法儿做朋友啊！</p>
		<p>
			曾经有一个自以为很牛掰但其实能力已经跟不上时代的RD总监，在kickoff会议上把我所有的需求都推翻了，让我差点在十几个老男人面前哭鼻子。<strong>话说人在经历苦难后，要么变乖，要么变坏</strong>。这种迫切想要搞定RD，让他们听命于我的心情，实在太强烈，于是我学会了通过非正规途径收买RD的心－－比如请他们吃KFC啦，陪他们聊黄色笑话啦，穿低胸装秀黑丝大腿啦。</p>
		<p>
			在这些努力之下，我和RD的关系改善很多，他们开始敞开心扉，解释他们对于新需求的负面情绪到底从何而来：有时是因为实在忙不过来，有时是因为实在无法理解这个功能有什么意义（至少他们自己肯定不会用），有时是因为PM不但不调解现有项目的优先级，反而还每天做梦，想些有的没的，让他们极为恼火。而负面情绪最大的根源，则是他们对这个项目失去了信心，觉得反复改版却一直没有大的突破，老板和PM都应该去吃shi。</p>
		<p>
			正当我沾沾自喜，认为自己靠美胸美腿赢得了这场战役时，一个Ruby程序员幽幽的跟我说 &ldquo;我好喜欢你的门牙。&rdquo; （鸦。。。你们果然是无法沟通的生物。。。）</p>
		<p>
			RD眼里的PM也分成两种：有脑子的，和没脑子的。后者占90％。（呵呵呵）</p>
		<p>
			<strong>没脑子的PM，RD们是打心底森森嫌弃你的。嫌弃你的理由可能有以下三点，欢迎对号入座，我们一起舔伤口：</strong></p>
		<p>
			<strong>嫌弃理由1：你没有自己的想法。</strong> 听清楚哦，我说的是RD们&ldquo; 认为&rdquo;你没有自己的想法。这个话题实在很辛酸， 哪个PM会没有自己的想法呢， 就是想法多的溢出了脑门儿才跑来当PM的啊魂淡！！ 但是PM的生存环境无比艰辛，很多决定都身不由己（ 尤其当你有一个心思活络的老板时）。</p>
		<p>
			于是， 有些PM选择推卸责任，两手一摊 &ldquo;老板说必须做&rdquo; ，急着撇清关系强调只有老板是傻逼哦我不是哦。此言一出， 你在RD心里的形象全毁。</p>
		<p>
			PM必须是产品的灵魂，无论老板决定闹哪样，你都要把这个决定翻译成大家能接受的理由，建立你自己的口碑和信任。在跟RD沟通的时候，不要说&ldquo;我和老板争论了很久他就是不听我的&rdquo;，这样更凸显你的无能；也不要撒谎说&ldquo;其实我觉得老板的想法挺好的&rdquo;然后硬掰些白痴的理由，这样显得你特别虚伪。</p>
		<p>
			比较好的应对方式是开诚布公，说你自己真实的想法，如果你觉得老板真是玩过火，也要解释下老板为何会有这样的执念（是被投资人逼的，还是被老婆逼的，还是看到竞争对手做的什么事情眼红了想抄袭），然后安慰体恤下RD们的辛苦，并表现出和他们同甘共苦的决心。</p>
		<p>
			<strong>嫌弃理由2：你风花雪月没有逻辑。</strong> 都说能做出牛逼产品的PM要感 性和理性兼备，因为牛逼的产品能直戳人性， 满足用户多层次的生理和情感需求，这就要求PM对生活细节敏感， 情感丰富。可是情感丰富的PM通常思维比较跳跃（ 艺术家嘛都这样），情绪波动幅度巨大， 郁闷时会在阳台发呆抽一下午的烟， 兴奋时连坐在马桶上都拿着手机写文档， 这样的节奏RD们真心吃不消。 他们觉得你丫的赶紧吃点儿脑残片吧！（插播吐槽： 我的上一篇文章发布后，就有人建议我服食脑残片！）因此， 论起PM的自我修养，你必须有收放自如的情感， 还得有理性的逻辑思维去支撑起每一次的灵感乍现。</p>
		<p>
			你可以问自己三个问题：一、这个功能是否服务于产品的主线业务，比如一个听歌的软件是否要有日间／夜间模式切换？如果只是锦上添花，使用场景不足整体的10％，那劝你还是等自己学会写代码以后在家做着玩吧；二、这个功能的技术实现成本有多大，如果用工时或天数来预计工作量不够直观，请去HR部门问一下RD全员每天的工资总额，再乘以所需要的开发时间，哈，这个金额应该足以让你好好思考&ldquo;需求性价比&rdquo;这件事了！（这招在创业公司尤为实用）三、这个功能的效果是否能被评估，这样至少你能检验自己的判断是否正确，无论如何都能积累宝贵的经验。</p>
		<p>
			嫌弃理由3：不信任RD的能力。 呵呵呵呵呵呵， 说起这个真是百感交集。 每一个有血有泪的日子里都在重复上演这样的剧集： PM问RD这个功能要做多久，RD说至少3周， PM于是去问自己做技术的好基友 &ldquo;真的需要3周吗？&rdquo;，基友拍桌子说 &ldquo;这有什么难的，换了我3天就搞定！&rdquo; 然后两人忿忿不平的拍案皱眉， 开始讨论公司里的RD们到底是能力差还是在偷懒。我曾经也这样， 因为不懂技术害怕被骗， 于是勾搭各种民间技术大牛让他们给我做狗头军师。 军师们为了维护自己伟岸的形象，通常会拍胸脯各种夸大各种装逼。 更糟糕的是， 军师们也变相破坏了我和RD之间原本就已经很稀薄的信任。（ 哦多么痛的领悟～～～）</p>
		<p>
			<strong>最后，RD眼里的RD，只有一种：比自己牛的人。</strong></p>
		<p>
			剩下那些能力不如自己的，他们的存在早已消失散尽在雾霾里了。</p>
		<p>
			<strong>让RD觉得你很优秀的方法&hellip;</strong></p>
		<p>
			1.眼观四路耳听八方，知识渊博，掌握行业内的各种动态，分析市场趋势，没事就盯着友盟的数据看，各种国外新推出的牛逼产品统统用起来。RD们会觉得你什么都知道，那你的判断八成是靠谱的。</p>
		<p>
			2.混对圈子，积攒几个牛逼人脉，难得和大人物有饭局的时候一定拍照发朋友圈，时不时去知乎回答些问题，去各种活动刷脸，撮合各种合作，尽一切可能把公司推到聚光灯下，这样也更容易招聘到优秀的程序员，产生良性循环。RD们大多不喜欢抛头露面，所以他们会觉得你的付出无可取代（不然他们老觉得PM每天看看文章聊聊天，简直是悠闲的废物）。</p>
		<p>
			3.无论是口述的需求还是撰写的文档，文字和原型图的呈现都要有逻辑，有条理，最好用写代码的思路来写产品文档，功能细节上的逻辑处理无一遗漏，实乃RD们的心头好。</p>
		<p>
			4.在老板责问为什么还没上线的时候，冲上前去说，&ldquo;都是我的错，前几天又改了个需求&rdquo;。</p>
		<p>
			5.在RD们被各种部门的需求同时袭击的时候，为他们安排最合理的优先级，并承诺担起一切后果（包括被某部门主管批斗责骂等）。</p>
		<p>
			6.招到漂亮的实习生妹子给RD们养眼。</p>
		<p>
			7.给他们加薪，给他们加薪，给他们加薪。</p>
		<p>
			文章的最后，我想对所有还在拼搏的产品经理们说，就算你的行业环境不断限制你的创新和畅想，就算你身边的程序员总是打压你的积极性，攻击你的决策和判断，就算你觉得全世界都没有人肯定你的努力，没有人理解你的无奈，你都不可以放弃。勿忘理想，勿忘初心。你们是美好未来的希望。</p>
		<p align="center">
			<a href="/upload/offsite/2014.05.16.602aca8a-332c-4cb8-9579-d05195890c55\7699abb2-06bd-4d2b-97ef-14a1933d7d39.jpg" target="_blank"><img alt="致血气方刚的产品经理：如何不被程序员嫌弃" src="/upload/offsite/2014.05.16.602aca8a-332c-4cb8-9579-d05195890c55\c7648286-3b13-4a94-a44f-f34ccf218d18.jpg" twffan="done" /></a></p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/a-beauty-pm-stated-how-not-to-be-a-programmer-mind</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 16 May 2014 05:35:59 GMT</pubDate></item><item><title><![CDATA[遇见程序员男友]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-79">
		<div class="pinbin-copy">
			<p>
				&ldquo;你爱我吗？&rdquo;<br />
				&ldquo;爱。&rdquo;<br />
				&ldquo;有多爱？&rdquo;<br />
				&ldquo;比爱1024还爱你。&rdquo;<br />
				听到这句话，我有过1024次拍死我的程序员男友的冲动，最终看在他脸上写满诚恳的样子的份上，还是只朝他撇了撇嘴。</p>
			<p>
				如你所看见的，我的男朋友是一名程序员，一名因为长期写代码而会让人产生连他的那张脸上也写满代码的错觉的程序员。<br />
				遇见他之前，我并不太明白程序员是什么东西，对于他自称的&ldquo;极客&rdquo;，更是一脸茫然。<br />
				&ldquo;极客？什么玩意，跟黑客一样破坏世界的吗？&rdquo;<br />
				&ldquo;其实那些你们认为的破坏分子不叫黑客，而叫骇客&hellip;&hellip;&rdquo;balabalabala，接下来他给我做了长达N分钟的解释说明。<br />
				&ldquo;好吧，不懂。那你有没有做过破坏世界的事啊？&rdquo;<br />
				&ldquo;我都说了黑客不是骇客而且我是极客&hellip;&hellip;如果有的话？侵入教务系统算不算？&rdquo;<br />
				&ldquo;你侵入教务系统修改了你的成绩？&rdquo;<br />
				&ldquo;没有，只是下载了几张女生照片而已啦&hellip;&hellip;&rdquo;<br />
				&ldquo;你&hellip;&hellip;好猥琐啊。&rdquo;</p>
			<p>
				有一个程序员男友最直接的好处便是他可以承包你一切电子产品的故障维修工作，虽然他总是义正言辞地将他自己和修理工区分开来，但这并不意味着他可以挣脱成为我的御用修理工的命运。<br />
				那还是我们才认识不久大约勉强算得上熟识的时候。<br />
				&ldquo;对了，你不是程序员嘛。你会修电脑吗？我电脑好像有点问题。&rdquo;<br />
				&ldquo;那个，程序员不一定会修电脑&hellip;&hellip;我们也不是修电脑的。不过，我还是可以帮你看一看。&rdquo;<br />
				&ldquo;你难道不知道很多帮女生修电脑的男程序员修着修着就修改了找不到对象的传说了？&rdquo;<br />
				&ldquo;额，这个，这个&hellip;&hellip;&rdquo;<br />
				不知道是不是所有的程序员都能这样找到真爱，但我想这样找到的对象一定都是真爱。</p>
			<p>
				&ldquo;我喜欢字写的漂亮的男生，字写得好的男生遭人爱。&rdquo;<br />
				&ldquo;长得好的男生也遭人爱&hellip;&hellip;&rdquo;<br />
				&ldquo;对啊，但是你都不是。&rdquo;<br />
				&ldquo;为什么就没有女生欣赏代码写得好的男生呢？&rdquo;<br />
				&ldquo;你去找一个同样喜欢写代码的女生吧&hellip;&hellip;&rdquo;<br />
				他是一个把编程当做游戏能编上瘾的，标准的程序员。和他在一起之后做的最多的便是搬着我的电脑在他旁边看他敲代码：我开始看电影的时候他在敲代码，我看完电影的时候他还在敲代码；我酝酿情绪准备写东西的时候他在敲代码，我写完东西对着电脑屏幕发呆的时候他还在旁边念念有词的敲代码。<br />
				&ldquo;啊，这个好帅啊。&rdquo;<br />
				当他嘴里发出这样的话的时候，我下意识地转过头去看他，却原来他正对着一群代码自言自语。不过时间久了，也就习惯了。大约正如我喜欢在一个人的时候吟一些唐诗宋词一般，他亦喜欢跟他的代码对话吧。<br />
				而作为一个资深的技术宅，他身上的关键字不是&ldquo;技术&rdquo;，而是&ldquo;宅&rdquo;。宅到无以复加，宅到忍无可忍。<br />
				&ldquo;今天出去玩吧。&rdquo;<br />
				&ldquo;怎么想到要出去玩了？&rdquo;<br />
				&ldquo;额&hellip;&hellip;学校不是要停电吗？&rdquo;</p>
			<p>
				不知道是他比较内向的缘故，还是他们这一类人都活在自己的世界里。他不爱与人打交道，相对于复杂的人际关系来说，大约他更愿意埋在那一窜乱码般的代码里吧。比如一起吃饭的时候跟服务员交流这样一件事，他就总是要全权地交付于我。仿佛我成了他与这个现实世界的唯一链接。<br />
				&ldquo;只是觉得，嗯&hellip;&hellip;有你就够了啊。&rdquo;<br />
				这当然是一句动听的情话，而事实上多多少少也确实如此吧。他可以一个人过得很好，而当他下定决心将他的世界大门向你打开，将他的世界与你分享之时，他便也将你当做了他世界的一部分。虽然他不会明白你那些不为人知的小心思，但是他会真正的把你放在心上，至少，他愿意为你处理那些你不擅长的技术琐事，即使那些问题在他的眼里可能白痴的要命，甚至是浪费自己的天赋。<br />
				&ldquo;亲，我想教你编程。&rdquo;<br />
				&ldquo;这个，这个。我的理科是体育老师教的，这辈子我应该都学不会吧&hellip;&hellip;&rdquo;<br />
				&ldquo;不会啊，你很聪明。&rdquo;<br />
				虽然，那好像是他极少数夸我聪明的次数之一。虽然，最后我也只是看了一看他帮我借的一本书的前言。<br />
				或许，那也是他试图向你分享他的世界的表现之一吧。</p>
			<p>
				在我眼里的他的世界是杂乱无章的，当然我不得而知他电脑深处的另一个世界是否井然有序。每每气急败坏他的邋遢的时候，他的脸上总会呈现出一副Sherlock式的傲娇的神情，让我无可奈何。我相信不是所有的程序员都这样不爱收拾自己，但这似乎也并改不了程序员总还是逃不过被和邋遢的IT民工联系在一起的命运，也只能在无可奈何之时叹一句大约他们的智商不在此了。他对自己的衣着打扮毫不在意，从来不会知道他自己适合穿什么样的衣服，和他谈论的时候也永远只是一句：&ldquo;反正你买就好了，你买什么我穿什么。&rdquo;&mdash;&mdash;但这并不妨碍他对我的衣着打扮评头论足。<br />
				在别人眼里，或者说不熟的人的眼里，他看起来永远是一副呆滞模样，闷声不吭，脸上爬满代码。<br />
				&ldquo;那时候我们都可好奇了，他这样几乎不说话的人，是怎么追到女朋友的。&rdquo;<br />
				&ldquo;哈哈。其实我也觉得很神奇，就这么在一起了。&rdquo;<br />
				熟识之后知晓其实他也同大部分人一样，在熟人堆里话从来也不少。不乏有一旦得到别人响应便滔滔不绝之势，或许是平日里志同道合之人甚少，一旦得见大有秉烛夜谈之劲，大约也正是相谈甚欢之人的缺失，才让人有对着代码对话的冲动吧。不过他懂得很多，听他絮絮叨叨是一件挺幸福的事儿。其实每个人都一样，都有这样一种表达欲，所谓不遇知音懒吟诗是也。<br />
				他们喜欢做他们自己国度里的国王，主宰着属于他们自己的世界。</p>
			<p>
				他对电子产品有一种特殊的迷恋。我想很多科技界的人士都有这样的通病吧，如同在数字尾巴上时常看到的&ldquo;搞机&rdquo;一族。对物质生活并不太关心的他，更愿意花大把大把的钱在科技产品之上。相比于中午应该吃什么美味的午餐，他更关心谷歌新出那款眼镜有什么功能性价比如何。他也经常同我讲新科技、新设计之类，试图给我建立起一个全新的跟得上时代步伐的科技观。在他对电子产品的无限热衷的感染之下，久而久之倒也欣然接受，成了周围同学眼里的科技通，&ldquo;跟他在一起，你仿佛懂了很多的样子。&rdquo;虽然偶尔对于他毫无节制的&ldquo;败家&rdquo;，我还是会有所微词。</p>
			<p>
				&ldquo;你应该多写一点东西，这样网站才有更多的访问量，你也不会成日里无所事事。&rdquo;<br />
				他又开始教训我了，大约是比我大一点的缘故，总会有几分像父亲，像兄长，睿智、成熟，却又唠叨、爱训斥。<br />
				当然，有时候，也会是体贴的男友，会是温柔的情人，还会是卖萌的儿子。<br />
				虽然，他是个程序员，但毕竟，他是我男友嘛。</p>
		</div>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/boyfriend-met-programmer</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Wed, 07 May 2014 07:20:01 GMT</pubDate></item><item><title><![CDATA[所有编程皆为Web编程]]></title><description><![CDATA[<div>
	<blockquote>
		<p>
			Michael Braude对Web编程大受追捧表达了他的不屑：</p>
		<p>
			<span><strong>大部分人想去做Web编程的原因是，他们不够聪明，因此也做不了别的事</strong>。他们不懂编译器、并发性、3D或类继承。他们根本不明白我为什么要使用接口或者抽象类。他们不理解虚函数、指针、引用、垃圾回收、终结器、传引用与传值的区别、C++的虚拟析构函数、或者C#的结构体与类之间的差别。他们对进程也一无所知。更别提瀑布、螺旋、敏捷了！他们从来没看过需求文档，也从来没写过设计文档；他们从没画过一张UML图，甚至听都没听说过有&ldquo;顺序图&rdquo;这种东西。</span></p>
		<p>
			<span>不过，他们确实有些手段：他们知道怎样匆匆拼凑一个ASP.NET网页，向数据库发一些（写得很糟糕的）SQL指令，填上一个数据集，然后用网格控件展示出来。他们也就会这些了吧。而且，他们在弄明白这些东西的时候，很可能也没费多长时间。</span></p>
		<p>
			<span>因此，请恕我冒犯&mdash;&mdash;我才不想当Web程序员呢！我有两个理由。第一，那对我太没有挑战性了。第二，因为绝大多数互联网公司的工程师都很糟糕，更准确地说，因为你不必去琢磨深奥的东西就能成为一个Web开发者。在我看来，互联网正让我们变得越来越弱智。拼凑出一个网页真的不需要你有那么聪明。</span></p>
		<p>
			<span>我真心希望大家都错了，希望不必所有的东西都&ldquo;转向Web&rdquo;。因为如果真这样的话，将来的某一天，我要么会不情愿地接受这种无聊的转变，要么只能换一个职业了。</span></p>
	</blockquote>
	<p>
		Web开发没有挑战性，所以吸引了不够格的软件开发者？让我们姑且不讨论这种荒谬的观点。即使过去真是这样，如今的情况也已经不同了。</p>
	<p>
		我其实不想在Michael面前扮演&ldquo;坏人&rdquo;，告诉他这个坏消息：对于越来越多的用户来说，桌面应用软件已经完蛋了。几年来，大部分桌面应用软件都被Web应用代替了。随着网络浏览器进化得越来越强大和健壮，每天都有更多的桌面应用被取代。</p>
	<p>
		你希望不必所有的东西都&ldquo;转向Web&rdquo;？醒醒吧！这已经发生了！</p>
	<p>
		任何学习计算机历史的学生都可以告诉你，Web应用成为主流正是&ldquo;最不强大原则&rdquo;（<a href="http://blog.codinghorror.com/the-principle-of-least-power/" target="_blank">The Principle of Least Power</a>）所预示的：</p>
	<blockquote>
		<span>计算机科学界过去花了40年的时间，致力于让语言尽可能地强大。时至今日，我们必须感激那些让我们选择不是最强大的解决方案（而选择最不强大的方案）的原因。计算机语言越不强大，你对用那种语言存储的数据能做的事情就越多。如果你以一种简单的陈述形式来书写，任何人都可以写一个程序去分析它。比方说，一个呈现天气信息的网页使用RDF（译者注：资源描述框架，一种用于描述Web资源的标记语言）来描述数据，用户可以把它装进一个表格，也许再做一下平均计算，绘制图表，然后结合其他信息做出某种推断。另一种极端的做法是，天气信息通过巧妙的Java小程序描绘出来。尽管这种方式可能做出很酷的用户界面，但它完全不能被分析。找到这个页面的搜索引擎将无法判断那是什么数据或者那些数据有什么用。要想知道一个Java小程序是做什么的，唯一的办法是亲眼目睹它运行起来。</span></blockquote>
	<p>
		互联网恰恰是做最简单（或者说最傻）而靠谱之事的具体表现。如果这吓到了你（让你感到不安了），那么我要小声地告诉你，你没有理由成为一名程序员。</p>
	<p>
		所有应用都应该成为Web应用吗？当然不是。总有一些重要的例外，有些种类的软件跟网络也毫无关系。但是，这些是少数情况，是一些特殊应用。它们固然是重要的小生态环境，但不管怎么说，就只是&ldquo;小生态&rdquo;。</p>
	<p>
		如果你希望尽可能多的用户来使用你的软件，绝没有比把它做成Web应用更好的方法了。对于现存软件来说，互联网是最高效、最普遍、最直接的分发网络。任何用户只要能连上网，有一个浏览器，不管他身处世界的任何一个角落，只须点两下鼠标就能与你写的软件开始交互了。哪怕是最蹩脚的Web应用，它的受众面和传播度都是令人震惊的；而且还在每天扩大着&hellip;&hellip;我也曾因此杜撰了&ldquo;<a href="http://baike.baidu.com/view/10384969.htm" target="_blank">阿特伍德定律</a>&rdquo;：<strong>任何可以用JavaScript来写的应用，最终都将用JavaScript来写。</strong></p>
	<p>
		从工程的角度来看，用JavaScript来写Photoshop、Word或Excel毫无意义。但是，这是不可避免的。这事会发生的。实际上，这事已经在发生了。环顾一下你的四周吧。</p>
	<p>
		作为一名软件开发者，最让我开心的是编写有人使用的软件。如果你的软件委身于一个二进制的EXE文件，它必须被购买、授权、运送、下载、安装、维护和升级，你的技艺又有什么意义呢？考虑到程序员与用户之间的所有这些传统障碍，软件行业居然还能生存下来，这真是一个奇迹！然而，在华丽而崭新的Web应用世界里，那些制约已经不复存在。边界没有了。软件可以无处不在！</p>
	<p>
		Web编程还远远没有达到完美的境地。其实，还有点乱！没错，随便会写点代码的人就能三下两下地搞出一个糟糕的Web应用；也确实，99%的Web应用都似狗屎一堆。但是，这也意味着，相当&ldquo;聪明&rdquo;的程序员们正在将他们的成果展现在成百上千（或者成千上万，甚至几百万）的用户面前，而这在互联网盛行之前是绝无可能的。在我看来，让代码遭受冷落、让它们就此孤独终老，没什么比这更让人感到悲哀的了！把软件按照Web应用的形式重整一下，即使软件本身并不怎么样，这也使得程序员们能够把他们的软件展现在某个地方的某人面前。</p>
	<p>
		如果受众面和技艺方面的观点不足以说服你，那就从商业的角度来考虑一下吧。<a href="http://www.skrenta.com/2007/07/fletchers_angry_list_of_startu.html" target="_blank">Mark Fletcher曾经给出过一份创业规则</a>，其中就有这么一条：</p>
	<blockquote>
		<span>你在做一个Web应用，对吧？这不是20世纪80年代了！纵然你的竞争对手把（桌面）应用软件做得别致优雅，你那简陋而寒酸的Web应用也仍然会比它更加成功。</span></blockquote>
	<p>
		要不了多久，所有编程都将是Web编程。对于普通的在职程序员来说，如果你不认为这是一个值得庆贺的理由，你也许应该转行了。</p>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/programming-all-programming-for-the-web</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 29 Apr 2014 00:46:04 GMT</pubDate></item><item><title><![CDATA[最具争议的10个编程观点：程序猿生而平等]]></title><description><![CDATA[<div id="readability-page-1" class="page"><div class=""><p>你认为最具争议的编程观点是什么？C#专家Jon Skeet曾在StackOverflow上提出这个问题。这里列举最热门的前10条讨论。</p><p><strong>1</strong>、 业余时间不以编程为乐者，永远赶不上那些以此为乐的同行</p><p>即使最聪明、最有才华的人，若只是将编程作为工作，就永远成不了真正优秀的程序员。以编程为乐的人会在业余时搞些小项目，或者摆弄各种编程语言和编程思想。</p><p><strong>2</strong>、 唯一能放之四海而皆准的最佳实践，是“用脑子思考”</p><p>太多人喜欢追逐众多时髦技术，想方设法把各种方法、模式、框架用到不适合的地方。新技术和名人大牛的观点并不等于适用于实际情况。</p><p><strong>3</strong>、 依赖Google没什么错</p><p>这种言论肯定会让那些学富五车的饱学之士恼火。但重要的是能真正理解，并给出成功的编程解决方案，让客户和老板满意。</p><p><strong>4</strong>、 大多数注释是代码的糟糕重复</p><p>我们大部分时间是在维护其他人（或我们自己）所写的代码，而糟糕、错误、过时和误导性的注释也是代码中最令人纠结的因素之一。</p><p><strong>5</strong>、 XML被大大高估了</p><p>许多随波逐流的人没动过脑子就跳上了XML这条黑船。XML用于Web应用不错，因为它本来就是干这个的。此外的问题定义、设计思路应该尽量不用XML。</p><p><strong>6</strong>、 程序员生而不平等</p><p>经理往往认为“程序员A=程序员B”，因为他们工作的年头差不多。但实际上，他们的效率可能相差十倍甚至百倍。</p><p><strong>7</strong>、 将Java作为最适合大学教学的第一门语言令人费解</p><p>第一门编程语言应该重在学习控制流和变量，而不是对象和语法。此外没有调试C/C++内存泄漏经验的人，根本无法完全理解Java的初衷。</p><p><strong>8</strong>、 若你只会一门语言，无论多么精通，仍然不够优秀</p><p>任何人如果只局限于一门语言，都无法充分发挥自己的潜力。而且缺乏求知欲和探索意愿，都不符合优秀程序员的特质。</p><p><strong>9</strong>、性能真的很重要</p><p>尽管可以通过购买更强劲的CPU、硬盘和内存提升性能，但若这样想的人少一些，我们也许能在1GHz的CPU上运行更多程序。</p><p><strong>10</strong>、Print语句是有效的调试方式</p><p>用System、out、println之类的输出语句调试代码的方式挺好。这经常比正式的调试要快，而且可以比较不同运行的输出结果。</p><p align="center"><img alt="最具争议的10个编程观点：程序猿生而平等" src="/upload/offsite/2014.04.18.8097af15-b84c-4e17-8102-16a3d76871b8\2685561a-2db1-4bd1-8387-233ce6e65474.jpg"></p><p class="news_bq">新闻标签：<a href="http://news.mydrivers.com/tags/217.htm">程序员</a></p><table width="100%" border="0" cellpadding="0" cellspacing="0">
          <tbody><tr>
            <td align="left" width="82">好文共享：</td>
            <td> 
              
              <div class="jcuo"><a id="jiucuo_n" href="http://blog.mydrivers.com/jiucuo-301207.htm"><img src="/upload/offsite/2014.04.18.8097af15-b84c-4e17-8102-16a3d76871b8\778f5321-484c-4723-aab8-572c0fa728b2.png" width="92" height="24"></a></div></td>
          </tr>
        </tbody></table></div></div>]]></description><link>http://zackyang.com/post/10-programming-the-most-controversial-point-bob-born-equal</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 18 Apr 2014 03:21:15 GMT</pubDate></item><item><title><![CDATA[“反鸡汤”段子走红 网友：这才是人生真理]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			对于不少80、90后来说，《心灵鸡汤》以及其他一些&ldquo;鸡汤&rdquo;类书籍都是青春年少的一个难忘记忆。不过随着年龄增长，当年视若经典的&ldquo;鸡汤&rdquo;们已经成为了&ldquo;假、大、空&rdquo;的笑料。近日，网上更是流传出了一系列的&ldquo;反鸡汤&rdquo;。</p>
		<p>
			<strong>&ldquo;又一天过去了。今天过得怎么样，梦想是不是更远了？&rdquo;这些&ldquo;反鸡汤&rdquo;的段子由&ldquo;鸡汤&rdquo;改造而来、反其意而用之，更加贴近现实</strong>。因此，不少网友纷纷转发、点赞，更有网友称，&ldquo;看完这些承载着负能量&ldquo;反鸡汤&rdquo;段子，整个人都豁然开朗，似乎这才是人生硬道理&rdquo;。</p>
		<p>
			不仅是心灵鸡汤，就连一些广为流传的老话也一样充满了纠结与矛盾：<strong>俗话说好马不吃回头草，可俗话又说浪子回头金不换；俗话说兔子不吃窝边草；可俗话又说近水楼台先得月；俗话说宰相肚里能撑船，可俗话又说有仇不报非君子；俗话说男子汉大丈夫宁死不屈，可俗话又说男子汉大丈夫，能屈能伸</strong>......</p>
		<p>
			无论是所谓的心灵鸡汤，还是这些&ldquo;反心灵鸡汤&rdquo;，抑或这些&ldquo;俗话说&rdquo;，究竟哪些才是真理，没有明确的答案，或许只有具体问题具体分析了。</p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\21ccfba0-64e3-451b-9b24-67aadde4cdaa.jpg" /><br />
			曾&ldquo;饱读&rdquo;心灵鸡汤的小伙伴们，看到这些，有没会心一笑？</p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\4c8b47ee-2e71-4bd1-98d6-ec5a5206ae1f.jpg" /></p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\338b328f-280e-4e11-9789-a006b62dde8b.jpg" /></p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\c910d388-7ce2-460c-9f1a-73ee62d8b9d7.jpg" /></p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\39d3d44e-93e2-4aa9-ba3d-ea6d3c3795a8.jpg" /></p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\822a3870-0a09-4ca0-9d36-8d026ab96b6b.jpg" /></p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\95bc2d48-3b6a-4c0d-b1bb-28914f96686f.jpg" /></p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\8ed1dd23-8c87-4dcf-9644-920f469b1716.jpg" /></p>
		<p align="center">
			<img alt="“反鸡汤”段子走红 网友：这才是人生真理" src="/upload/offsite/2014.04.11.952cce8f-f2c2-466e-a2c8-071bf55f2183\2d5bcff7-a15b-4ee7-b83f-2fa9dae0ed09.jpg" /></p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/chicken-soup-for-hot</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Fri, 11 Apr 2014 07:37:04 GMT</pubDate></item><item><title><![CDATA[这样放鞭炮太霸气了！]]></title><description><![CDATA[<p>
	<embed allowfullscreen="true" allownetworking="all" allowscriptaccess="always" height="405" src="http://player.56.com/v_MTA2NzUwNTEz.swf/1030_justin0842.swf" type="application/x-shockwave-flash" width="480"></embed></p>
]]></description><link>http://zackyang.com/post/firecrackers-are-too-domineering</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Mon, 31 Mar 2014 11:34:40 GMT</pubDate></item><item><title><![CDATA[真人版马里奥大乱斗]]></title><description><![CDATA[<p>
	大片即视感！</p>
<p>
	<embed allowfullscreen="true" allownetworking="all" allowscriptaccess="always" height="405" src="http://player.56.com/v_MTAzMjg5ODY3.swf/1030_justin0842.swf" type="application/x-shockwave-flash" width="480"></embed></p>
]]></description><link>http://zackyang.com/post/chaos-live-version-mario</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Mon, 31 Mar 2014 11:33:46 GMT</pubDate></item><item><title><![CDATA[我不是个内向的程序员，我只是很忙]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-63575">
		<!-- BEGIN .entry-header --><!-- BEGIN .entry-header --><!-- BEGIN .entry-meta --><!-- END .entry-meta --><!-- BEGIN .entry -->
		<div class="entry">
			<p>
				<a class="cboxElement" href="/upload/offsite/2014.03.31.f4843cb9-185f-47b4-8a9c-88906a256a1f\1ca99f2e-0317-40ae-89db-413916070ba4.jpg" rel="lightbox[63575]" title="我不是个内向的程序员，我只是很忙"><img alt="goldfish jumping out of the water" class="alignnone size-full wp-image-63576" src="/upload/offsite/2014.03.31.f4843cb9-185f-47b4-8a9c-88906a256a1f\1ca99f2e-0317-40ae-89db-413916070ba4.jpg" /></a></p>
			<p>
				最近几个星期，我一直在跟一个十分诡异的bug做斗争。我的一个服务端程序，它要跟另外一个服务保持持久的连接，要认证终端用户，然后执行一系列的数据操作。</p>
			<p>
				不知为什么，时不时的，这个程序会丢失socket连接。也不是经常发生，但也不是很罕见，就是过一段时间，运行这个服务的机器就会资源耗尽，无法响应&mdash;&mdash;因为积压了太多的无法处理的请求。</p>
			<p>
				这个问题快把我搞疯了；我找不出问题出自哪里，我的时间全被这个问题占用了，一边盯着要在服务彻底宕机前重启它，一边来回分析这段代码。就是这段，让我来展示给你看&hellip;.</p>
			<p>
				等一下。</p>
			<p>
				这里不是我的办公室。我没有坐在办公桌前。电脑也不在身边。<em>我他妈的在什么地方？</em></p>
			<p>
				四周都是人。很闹。看起来像是一个Party。</p>
			<p>
				嗨，我的手为什么湿了？哦，看，是一杯饮料；黑的，透亮，看起来像是一杯可乐。没错，是可乐。很凉，但里面没有冰块。白色的小餐巾纸浸透了，它的边缘被我用手揪的粉碎，所以我猜我已经在这待了好一阵了。</p>
			<p>
				没错，现在我记起来了。这是公司同事的聚会，是Dan邀请我来的。是有人过40岁生日，也许是50。我记不清了。Dan是个不错的人，但我们的性格大相径庭，他是个话痨。估计他以前是卖保险的。</p>
			<p>
				还好，在这里，我不需要穿西装。而且也不需要穿的像电梯旁边的那个傻冒那样。真的，为什么要在Party上穿连帽衣呢？</p>
			<p>
				不过，谁会在意呢。他已经按了电梯，所以他很可能打算出去。哦，不，老弟，别在用iPhone看Facebook了，电梯门就要关了。灯灭了，你错过了这趟。哈哈，你就是个傻冒，你&hellip;</p>
			<p>
				哇噢。</p>
			<p>
				<em>哇噢。</em></p>
			<p>
				他不留神。他错过了电梯。</p>
			<p>
				我敢跟你打赌，这就是我代码里的问题。如果远程服务挂了，而我还在等待接收认证码，应用没有收到通知，于是报错，socket丢失。</p>
			<p>
				就是这样。两个星期的折磨，找到问题的灵感竟然来自一个到处都是买保险的人的公司Party上。还有在手上的一杯走了气的可乐和一张撕碎的纸巾。</p>
			<p>
				我也许因该现在就走，回去验证一下我的灵感。但我也不想被人认为太不礼貌&hellip;我需要找个时机，神不知鬼不觉的溜出去。我不能再待在这里了。我已经被这个问题折磨的太久。</p>
			<p>
				哦，见鬼。Dan走过来了。他乐呵呵的，后面还跟着一个老家伙。</p>
			<p>
				唉。我估计走不掉了。他们真的是要过来和我聊天吗？Dan，我不爱说话，你不知道吗？我祈祷Dan改变主意。我不能在这浪费口舌，说不定这绝妙的灵感在我坐到键盘前时会消失的无影无踪。</p>
			<p>
				嗨，这是你们的CEO。哦，是吗。很高兴见到你。面带笑容。微鞠一躬。点头。我一定是快把那个该死的电梯和认证码给忘了。没错，Dan是一个不错的家伙。哦，他跟你说到过我？真是好人。我相信他一定没告诉你关于那个该死的bug的事，你们在阻挡我去彻底的解决这个问题，只有解决了它我才能终于睡上一次好觉了。</p>
			<p>
				终于，他们走了。我很可能把这次谈话搞砸了，通常都是这样。他们可能会认为我脑子有问题。或不善交际。我现在真的毫不在意，因为我终于找到这个该死的bug的原因了。</p>
			<p>
				我还是赶紧呼叫电梯吧，以免又有哪个天才的家伙试图过来浪费我的时间。<em>我</em>不会错过这趟电梯。<em>我<span class="wp_keywordlink_affiliate"><a href="http://www.amazon.cn/gp/product/B007XPTAIS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=vastwork-23&amp;linkCode=as2&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007XPTAIS" rel="nofollow" target="_blank" title="搞定(套装共3册) ">搞定</a></span>了一个bug！</em></p>
			<!-- p><a target="_blank" rel="nofollow" href="http://www.hi-vps.com/?utm_source=jobbole.com"><img src="/upload/offsite/2014.03.31.f4843cb9-185f-47b4-8a9c-88906a256a1f\03cf9a21-a102-4e95-bdc7-0a2ad07e5a45.jpg"></img></a></p --></div>
		<!-- END .entry --><!-- JiaThis Button BEGIN --><!-- JiaThis Button END --></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/im-not-a-shy-programmer-im-just-very-busy</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Mon, 31 Mar 2014 11:29:28 GMT</pubDate></item><item><title><![CDATA[Node.js真的无所不能？那些不适用的应用领域分析]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			<span class="wp_keywordlink"><a href="http://blog.jobbole.com/1254/" target="_blank" title="Node.js 究竟是什么？">Node.js</a></span>是一个服务器端JavaScript解释器，底层采用的还是libevent；它的目标是帮助<span class="wp_keywordlink"><a href="http://blog.jobbole.com/821/" target="_blank" title="程序员的本质">程序员</a></span>构建高度可伸缩的应用程序，目前 对Node.js 的采用状况，Node.js 官方站点有一些罗列，但是相当不完整。如果你自己公司用到，也可以在 <span class="wp_keywordlink"><a href="http://blog.jobbole.com/6492/" target="_blank" title="GitHub如何运作系列文章">GitHub</a></span> 上提交自己的 pull-request 来更新这个文档。</p>
		<p>
			<a href="http://nodejs.org/industry/">http://nodejs.org/industry/</a></p>
		<p>
			<a href="https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node">https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node</a></p>
		<p>
			其实到今天为止，很少有哪些大的互联网公司是和 Node.js 无关的。LinkedIn，Yahho，Paypal, eBay, Walmart 都在将既有的系统向 Node.js 迁移（https://www.quora.com/Node-js/What-companies-are-using-Node-js-in- production 翻墙看）。国内的淘宝、网易、百度等也都有很多项目运行在 Node.js 之上。</p>
		<p>
			2011 年我开始接触 Node.js 的时候，npmjs.org 上只有不到 3,000 个 Node.js 的 packages，今天(2014-3-2)则有 61,897 个，这个数字还在快速增长中。</p>
		<p>
			下面有两个链接，第一个是在讲 Walmart 这几年为什么以及如何迁移到 Node.js 上；第二个则为 eBay 是如何从 Node.js 的怀疑者转变为采用者。</p>
		<p>
			<a href="http://www.ebaytechblog.com/2011/11/30/announcing-ql-io/#.Ux6u63liAdR">《Announcing ql.io》</a>&nbsp;这篇文章的最后一段，列出了 eBay 为什么选择 Node.js。</p>
		<p>
			每天都有几百个新的 packages 被发布到&nbsp;<a href="https://www.npmjs.org/">npm</a>&nbsp;上，小到几行代码，大到万行代码的 Framework。一天有7百万次的包下载（安装到某台电脑上），对于单一开发框架的社区来说，用沸腾的海洋来形容并不过分。<br />
			<strong>以下应用领域和程序员不适合选择Node.js：</strong></p>
		<ul>
			<li>
				计算密集型应用。Javascript 的计算性能是很难和 C 语言代码相比的。当然，也有反例：http://onlinevillage.blogspot.jp/2011/03/is-javascript- is-faster-than-c.html，只不过不具有典型性。</li>
			<li>
				需要精密控制内存的分配和释放的场景，如果用 Node.js 实现 Redis 数据库，虽然程序会简单不少，但是 JVM 对内存数据结构的精密控制能力是比不了用 C 语言纯手工打造的。</li>
			<li>
				大量且需要频繁通过 C Binding 调用 C library 的情况。这种场景下，往返参数的 Marshal/Unmarshal 的成本可能会大于 C Library 带来的性能提升。</li>
			<li>
				实时性要求很高的场景，例如：交换机或者工控机器人。这是因为所有通过垃圾回收机制来管理内存的系统都有可能在 GC 过程中产生停顿，从而影响响应速度，而且很难优化。</li>
			<li>
				需要单一进程控制大内存的场景：v8 引擎的设计限制，在 32-bit下有 1GB 最大堆尺寸的限制，在 64-bit下是1.7GB。当然，由于 node.js buffer 的分配不是在 v8 的堆上，因此可以超过此限制。这个限制可以通过向 v8 引擎传递max_old_space_size&nbsp;参数来超越，但是也会带来 GC 的性能退化。这一问题在几乎所有 GC Based 的系统下都存在。</li>
			<li>
				不关心系统吞吐率或者不需要异步调用的场景：例如，自动化脚本，这些脚本不需要关心多用户并发访问的性能消耗。用 Python 这样的&ldquo;胶水&rdquo;语言写起来会更简单。</li>
			<li>
				某些非通用场景：例如 nginx 对于静态 web server 或者 反向代理的场景是特别设计的，这些场景中 nginx 的性能比 Node.js 要好。</li>
			<li>
				强类型强迫症：有些 Java 或者 .NET 过来的程序员会认为只有强类型语言和严格定义的类型系统是专业化的象征，构造这样的系统是架构师的使命，而动态语言只是玩具，只能用来做 Demo 或者前端开发。</li>
			<li>
				团队成员难以理解或者接受函数式编程：Javascript 本质上更像函数式语言，有些程序员在理解和使用闭包、高阶函数等概念时总是不能习惯，这个问题在国内的开发团队中还挺普遍的。</li>
			<li>
				回调式编程的不习惯：Node.js 的异步IO 大量依赖回调。回调让程序的执行出现了两条路径，出现故障时调用栈也很难理解。这对习惯了同步编程的程序员来说一开始确实是个坎。async,&nbsp;Q promise&nbsp;等 package 可以缓解这个问题（在 ES6 的Generator 普及之前），不过这也带来了更陡峭的学习曲线。一般情况下，需要半年到一年的习惯过程，当然前提是多看，多写。随着越来越多的经验分享，这个过程也在不断 地缩短。</li>
		</ul>
		<p>
			除此之外的领域，或者没有上述问题的，都都可以享受到 Node.js 带来的生产力提升和稳定的性能保障。</p>
		<p>
			<strong>性能的争议</strong></p>
		<p>
			不同开发环境间的性能对比从来都是有争议的话题。我只能说，当开发 Web 或 网络环境下的应用时，Node.js 靠以下几个方面来避免出现不必要的性能问题：</p>
		<ol>
			<li>
				Chrome V8，一个可靠的优秀的虚拟机(hidden classes 和 inline caching)，让 Javascript 的运行速度进入了第一阵营(C++, Java, .NET)。</li>
			<li>
				异步 IO 大大降低了线程数量，莫名其妙的死锁和等待的概率被降低了很多。大部分场景不用去考虑并发和同步锁，犯错误的机会少。而在 Python 中，异步 IO 并不是标准，并没有被贯穿到所有 Package 中，因此应用程序也就很难获得一致的性能保障。</li>
			<li>
				非常轻巧的&ldquo;内核&rdquo;。Node.js 的模块分为 Core Modules 和 Userland 两部分。Core Modules 非常精简，只包括 TCP, HTTP, DNS, File System, child processes 和其他一些模块，这些网络库还只有异步版本。相对地，在 Userland 中却有着海量的 Packages。开发应用的时候，我们根据应用的需求来组合 Userland 的 Packages，使得我们的应用程序有机会在一个很低的资源消耗水平下运行（在<a href="http://www.ebaytechblog.com/2011/11/30/announcing-ql-io/#.Ux6u63liAdR">《Announcing ql.io》</a>中 指出，一台开发服务器就可以支持 12 万活跃连接，平均每个连接消耗 2k 内存）。事实上，我开发的 WebSockte 应用在 Raspberry Pi 下都可以支持几百并发长连接（WebSocket）。和那些动辄上万个类的企业开发框架相比，这是一个巨大的优势。这种方式降低了出现问题的概率、查找问 题的成本以及减少部署成本。</li>
		</ol>
		<p>
			对 Javascript 的绝对性能的追求一直没有停顿（例如， Mozilla 的&nbsp;<a href="http://asmjs.org/">asm.js</a>&nbsp;）。而 Node.js 则在绝对性能的基础上，确保应用程序可以获得稳定和可预测的性能保障（ Benchmark 和实际的应用运行往往是两回事）。</p>
		<p>
			<strong>Node.js继承了JavaScript 的灵活性，优秀的JS库应当如何选择</strong></p>
		<p>
			可以在 npmjs.org 或者 google 上搜索关键词。如果类似的返回很多，则看其被其他 package 依赖的数量有多少。上 <span class="wp_keywordlink"><a href="http://blog.jobbole.com/25775/" target="_blank" title="Git详解系列文章">git</a></span>hub 上查看 starred 和 forks 的数量，读 issues。</p>
		<p>
			如果是&ldquo;名人&rdquo;（substack, visionmedia (TJ Holowaychuk), dominictarr, rvagg 等）写的 Packages 自然会被加分。</p>
		<p>
			最后是把 Git Repo. Clone 或者 Fork 下来, 阅读且注释他们的源代码。这个过程也可以发现很多他们依赖的其他 Packages。这是一个蛮享受的过程，可以学到很多新知识和新的用法。</p>
		<p>
			还有一些乱枪打鸟的方法：</p>
		<ol>
			<li>
				在 Tweeter 上关注 @nodenpm，所有在 npm 上发布或者更新的 packages 都会在该 handle 上发布出来。在你的碎片时间没事可以刷刷这个，当然你需要 APN 翻墙。</li>
			<li>
				关注一些推荐和评论账号：@dailyjs，@echojs 等。</li>
			<li>
				<a href="http://thechangelog.com/">Changelog</a>&nbsp;会提供不错的开源信息汇总，其中包括 Node.js、Javascript 和 npm 栏目。</li>
			<li>
				<a href="http://news.ycombinator.com/">Hacker News</a>&nbsp;则不会让你忽略软件行业的一些&ldquo;大事&rdquo;或者新概念。</li>
		</ol>
		<p>
			一个项目开始前的研究阶段，我大约会浏览几十个 Packages，精读其中的5 ~ 10个。开发过程中则根据需要还会不断地发现和精读一些，这些都被我计入了项目的成本。</p>
		<p>
			&ldquo;自由选择，自己负责&rdquo;，在这个庞大的开发社区了不要指望有人能告诉你&ldquo;标准答案&rdquo;。每个人面临的问题域和知识背景都不一样，坚持多看，多试，多思考，享受获得新知识的过程比获得&ldquo;标准答案&rdquo;更重要。</p>
		<p>
			<strong>在众多的成熟开发框架下为什么需要Node.js</strong></p>
		<p>
			在每一个特定的问题域，大家总是在尝试找到最优解。这个过程是没有终结的，就想最终也会有其他框架代替 Node.js 一样。</p>
		<p>
			今天的 Web，是无数相互连接的 <span class="wp_keywordlink"><a href="http://blog.jobbole.com/29195/" target="_blank" title="Web Service入门">Web Service</a></span>s 组成的，这些连接的本质是异步的。Node.js 天生异步的特性和这个场景的匹配度相对其他开发框架要更高，因此实现起来也更自然。</p>
		<p>
			除此之外，Node.js 的设计基本原则遵循了 《<a href="http://www.catb.org/esr/writings/taoup/html/ch01s06.html">Unix 的编程艺术</a>》，参见 Isaac Z. Schlueter (前任 Node.js 的Gatekeeper，目前负责 npm 的商业化) 的Blog：&nbsp;<a href="http://blog.izs.me/post/48281998870/unix-philosophy-and-node-js">Unix Philosophy and Node.js</a>。</p>
		<p>
			npm 和 stream 就是上述哲学的产物。</p>
		<p>
			<strong>npm</strong></p>
		<p>
			npm 是 Node.js 的包管理系统。包管理系统不是新东西，但是和 npm 的那些前辈和表兄弟不同的是：</p>
		<ol>
			<li>
				npm 直接集成在 Node.js 中，无需单独安装，发布，安装 packages 非常简单。</li>
			<li>
				npmjs.org 提供一个统一的入口，你可以看到每个 package 被哪些 packages 所依赖，你也可以一目了然地看到它依赖了誰，以及最近的下载次数。结合到 github 上的更新情况，基本上对一个 package 的基本情况你都能了解到。</li>
			<li>
				约定俗成的发布规范：一个 git repo. 让你可以直接找到源代码；README.md 提供简要的说明让消费者能尽快用起来。</li>
		</ol>
		<p>
			对于开发者来说，每一个 package 就是一个 &ldquo;micro service&rdquo;，是最小重用单元。大部分的 package 只有几百行代码，甚至有些只有几行代码。这样的重用粒度是在其他社区难以想象的。</p>
		<p>
			在 Node.js 的应用的开发过程中，编写 &ldquo;一口尺寸&rdquo;（bite-size）的 module 是推荐的编程方式。这也很方便你把这些小 module 封装为 package 分享到社区当中，而不用担心泄露&ldquo;企业机密&rdquo;。</p>
		<p>
			npm 是每一个 Noder 的 &ldquo;home&rdquo;，也是每一个 Node.js 应用的系统架构的一部分。</p>
		<p>
			<strong>Stream</strong></p>
		<p>
			如果说，npm 提供了&ldquo;开发时重用&rdquo;的机制，那么 stream 的则提供了&ldquo;运行时&rdquo;不同组件之间的&ldquo;重用&rdquo;机制。stream 概念和 unix 中的 stream 对应，应用中的每一个 component 则对应 unix 的 filter。下面举一个实际的例子：</p>
		<p>
			在某个应用中，我需要一个 API Server，它的客户端包括 Web Browser，iOS App., 以及网络中的其他 Server。Web Browser 和我们的 API Server 的通信基于&nbsp;<a href="https://github.com/sockjs/sockjs-client">SockJS</a>(当 然你也可以选择 SocketIO，或者 Faye 等)，它为<span class="wp_keywordlink"><a href="http://blog.jobbole.com/12749/" target="_blank" title="现代浏览器的工作原理">浏览器</a></span>兼容提供了适当的 &ldquo;Fallback&rdquo; 方案；对于 iOS App.来说，由于不需要考虑浏览器兼容，则采用基于标准的 RFC 6455 的纯 WebSocket 通信协议，这样实现起来更简单；而对于其他 Server 来说，局域网内则用 TCP，互联网上则用 TLS 来保证传输安全。</p>
		<p>
			我在 Node.js 上是这么实现的：</p>
		<ul>
			<li>
				利用&nbsp;<a href="https://github.com/substack/dnode">donde</a>&nbsp;构建一个通信无关的 RPC Server 来提供 API 服务。</li>
			<li>
				用 Node.js Core Modules 中的 tcp, tls 创建 TCP/TLS Server 并监听，用第三方的&nbsp;<a href="https://github.com/sockjs/sockjs-node">SockJS</a>&nbsp;和&nbsp;<a href="https://github.com/maxogden/websocket-stream">websocket-stream</a>&nbsp;分别创建 SockJS 和 WebSocket 的 Server 并监听。</li>
			<li>
				当 Client 连接到不同的端口，在 Server 上就会创建基于该协议的 Commnucation Stream，然后创建一个新的 dnode 实例，得到一个 dnode 的 Stream。最后将 Commnucation Stream 和 dnode Stream 像接水管一样接到一起即可。</li>
		</ul>
		<div>
			<div class="syntaxhighlighter notranslate text" id="highlighter_370345">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
								<p>
									2</p>
								<p>
									3</p>
								<p>
									4</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="text plain">net.createServer(function(connStream){ &nbsp;</code></p>
									<p>
										<code class="text spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="text plain">dnodeStream&nbsp;=&nbsp;dnode({&nbsp;func1:&nbsp;function(){}&nbsp;}); &nbsp;</code></p>
									<p>
										<code class="text spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="text plain">connStream.pipe(dnodeStream).pipe&nbsp;connStream; &nbsp;</code></p>
									<p>
										<code class="text plain">});</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			考虑到在不稳定的网络环境下的自动重连需求，也可以添加&nbsp;<a href="https://github.com/juliangruber/reconnect-core">reconnect</a>。</p>
		<p>
			不算你自己 RPC API 的实现逻辑，支持这么多的通信协议的 Server 框架只需要百十行代码，还加上了一定程度的异常处理。</p>
		<p>
			tcp, tls, SockJS，或者 reconnect 的开发者并不能确定&ldquo;消费者&rdquo;是如何使用这些 Package 的，但是大家都支持 Stream 的接口，则让自己的 Package 能够被运用到更多的场景。</p>
		<p>
			进一步，我们也可以多路复用一个底层的 Stream。我们把上面的例子再扩展一下：</p>
		<p>
			在既有的通信连接上（connStream），除了提供 RPC API 之外，还需要添加分布式的状态同步功能，例如：通过&nbsp;<a href="https://github.com/dominictarr/scuttlebutt">Scuttlebutt</a>，完成 Client 与 Server 或 Server 与 Server 之间的常量数据自动同步，而不用为这些功能设计新的 RPC API。通过&nbsp;<a href="https://github.com/dominictarr/mux-demux">mux-demux</a>&nbsp;，可以复用既有的网络通信 Stream（tcp, SockJS, Web Socket&hellip;），避免建立不必要的网络连接。</p>
		<p>
			Stream 是 Node.js 的核心概念之一，其接口和工作方式被广泛地采用，为不同组件在运行时相互通信提供了最基本的支持。</p>
		<p>
			在 Node.js 中，如何使用 Stream 可以用一本书的容量来描述，不是因为 Stream 的概念有多复杂，而是因为其组合方式非常丰富。</p>
		<p>
			<strong>小结</strong></p>
		<p>
			三年前接触 Node.js，并且学习和采用，主要原因是因为 Node.js 在解决当今网络应用的问题时，提供了高性能、高可靠和低功耗的方法。高性能、高可靠和低功耗，不是在于 Node.js 做了什么，而是在于 Node.js 不做什么。Node.js 和 Javascript 的概念，在 Java 或者其他开发框架中都能找到对应的概念。但是 Node.js 仅保留了它认为最重要的部分作为 Core Modules，其他都让给了 User Land，这才是高性能、高可靠和低功耗的最本质的保障。</p>
		<p>
			随着 Node.js 这三年的发展，今天使我浸淫其中的理由已经不是之前的那些特点了。</p>
		<p>
			npm 建立了一个&ldquo;人人为我，我为人人&rdquo;社区，无论你是一个入门级的 Noder,还是一个多年的老兵，都在自觉或不自觉地从这个社区吸取营养，也在不断地回馈社区。在使用 npm 的过程中，你会很自然地发现，将自己的应用切割为尽量小的 Modules，发布为公有的 Packages，配上一个简单扼要的 README.md，反而是最有效率的系统架构方式。</p>
		<p>
			Node.js 所遵循的 Unix 设计哲学，又提供了最简单有效的复用规范。简单有效，才会被大家自觉采用，采用得越多，重用的可能性就更大。以<a href="https://github.com/visionmedia/express">Express 4.0</a>&nbsp;( MEAN 架构中的那个 &lsquo;E&rsquo; )为例，这么一个流行的 MVC Web Framework的核心代码只有 2,600 多行（不算测试，中间件和例子，但是包括注释）。</p>
		<p>
			npm 和 github 一起，为今天的软件生产提供了新的生产关系，这也是当前 Node.js 超越其他社区的根本原因。不是单纯的性能，也不仅仅是因为动态语言，甚至不是因为大量熟悉 Javascript 的前端程序员（和后端程序员相比，由于缺少系统性的思维，前端 Javascript 程序员掌握 Node.js 未必有多少优势 ），而是以更加便捷的分享式开发为基础的生产关系实实在在地提升了软件生产力。</p>
		<p>
			<a class="cboxElement" href="/upload/offsite/2014.03.31.bafe8190-1dd2-4574-9793-bc4b2ce51b58\ba83a9da-0812-40ca-873f-5450faa2c3bb.jpg" rel="lightbox[63794]" title="Node.js真的无所不能？那些不适用的应用领域分析 "><img alt="wKioL1MfI32jv8GhAACO4eLR2X0989" class="alignnone size-full wp-image-63796" src="/upload/offsite/2014.03.31.bafe8190-1dd2-4574-9793-bc4b2ce51b58\ba83a9da-0812-40ca-873f-5450faa2c3bb.jpg" /></a><br />
			<strong>Node.js的驾驭能力</strong></p>
		<p>
			如果&ldquo;复杂的后端程序&rdquo; 等于 &ldquo;庞大的继承树&rdquo;，&ldquo;强类型安全&rdquo;，&ldquo;精细的异常定义和处理&rdquo;，那么 Node.js 当然无法驾驭。因为 Node.js 和 Java, .NET 相比，是一颗独立的&ldquo;科技树&rdquo;。原型继承、函数式编程、模块系统、回调&hellip;，这些概念和编程方式对习惯了 Java 以及 .NET 的程序员来说不仅仅是不熟悉，甚至一开始会产生&ldquo;不舒服的&rdquo;感觉。</p>
		<p>
			从我的体验来看（Basic-&gt;C-&gt;VB-&gt;Delphi-&gt;.NET-&gt;Node.js），这种不舒服更多地来 自于之前对严谨的类型系统的信仰。原本所谓的&ldquo;架构师&rdquo;，承担着整个应用或项目的类型系统的建设任务，对任何破坏类型一致性的行为都会自然而然的产生抵触 情绪。要想掌握 Node.js，最好的方法是先从 Java, .NET 这颗&ldquo;科技树&rdquo;上爬下来，清空自己，然后重新爬 Node.js 这棵树。</p>
		<p>
			程序员从 Java, .NET 可以学到面向对象和泛型这些重用手段，而在 Node.js 的世界中，当你接触到大量来自于完全不同背景的程序员所编写的 Packages 的时候，你也会意识到，不是每样东西都是&ldquo;类&rdquo;，重用也不一定都基于继承。虽然有人试图在 Node.js 中克隆之前自己熟悉的类型系统，但是更多的程序员则在不断尝试更优雅、简单的编写方式。在 Node.js 的开发过程中，没有所谓的&ldquo;最佳实践&rdquo;，类似的问题总会有人尝试不同的解决方法。对于一个勤于思考和反思的程序员，这是一个充满乐趣的过程。反之，如果你 的团队是由缺少独立思考或者独立解决问题的程序员组成的，那么 Node.js 确实不适合。你需要用强类型语言搭好一个受限的框架，然后让体力型的队友去填空。</p>
		<p>
			我们公司只有两个程序员，一个负责 iOS 开发，而我负责&ldquo;复杂&rdquo;后端程序和 Web Browser 开发。如果用 Java 或者 .NET 来开发，完成同样的功能需要至少三倍以上的人力。</p>
		<p>
			<strong>Node.js能否统一前后端</strong></p>
		<p>
			完全统一既不可能，也没必要。再说这个所谓的&ldquo;统一&rdquo;与其放到 Node.js 脑袋上，不如送给 Javascript，因为 Javascript 用到的场景太多了。让我们看几个事实：</p>
		<ol>
			<li>
				Node.js 让我们可以用 Javascript 写后台程序</li>
			<li>
				Node.js 让我们写 Web Browser 前端：一方面，可以通过 Grunt 或者其他<span class="wp_keywordlink_affiliate"><a href="http://www.amazon.cn/gp/product/B008AY9XCY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008AY9XCY&amp;linkCode=as2&amp;tag=vastwork-23" rel="nofollow" target="_blank" title="持续集成:软件质量改进和风险降低之道">持续集成</a></span>工具生成可发布的前端静态网站内容（例如:&nbsp;<a href="http://getbootstrap.com/">Bootstrap</a>）; 另一方面，也可以通过&nbsp;<a href="https://github.com/substack/node-browserify">Browserify</a>&nbsp;在前端代码中使用 Node.js 的 Modules，让前后台代码使用统一的代码基（例如：<a href="https://github.com/ded/domready">domready</a>。很多 Node.js 的 Modules 本身就经过了浏览器兼容测试，可以同时运行在两端）。</li>
			<li>
				用 Node.js 开发桌面应用，例如：https://github.com/rogerwang/node-webkit/wiki/List-of-apps- and-companies-using-node-webkit，列出了基于 node-webkit 的桌面应用列表。</li>
			<li>
				即使在性能受限的移动设备中，我们也可以通过 Javascript Binding 将一部分应用逻辑用 Javascript 来实现，而 UI 的渲染还是 Native 的方式。这在很多游戏中已经被采用(http://www.zhihu.com/question/21130385)。只要用到 Javascript，或者说，随着 Javascript 代码基的扩大，npm based 的包管理方式就会通过 Browserify 的方式被慢慢引入。</li>
		</ol>
		<p>
			除了第二个问题提到的那些不适合 Node.js 的地方，其他领域想彻底不碰 Node.js 是很难的。</p>
		<p>
			<a class="cboxElement" href="/upload/offsite/2014.03.31.bafe8190-1dd2-4574-9793-bc4b2ce51b58\586d3863-2d8b-4605-b126-2eb85b7c7244.jpg" rel="lightbox[63794]" title="Node.js真的无所不能？那些不适用的应用领域分析 "><img alt="wKiom1MfI-nBykSQAAAmEFCyvd0535" class="alignnone size-full wp-image-63795" src="/upload/offsite/2014.03.31.bafe8190-1dd2-4574-9793-bc4b2ce51b58\586d3863-2d8b-4605-b126-2eb85b7c7244.jpg" /></a><br />
			<strong>Node.js发展方向</strong></p>
		<p>
			如果你的老板不让你碰 Node.js，你需要让他支付青春损失费。开个玩笑:)</p>
		<p>
			投资在 Node.js 不会吃亏。</p>
		<p>
			基于&nbsp;<a href="https://github.com/substack/node-browserify">Browserify</a>&nbsp;的贡献，前后台一致的代码基正在成为现实（在我的一个项目中已经如此，Web Client 通过 Node.js 的 stream 和后端传递数据 ）。你可以看到在前端使用原本为后台写的Module，或者用写后端程序的方法写前端代码，例如：<a href="https://github.com/ded/domready">domready</a>。浏览器中无需运行一个完整的 Node.js，只要打包好需要的 Modules 下载到浏览器执行即可。</p>
		<p>
			在问题 5 中，大家已经看到 Node.js 在分布式计算领域的应用能力。 在问题 8 中，大家可以看到 Node.js 在客户端开发中所扮演的角色。</p>
		<p>
			传统的数据库这一领域也在发生变化。通用的数据库系统在未来会慢慢&ldquo;失宠&rdquo;，&ldquo;乐高积木&rdquo;化的存储服务会流行起来。Hackers 们围绕着&nbsp;<a href="https://github.com/rvagg/node-levelup">LevelUp</a>构 建自己的存储引擎，从 key/value，到Graph DB；从基于 B 树的一维索引到基于 R-Tree 的多维索引；从能够在浏览器中运行的嵌入数据库到支持成千上万访问者，高可用的数据库系统；从支持两阶段提交的 Transaction 到，到支持实时增量的 Map-Reduce。在我的一个项目中已经开始采用这种方法，为特定的存储和查询需求构建特定的存储服务。这在以前是不可想象的，但是现在，也就是一个 程序员的工作吧。</p>
		<p>
			我是一个自己写程序的&ldquo;产品经理&rdquo;。每年有8个月是集中开发的时间，剩下的时间则是负责产品设计。关注的方向从 Web、Mobile App. 到后端系统。Node.js 给我提供了无数块&ldquo;乐高积木&rdquo;，让我可以拼装自己的玩具，这是很快乐的体验的过程。遗憾的就是时间不够多，有那么多东西没时间去了解，去体会其他人的奇思 妙想。小公司也是对成本极度敏感的，如果没有 Node.js 很多东西连想都不敢想。</p>
		<!-- p><a target="_blank" rel="nofollow" href="http://www.hi-vps.com/?utm_source=jobbole.com"><img src="/upload/offsite/2014.03.31.bafe8190-1dd2-4574-9793-bc4b2ce51b58\05951170-aa7f-4636-89fe-dcf181f91efa.jpg"></img></a></p --></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/nodejs-really-do-anything-analysis-on-those-applications-not-covered-by</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Mon, 31 Mar 2014 11:26:48 GMT</pubDate></item><item><title><![CDATA[NODE.JS为什么会成为企业中的首选技术]]></title><description><![CDATA[<div id="readability-page-1" class="page"><div id="article_content" class=""><p><span>&nbsp; &nbsp; &nbsp; &nbsp; 在过去的 18 个月，NODE.JS 的使用率呈指数级的增长，它让诸如 Voxer（www.voxer.com）、Yammer（www.yammer.com）这样的创新者向给予 NODE.JS 信任让其成为主流的早期拥戴者们靠拢。电子商务巨头沃尔玛（www.walmart.com）和贝宝（www.paypal.com）在 NODE.JS 上下了很大的赌注，而世界上最受欢迎的<a href="http://www.html5cn.org/portal.php?mod=list&amp;catid=9" target="_blank" class="relatedlink">新闻</a>阅读刊物——邮件在线（www.dailymail.co.uk）已经在<a href="http://www.html5cn.org/portal.php?mod=list&amp;catid=20" target="_blank" class="relatedlink">应用</a> NODE.JS 了，网飞公司目前也正在将 NODE.JS 应用于项目中（http://www.infoworld.com/t/javascript/paypal-and-netflix-cozy-nodejs-237593&nbsp;）。</span></p><p><span>　　<strong>让我们先看看商业效益吧：</strong></span></p><p><span>　　<strong>快速创新及交付</strong></span></p><p><span>　　在日益加剧的互联网公司的竞争中，项目的交付速度和产品的二次利用能力是这个行业市场领导者的物质。在这样的竞争情况下，关注终端用户的需求并将用户反馈的需求集中处理好且提供给他们使用，同时进行定期的维护和更新是至关重要的。</span></p><p><span>　　<strong>开发人员的福音</strong></span></p><p><span>　　近几年来，雇用一个顶尖人才是极其困难的；优秀的开发人员都喜欢学习一些新鲜事物，用新技术。让开发人员在公司快乐工作的问题决不可忽视，快乐并充满激情的开发人员能开发更好的软件，将更多的激情投入到工作的人是快乐的。</span></p><p><span>　　Bill&nbsp;Scott 曾经给我们讲过一个能在 fackbook 和 paypal 之间选择一个公司任职的新员工的故事。面对相同的 offer 和薪水，开发人员作出了他的选择。且说了如下的话：</span></p><p><span>　　“<strong>能去 paypal 用 NODE.JS 做开发，干嘛还去 fackbook 做 PHP 开发呢！</strong>”</span></p><p><span>　　<strong>更容易引用和留住人才</strong></span></p><p><span>　　没错，JAVA 可以用来开发任何东西。但优秀的开发人员喜欢用新鲜有趣的技术，他们喜欢用能快速、简单实现需求的技术来开发，这也是事实！</span></p><p><span><img alt="" src="/upload/offsite/2014.03.31.e6e3dbaf-ed9a-4a1a-9a31-4db1785066c1\e77bf7b7-2d14-4877-915f-05931bd1dbc5.png"></span></p><p><span>　　<strong>高性能</strong></span></p><p><span>　　Paypal 报道称：NODE.JS 每秒能承受 2 倍的访问量，且能减少 35% 或 200 毫秒的响应时间。</span></p><p><span>　　2013 年，沃尔玛实验室运行了一个用 NODE.JS 写的缓冲器。在一个“黑色星期五”（一年中最忙的时期）中他们用 NODE.JS 将所有的移动流量放入到缓冲器中。</span></p><p><span>　　他们的团队在沃尔玛实验室中用“#nodebf&nbsp;tag 展现 NODE.JS 应用的性能”这一 twitter 话题实时报道了这一过程。在这个“黑色星期五”，沃尔玛服务的 CPU 使用率没有超过1%，而且开发团队在 200，000，000 用户在线的情况下部署了 NODE.JS 应用。</span></p><p><span><img alt="" src="/upload/offsite/2014.03.31.e6e3dbaf-ed9a-4a1a-9a31-4db1785066c1\8b16546a-a96d-460e-aa1c-91fe60fe6012.png"></span></p><p><span><img alt="" src="/upload/offsite/2014.03.31.e6e3dbaf-ed9a-4a1a-9a31-4db1785066c1\bbf12dd3-bacc-4880-866a-a9781e453586.png"></span></p><p><span>　　同样的，Groupon（高朋团购）用 NODE.JS 重新部署他们系统后，页面的加载时间下降了 50% 这么多。</span></p><p><span>　　Linkedin（领英）将他们的移动流量从 Rails 转移到 NODE.JS 的老故事也能说明高性能这一问题。转移之后，服务数由原来的 30 个降到 3 个（下降了 90%），且转移后系统的速度比原来快 20 倍。</span></p><p><span>　　<strong>易于修改和维护</strong></span></p><p><span>　　由于一些约定随着 Node 不断成熟，用 NODE.JS 来开发一些新的服务将变得简单。用 Node 的方式来写程序意味着这些程序是一些由管道连接成的小模块构成的。加班时间写的传统独立应用程序变得很僵便，难以适合和添加新的需求。最终传统应用程序被一些它们没有完成的需求给压得喘不过气。</span></p><p><span>　　用 NODE.JS,&nbsp;程序将被分解成许多小模块而不是一个大程序。在更改需求和新增需求时，不用更改代码结构就能完成。</span></p><p><span>　　<strong>开发效率高</strong></span></p><p><span>　　NODE.JS 程序是由 JavaScript 语言写的。这意味着，前端开发者与后端开发者之间的不和谐问题被解决了，且在开发进程中这有着显著的效果。用 NODE.JS，能够将前端开发与后台开发小组合并成一个团队，这对于很多方面都有很大的好处。通过减少各开发部门之前的依赖，NODE.JS 为全栈开发者提供了更多的机会。NODE.JS 同样拥有一个出色的软件包管理系统——NPM，这是 JavaScript 的第一个软件包管理系统，能很好的处理依赖管理。NPM 能有效的避免经验性的依赖。通过 NODE.JS 包管理器，NODE 同样拥有一个充满活力的用户系统和大量可用的模块（超过 60,000 个，且在快速增长）。</span></p><p><span>　　贝宝（paypal）测算过，使用 NODE.JS,开发人员的效率能提高 2 倍。与 JAVA 相比，一半的开发人员就能交付一个应用，且花的时间还更少。</span></p><p><span>　　<strong>NODE.JS 的前途大好</strong></span></p><p><span>　　Eran&nbsp;Hammer 在 NodeDay（www.nodeday.com）上宣布，到 2014 年底沃尔玛计划将 NODE.JS 应用于旗下所有的电子商务中。</span></p><p><span>　　贝宝（paypal）将 NODE.JS 技术延伸至其所有的 Web 应用，且 2 年内 NODE.JS 将在所有应用中铺开。</span></p><p><span>　　尽管谷歌没有公然地宣布他们使用 NODE.JS，但有证据表明他们在使用 NODE.JS，linkedin（领英）上一个简单的搜索表明，200 名谷歌的人在其个人简历上标注着在使用 NODE.JS。</span></p><p><span>　　VentureBeat 上的一篇文章：“谷歌人很显然在做 NODE.JS 项目——可能即使在不久的将来发布了应用，他们也不打算在公众面前说他们在用 NODE.JS”。</span></p><p><span>　　雅虎在 NODE.JS 上还有很长的路要走，目前有 200 个开发人员在全职的开发 800 个公共模块和 500 个私有模块。</span></p><p><span>　　诸如网飞和其它一些公司加入到 NODE.JS 中表明，目前还会有很多人加入到这个领域中。</span></p><p><span>　　<strong>NODE.JS 的应用领域</strong></span></p><ul><li><span>物联网</span></li><li><span>电子商务</span></li><li><span>支付处理</span></li><li><span>社会媒体</span></li><li><span>实时服务</span></li><li><span>新闻传媒</span></li><li><span>企业级 Web 应用</span></li></ul><p><span>　　让我们一起将 NODE.JS 应用到更多领域吧！</span></p><p><span>　　<strong>如果使用 NODE.JS，我们公司将会变成这样：</strong></span></p><ul><li><span>用一半的开发者来开发应用</span></li><li><span>给用户服务时，降低必要的服务进程</span></li><li><span>降低 50% 的页面加载时间</span></li><li><span>在知名公司（如 facebook）前招到顶尖开发人才</span></li><li><span>让用户更开心</span></li><li><span>让开发人员更开心</span></li><li><span>能长久留住职员</span></li></ul><p><span>　　答案是很简单的，问题在于企业能否以一种严肃的方式狂热于 NODE.JS，而不是深思熟虑。</span></p></div></div>]]></description><link>http://zackyang.com/post/node-why-js-would-become-the-technology-of-choice</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Mon, 31 Mar 2014 11:26:46 GMT</pubDate></item><item><title><![CDATA[LinkedIn缘何抛弃Ruby，转投NodeJS怀抱]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="article_content">
		<p>
			<span>&nbsp; &nbsp; &nbsp; &nbsp;记得在2012年10月份的时候，鉴于性能和可扩展性方面的原因，LinkedIn将其移动设施的后台Ruby on Rails替换成了Node.js。那么为什么要做出这样的决策，Node.js又比Ruby强在哪里呢？下面一起来为你解答。&nbsp;</span></p>
		<div>
			<span>&nbsp; &nbsp; &nbsp; &nbsp; Node.js&mdash;&mdash;基于JavaScript的服务器端软件平台，它的作用主要是用于构建可伸缩的网络<a class="relatedlink" href="http://www.html5cn.org/portal.php?mod=list&amp;catid=20" target="_blank">应用</a>程序，在过去的几年里它已经风靡于全球众多开发商。Node.js使用一个事件驱动的、非阻塞I/O模型，这使得它的体积更小、效果更佳，适合运行在分布式设备里实时数据密集型的应用程序上。正是由于这些强大的优势，才吸引了大量的<a class="relatedlink" href="http://www.html5cn.org" target="_blank">网站</a>迁移到Node.js平台。其中就包括LinkedIn。&nbsp;</span></div>
		<div>
			<p>
				<span><img src="/upload/offsite/2014.03.31.f0d3548a-4735-4b85-8f82-d9c04f0d7076\2648c391-b96b-44cd-9790-e6d71ffe09d2.jpg" /></span></p>
			<p>
				<span>&nbsp; &nbsp; &nbsp; &nbsp;LinkedIn最初是建立在Ruby平台上，包括6万行代码，但是在2011年下半年的时候，LinkedIn开始利用Node.js来重建他们的核心移动服务，旨在提高它的服务性能。与此同时，重建过程也是一项简化过程，最终将代码缩减到2千行。你可能会问：为什么LinkedIn选择Node.js？主持这项任务的项目负责人Kiran Prasad给出了一些原因。Node.js之所以最后被选中，是因为它提供了一些好处：&nbsp;</span></p>
			<p>
				<span>更高的性能，在特定场景下Node.js能比Rails快20倍。</span></p>
			<p>
				<span>使用3个服务器而不是30个就能应对10倍的流量增长。</span></p>
			<p>
				<span>前端工程师能够进行后端代码的开发，两个团队实际上合二为一了。</span></p>
			<p>
				<span>下面一一做出详细解释：&nbsp;</span></p>
			<p>
				<span>&nbsp; &nbsp; &nbsp; &nbsp;代码减少的最大原因是我们当前代码库实质上是framework-free，这意味着原来的代码里有很多是冗余的，应该被去掉。&nbsp;</span></p>
			<p>
				<span>&nbsp; &nbsp; &nbsp; &nbsp;第二个原因主要是和LinkedIn现在正在采用的函数式编程有关，这跟面向对象的实现途径截然不同，不过后来证明函数式编程对于LinkedIn来说是一个重要的转变。在Ruby平台中，最常见的方式是创建一个可以封装每一个通信和类型的对象。Ruby实际上是一种函数式语言，但是它有一个比JavaScript更强大的类和对象的概念。所以在早期的代码库里，开发者有很多抽象层和对象层，而这些抽象层和对象层是在更大的组件化、可分解化和可重用性的前提下创建的。不过现在回想起来，那时候的这些动作都是多余的。&nbsp;</span></p>
			<p>
				<span>&nbsp; &nbsp; &nbsp; &nbsp;另一个减少代码的重要原因是MVC（model- view-controller）模型背后的动力，至少MVC模型可以在移动设备和Web基础系统之间能够做出更好的选择。在此之前，LinkedIn有很多服务器端呈现，现在随着模板和视图不断地向客户端转移，因此导致大量的呈现代码是多余的，缩减代码是必不可少的。之后出现的情况就是人们对后端技术的信任和依赖程度不断的加重，许多先进的东西也慢慢的出现了。这就意味着没必要像之前那样使用巨大的代码块了。&nbsp;</span></p>
			<p>
				<span>&nbsp; &nbsp; &nbsp; &nbsp;中国拥有一个网民数量庞大的网络市场，LinkedIn在中国无疑会获得巨大的利润。但是LinkedIn紧随其后的问题是如何应对当前技术架构上的挑战。不过，LinkedIn迁移到Node.js将会一直保持之前的良好表现，并且在扩大市场的前提下将会更加的从容。&nbsp;</span></p>
			<p>
				<span><span>英文原文：</span><a href="http://www.pixelstech.net/article/1395463142-Why-does-LinkedIn-migrate-to-NodeJS-from-Ruby-" target="_blank">Pixelstech</a></span></p>
		</div>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/why-linkedin-abandoning-ruby-switch-to-nodejs-arms</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Mon, 31 Mar 2014 11:25:20 GMT</pubDate></item><item><title><![CDATA[PayPal 为什么从 Java 迁移到 Node.js：性能提高一倍，文件代码减少44%]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div data-id="1190000000359561" id="a-1190000000359561">
		<!-- --
        <ul class="article-meta">
            <li>类型：外文翻译</li>
            <li>来源：<a href="##" target="_blank">StackExchange</a></li>
            <li>发布于 2013年12月13日</li>
            <li>2.2k 次浏览</li>
        </ul>
        <!-- -->
		<article class="fmt">
			<p>
				大家都知道 PayPal 是另一家迁移到 Node.js 平台的大型公司，Jeff Harrell 的这篇博文 <a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/" rel="nofollow" target="_blank">Node.js at PayPal</a> 解释了为什么从Java迁移出来的原因：开发效率提高一倍（2个人用更少的时间干了5个人的活），性能提高一倍，代码量减少33%, 文件减少40%。</p>
			<p>
				（小编：个人认为深层次原因是 Java 正在越来越走向封闭，而且变得越来越复杂而且 oracle 正在对 Java 收费，参见：<a href="http://www.infoq.com/cn/news/2010/11/oracle-to-release-two-jvms" rel="nofollow" target="_blank">Oracle 计划发布收费版 JVM</a>，这促使了越来越多的公司加入了去Java化的队伍）</p>
			<p>
				外面有很多人说PayPal正在迁移到node.js平台。我很高兴地在这里宣布，传言是真的，我们正在从Java迁移至node.js。</p>
			<p>
				由于历史原因，我们的工程师一直分为两拨人，一拨在浏览器上写代码（HTML,CSS,JavaScript）；另一拨用 Java 写应用层的代码。想象一下，一个写 HTML 的不得不去叫一个写 Java 将 A/B 两个页面链接到一起吗？我们正在这样干，我们称这样的人为全端工程师，那些即可以设计精美界面和服务器后台的那些人。现在前后端已经没有界限了，这曾经是阻碍PayPal发现的一个很大的瓶颈。</p>
			<p>
				Node.js 帮助我们将前、后端合二为一，现在我们一个全端团队即可解决用户的所有问题。</p>
			<h3>
				早期采纳</h3>
			<p>
				像其他人一样，我们刚开始使用 node.js 做了一些 demo 用的原型程序。跟很多人一样，她表现出来的超高性能，让我们最终决定把她放到线上去。</p>
			<p>
				我们最初使用 express 来路由请求，nconf 用来配置，grunt 用来创建 tasks。Express 非常普及，但是我们发现 Express 在多个团队协作时表现出的可伸缩性不足，它并不适合所有场合。Expres 非常灵活，但在大型团队开发上的可扩展性不佳。最终我们的队员基于原生的node.js，并创建了<a href="http://segmentfault.com/a/1190000000345656" rel="nofollow" target="_blank">Karken.js</a>；她并不是一个框架，更像是一个规范，但相对于 express，她更适合大型团队的扩展。我们希望我们的工程师专注他们的应用，而不是专注他们的运行环境。</p>
			<p>
				我们已经在内部使用 kraken.js 好几个月了（我们马上会把他开源的！）我们的工程师非常渴望这个内部框架能尽快上线。</p>
			<p>
				（小编：预测 karken.js 即将是，另一个超火的后端框架，火热程度参考 twitter 的 bootstrap ）</p>
			<h3>
				将 node.js 布署到线上</h3>
			<p>
				我们第一个采用 nodejs 的产品不是一个小的应用；是我们的浏览量最多的用户首页。我们希望步子迈得大一点，但是我们清楚知道其中的风险，所以我们同时还并行地运行了一个 Java 的程序。我们在开发和扩展 Java 方面非常有经验。所以一旦 node.js 应用出问题了，我们可以立即切回 Java。不过，同时我们也发现了一些非常有意思的数据。</p>
			<h3>
				开发</h3>
			<p>
				从1月份开始，我们花了几个月的时间来搭建 node.js 的基础设施。比如：sessions（会话），centralized logging(集中日志)，keystores(存储)。在这期间我们有5位 Java 工程师在开发 Java。在开发了两个月后，两位工程师开始开发 node.js 应用。在6月初两个团队的开发进度已经一样了，两者的功能完全一样。开发 node.js 应用的那个小团队，尽管推迟了两个月，但是很快赶上了。这里我们对这些相同功能做的一些单元测试得出的结果：</p>
			<p>
				Node.js的是：</p>
			<p>
				更少的人开发的 node.js 应用比 Java 的快一倍；<br />
				节省了33%的代码量；<br />
				少了40的文件；</p>
			<p>
				（小编，这里作者的意思并不是 Java 程序员的素质没有 node.js 的好，Java 语言的特点决定她需要更多的人，更多的时间，更多的代码去完成在 node.js 下的同样的工作，并且吃力不讨好。参考：<a href="http://ourjs.com/detail/528b2d6ab5cbfd990b000002" rel="nofollow" target="_blank">他们为什么说面向对象有问题,探讨面向对象的一些缺陷</a> ；性能测评：<a href="http://ourjs.com/detail/52726d92031db63703000001" rel="nofollow" target="_blank">Node.JS 比 Java EE 快 20%</a> ）</p>
			<p>
				这是一个非常鼓舞人的证据，我们似乎应该更快地迁移到 JavaScript 平台上去。我们立即做了一个决定，暂停 Java 应用的开发，全心全意开发 JavaScript 应用。这对开发 Java 项目的工程师来说是个好消息，他们已经消除了对 node.js 的疑虑，非常高兴地投入到了并行的 node.js开发上来，这样我们的开发效率提高了两倍。</p>
			<h3>
				性能</h3>
			<p>
				性能是一个非常有意思和具有争议性的话题。在我们这，我们有两个平台实现完全一样功能的程序；一个是使用基于 Spring 的内部 Java 框架；另一个是基于 kraken.js，express，dust.js 和其他开源框架。 这些程序包含三个 API，每个 API 来响应 2 到 5 个请求，由Dust 来模拟获取数据和显示页面。</p>
			<p>
				我们用线上的环境去测试这两个应用，并收集了完成响应的时间和请求数。</p>
			<h4>
				node.js vs Java 性能对比</h4>
			<p>
				在这张图上你可以看到 node.js 应用的优势：<br />
				<a href="http://segmentfault.com/img/bVbFHu/view" target="_blank" title="点击查看原图"><img alt="Node.js vs Java performance graph" src="http://segmentfault.com/img/bVbFHu" /></a></p>
			<p>
				每秒请求数量是Java的两倍。不过更有意思的是我们仅使用了单核的node去跟5核的Java来对比，我们非常希望将来继承扩大 node.js 的优势。<br />
				渲染相同的页面，node.js 节省了35%的时间。即每个页面节约了 200 豪秒，用户可以清楚地感觉到这样的区别。</p>
			<h3>
				未来</h3>
			<p>
				我们将继续使用 node.js 来构建我们的Web应用。像我们正在开发的那些门户，和已经上线的用户概览页面。还有一打正在进入 Beta 测试的那些工程，我们会继续分享我们在上线过程中的经验，数据。对于 PayPal 来说这是一个另人激动的时刻。</p>
		</article>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/paypal-why-migrating-from-java-to-nodejs</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Mon, 31 Mar 2014 11:24:14 GMT</pubDate></item><item><title><![CDATA[攻下女生路由器之后 我都做了什么]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			路由器被蹭网后，我有被黑的风险吗？其实这个问题可以理解为：蹭网之后，能做些什么？</p>
		<p>
			不少人的八卦心窥探欲还是很强烈的，强烈到让人恐惧。所以很多人喜欢看一些八卦文章，比如：如何优雅的窥探别人？</p>
		<p>
			通常这样的文章很容易火起来，因为不少人都喜欢看而且百看不厌。</p>
		<p>
			最近路由安全沸沸扬扬，可以翻阅我微信公众号历史文章查看关于路由安全的文章以及央视当时的采访。<strong>鉴于天时地利人和，最后我成功的在现实生活中上演了这样一场精彩好戏，为了满足众人的欲望，我就写成故事</strong>。大家好好琢磨琢磨蹭网之后，我们还能做些什么？</p>
		<p>
			声明：<strong> 这是一个虚构故事，图片均加万恶马赛克。</strong></p>
		<p>
			记忆中隔壁是一个还算不错的妹子，那天Z来找我的时候恰巧碰到了，进屋后跑到我耳边说：&ldquo;隔壁那个妹子你能不能要到微信，我觉得挺不错的呢~&rdquo;</p>
		<p>
			这么三俗的场景竟然发生在我的身边，我说等两天我给你消息。</p>
		<p>
			<strong>入口</strong></p>
		<p>
			既然是住在隔壁的年轻人，必然不可缺少的就是路由器，于是我打算从路由器当做入口开始这次旅程，将 Wi-Fi 打开后发现了三个信号，我首先选择这个名字非常独特的路由：** LOVE **</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\adedf6ef-0c65-4fa6-9cef-6535fc950772.jpg" twffan="done" /></p>
		<p>
			根据名字** LOVE **可大概看出两个人名，应该是男朋友，想到这心里为Z君凉了一半。</p>
		<p>
			找到疑似对方入口的地方就好说了，翻出minidwep（一款linux下破解Wi-Fi密码的工具）导入部分密码字典，开始进行爆破。因对方使用 WPA2 加密方式，所以只能使用暴力破解方式进入，WEP则目前可以直接破解密码，所以破解WPA2加密方式的路由基本上成功率取决于黑客手中字典的大小。</p>
		<p>
			喝了杯咖啡回来，发现密码已经出来了：198707**，于是愉快的连接了进去。</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\46c29b2a-cd03-418b-bf3d-0f2a8607fe0b.jpg" twffan="done" /></p>
		<p>
			<strong>困难</strong></p>
		<p>
			成功连接到对方路由后，下面我需要做的就是连接路由的WEB管理界面（进入 WEB 路由管理界面后便可以将路由 DNS 篡改、查看 DHCP 客户端连接设备以及各种功能）。</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\bd8246f9-74ff-43b3-956b-71e727afa1cd.jpg" twffan="done" /></p>
		<p>
			查看网段后开始访问路由器WEB管理界面，发现女神竟然机智的修改了默认登录帐号密码。</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\6599c704-70da-42a5-b835-d529f13056b0.jpg" twffan="done" /></p>
		<p>
			TP-LINK W89841N，通过路由设备漏洞进入失败后，想必只能使用暴力美学了。</p>
		<p>
			通过抓取登录路由器的请求，然后遍历帐号密码发送请求查看返回数据包大小则判断是否登录成功，抓到的GET请求如下：</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\8a63898f-ab60-4ee7-9583-5989b7a7fd6e.jpg" twffan="done" /></p>
		<p>
			其中：Authorization: Basic YWRtaW46YWRtaW4= 为登录的帐号密码</p>
		<p>
			使用Base64解密开查看内容：admin:admin</p>
		<p>
			于是我编写了一个python脚本将字典中的密码与&ldquo;admin:&rdquo;进行组合然后进行base64加密，进行破解。十一点的钟声响起，发现密码已经成功爆破出来，成功登录：</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\5415ee6e-c38e-43a0-9adc-525f398b9d8b.jpg" twffan="done" /></p>
		<p>
			查看设备连接列表，发现只有孤零零的自己，看来女神早已歇息，等待时机。</p>
		<p>
			<strong>时机</strong></p>
		<p>
			第二天晚饭过后，登录路由管理界面，这时已经有好几个设备了，时机到了：</p>
		<p>
			<strong>客户端名</strong></p>
		<p>
			android-b459ce5294bd721f</p>
		<p>
			android-44688379be6b9139</p>
		<p>
			**********iPhone</p>
		<p>
			******-iPad</p>
		<p>
			******-PC</p>
		<p>
			我统计了一下，设备为两个安卓设备、一部iPhone、一个iPad、一台个人PC。</p>
		<p>
			从iPhone\iPad\pc命名来看，我开始的猜测没错，** 确实是路由主人的名字，直觉告诉我非常大的可能这个路由的主人就是Z所心仪的女神。</p>
		<p>
			首先测试两台安卓设备，发现其中一台开放端口很多，隐隐约约中感觉是一台小米盒子或者百度影棒这种产品，这样事情就变得有趣了，因为控制电视可就有机会了。</p>
		<p>
			使用 ARP 嗅探安卓开放端口较多的设备，果然是一个影视盒子：</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\53becf93-43ac-4872-9a58-43ea3d17a02a.jpg" twffan="done" /></p>
		<p>
			最后基本摸清：电视使用影视盒子，iPhone，iPad 以及一台个人电脑。</p>
		<p>
			<strong>寻找</strong></p>
		<p>
			找到了那么多有趣的东西，但我仍然没有忘记Z让我帮忙的事情，于是便开始对iPhone进行了嗅探。</p>
		<p>
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\62683d3b-d4af-4047-ac62-81d6a600b73a.jpg" twffan="done" /></p>
		<p>
			嗅探不一会便找到了有趣的东西，女神的照片在她查看自己相册的时候已经被嗅探到，于是我将照片发给了Z，他已经激动的语无伦次了。</p>
		<p>
			之后我仍然在等待机会，寻找到对方的微信以便我完成Z的愿望，希望出现了。</p>
		<p>
			查看流量日志的时候我发现她在刷新浪微博，于是根据URL很方便的找到了微博：</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\f492b0a9-4bff-420f-b020-13396daed34f.jpg" twffan="done" /></p>
		<p>
			看到生日让我想起了Wi-Fi连接密码，原来是她的出生日期，心想把微信找到就可以让Z安心了。</p>
		<p>
			通过女神新浪微博个性化域名地址和获取到信息加以组合，开始猜测微信帐号，很快便搞定了：</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\c65fd293-cc90-4407-be91-e88b69566e49.jpg" twffan="done" /></p>
		<p>
			将Z的心愿完成后，回过头发现还有很多有趣的事情没做，怎能轻易结束。</p>
		<p>
			<strong>电视</strong></p>
		<p>
			随着时代的进步科技的发展，互联网逐渐到了物联网层度，从电视使用各种智能盒子便可以看出。影视盒子通常为了方便调试而开启远程调试端口，<strong>盒子究竟安全吗？</strong></p>
		<p>
			去年腾讯安全送的小米盒子让我有幸好好研究一番，扫描端口后发现各种各样的端口大开，其中最有趣的就是5555端口（adb远程调试），使用adb connect ip直接可连接设备进行远程调试。</p>
		<p>
			虽然是Z的女神，但是我想也可以调侃一番，于是我随手写了一个安卓APK程序。</p>
		<p>
			adb远程连接到盒子，然后adb install远程安装apk，最后使用am start -n ***进行远程启动。</p>
		<p>
			我本地使用Genymotion建立android模拟器进行测试：</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\78c5db69-4470-4905-9802-45acfa4c53f8.jpg" twffan="done" /></p>
		<p>
			当输入am stat - n *** 敲击回车的那一刹那，脑海中曾想象过千万种女神的表情。</p>
		<p>
			但我始终没有忍下心来给电视播放<strong>爱情动作片</strong>。</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\efad884b-5abd-46ac-b59d-fed202b558fe.jpg" twffan="done" /></p>
		<p>
			<strong>账户</strong></p>
		<p>
			微博、人人、淘宝等等凡是登录过后的帐号全部劫持，通过劫持后的帐号又能看到许多表面看不到的东西。</p>
		<p>
			于是理所当然的账户全部被劫持掉了，当然我并没有去翻阅什么东西，<strong>窥探欲早已麻痹</strong>。</p>
		<p>
			<strong>联系</strong></p>
		<p>
			我想是时候做一个结束了，当然故事过程中还有很多有趣而又精彩的东西实在无法用言语来表达。</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\21901f31-0b93-451f-a917-70c6f13ad45f.jpg" twffan="done" /></p>
		<p>
			于是我没有恶意的拿她的微博发了一条消息：hey,test</p>
		<p>
			通过MITM中间人我又向网页中注入了javascript，大概是这样的：alert(/ 早点休息，QQ:***/)；</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\ae94b6b2-4b26-4a08-8a70-cef7acec2923.jpg" twffan="done" /></p>
		<p>
			当然这个QQ是我为了取得对方最后联系而注册的：</p>
		<p align="center">
			<img alt="攻下女生路由器之后 我都做了什么" src="/upload/offsite/2014.03.19.59220e2b-84d6-4e60-aa7d-298acf8a551c\7f931be0-029a-446c-b0a7-fa8a73ba48c9.jpg" twffan="done" /></p>
		<p>
			追溯源头，其实无非就是很常见的蹭网，连接Wi-Fi之后设备处于同一个局域网中，于是才能做出那么多有趣的事情，上面这个故事中我未曾有过恶意以及DNS劫持，那么我通过路由究竟控制或者得到了哪些信息：</p>
		<p>
			&mdash; 微博</p>
		<p>
			&mdash; 微信</p>
		<p>
			&mdash; 人人网</p>
		<p>
			&mdash; QQ 号码</p>
		<p>
			&mdash; 手机号（淘宝获取）</p>
		<p>
			&mdash; 照片</p>
		<p>
			&mdash; 电视</p>
		<p>
			&mdash; More</p>
		<p>
			常说不要连接陌生公开Wi-Fi，有点儿安全意识。不是没办法黑你，只是你没有被黑的价值。</p>
		<p>
			但是人们总是毫不在意，常说我本来就没啥价值。这样放弃治疗的人令你头疼。</p>
		<p>
			<strong>防御</strong></p>
		<p>
			作为小白用户，下面几点做到的越多，你就越安全：</p>
		<p>
			1、路由器连接密码要复杂一点，比如 testak47521test 要比 ak47521 好很多</p>
		<p>
			2、赶紧把路由器管理后台的帐号和密码改掉。90%的懒人还在admin admin</p>
		<p>
			3、不要告诉不可信人员你的Wi-Fi密码。</p>
		<p>
			4、移动设备不要越狱不要ROOT，ROOT/ 越狱后的设备等于公交车随便上</p>
		<p>
			5、常登陆路由器管理后台，看看有没有连接不认识的设备连入了Wi-Fi，有的话断开并封掉 Mac 地址。封完以后马上修改Wi-Fi密码和路由器后台帐号密码。</p>
		<p>
			6、More</p>
		<p>
			上面这些方法都搜索的到，防御ARP劫持嗅探很简单，电脑上装个杀软基本就差不多，被攻击劫持时候会弹出警告，但是人们却丝毫不当回事儿，出现弹框就把杀软给关掉了，继续上网冲浪。</p>
		<p>
			至于手机上的杀软，还真没啥用，劫持嗅探样样不拦截。</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/take-girls-to-the-router-and-then-i-did-something</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Wed, 19 Mar 2014 00:38:10 GMT</pubDate></item><item><title><![CDATA[眼见为实？特克斯勒消逝效应来说话]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-5676">
		<!--BEGIN .content-->
		<div class="content">
			<div class="post-title">
				<div class="post-info">
					特克斯勒消逝效应（Troxler&rsquo;s fading）是瑞士物理学家特克斯勒1804年发现的，他指出，当一个人的目光聚焦在某个固定点上20秒或者更长时间之后，在该固定点周围，也就是在观察者余光中的其他视觉刺激源将会在观察者的视野中慢慢淡化直至最后消失。</div>
			</div>
			<div class="post-excerpt">
				<p>
					特克斯勒消逝效应是建立在神经具有适应性（adaptation）的基础上的。神经适应性是指人的感觉系统对外界的持续刺激不是恒定不变的，而是有一种适应刺激的过程。比如对触觉来说，我们穿衣服的时候，一开始会感觉到皮肤与衣服的接触，但过几秒钟这种感觉就被切断了。如果不是刻意去感受，人们往往很难意识到皮肤与衣服之间在接触，在摩擦。适应性使得这种对人意义不大的信息被屏蔽了，可能为了使人更加专著于其他事情。因为神经系统每天工作繁忙，不仅要实时监控生理指标，指挥人体内外部运动，还要从各种感觉那里收集海量信息加以分析，如果完全不加筛选可能就累垮了。这种适应性使神经系统忽略它认为不重要的信息，比如这种持续不变的刺激，而更好地对外界变化的信息随时保持反应。</p>
				<p>
					回到特克斯勒消逝效应上来，当我们盯着图中的某点时，视觉刺激始终没有变化（其实眼球也有小的运动，但因为视觉感受野面积大，盯着某处可以认为刺激不变），神经系统就认为这是不重要的信息，自动把固定点和周围的信息都给屏蔽了。</p>
				<p>
					以下面的这张图为例：盯在图片中间或者把鼠标移到图片的中间，然后盯着鼠标，放松，很快就会看到消失了。一开始可能会看到部分消失，逐渐全部消失。</p>
				<p>
					<a href="/upload/offsite/2014.02.27.a668f233-3f84-4ed6-8a5b-1492a793f0e9\f4056299-130e-4f1d-860b-b05fcd4f0e4d.jpg"><img alt="troxlers" class="alignnone size-full wp-image-5678" height="609" src="/upload/offsite/2014.02.27.a668f233-3f84-4ed6-8a5b-1492a793f0e9\f4056299-130e-4f1d-860b-b05fcd4f0e4d.jpg" width="485" /></a></p>
				<p>
					为什么这张图看上去这么怪异？因为特克斯勒消逝效应在较小的刺激，如低对比度、模糊不清的情况下更明显，更容易观察到。那为什么平时生活中不会观察到这个现象？因为我们的眼睛总在无意识地四处扫，眼球也一直保持无意识的运动，以避免持续刺激带来的信号忽略。而且，平时生活中的视觉刺激一般都是清晰的、高对比度的，这种情况下特克斯勒消逝效应并不明显。更重要的是，上面那张图其实是无效的视觉信息输入，平时生活中我们盯着看的大多是重要的信息，神经系统关注还来不及，不会想着去屏蔽。盗用惊天魔盗团里的一句话：come in close,closer,because the more you think you see,the easier it&rsquo;ll be to fool you.</p>
				<p>
					要是还是看不到消失的话，可以再试试下面的图片，盯着中央十字，你会会先看到粉红圆圈依次闪烁，然后看到一个青色的球在绕圈，最后粉红圆圈全部消失。</p>
				<p>
					<a href="/upload/offsite/2014.02.27.a668f233-3f84-4ed6-8a5b-1492a793f0e9\8c022cf0-2373-48a4-8a11-bd482e3f0669.gif"><img alt="Lilac-Chaser" class="alignnone size-full wp-image-5677" height="420" src="/upload/offsite/2014.02.27.a668f233-3f84-4ed6-8a5b-1492a793f0e9\8c022cf0-2373-48a4-8a11-bd482e3f0669.gif" width="420" /></a></p>
			</div>
			<!--END .content--></div>
		<div class="content">
			<p>
				&nbsp;</p>
		</div>
		<!--END .box--></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/seeing-is-believing-texler-fading-effects-do-the-talking</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 27 Feb 2014 01:31:29 GMT</pubDate></item><item><title><![CDATA[Flickr的架构学习]]></title><description><![CDATA[<div id="readability-page-1" class="page"><div class=""><p>Flickr.com 是最初由Ludicorp公司开发设计并于2004年2月正式发布的，2007年11月，Flickr迎来了第20亿张照片，一年后，这个数字就达到了30亿，并且还 在以加速度增长。 2005年3月，雅虎公司以3千500万美元收购了Ludicorp公司和Flickr.com。</p><p>在讨论Flickr 网站架构之前，让我们先来看一组统计数据（数据来源：April 2007 MySQL Conf and Expo和Flickr网站）</p><ul>
<li>每天多达40亿次的查询请求</li>
<li>squid总计约有3500万张照片（硬盘+内存）</li>
<li>squid内存中约有200万张照片</li>
<li>总计有大约4亿7000万张照片，每张图片又生成不同尺寸大小的4－5份图片</li>
<li>每秒38000次Memcached请求 (Memcached总共存储了1200万对象)</li>
<li>超过2PB 存储，其中数据库12TB(星期天要消费~1.5TB)</li>
<li>每天新增图片超过 40万（周日峰值超过200万，约1.5TB)</li>
<li>超过8百50万注册用户</li>
<li>超过1千万的唯一标签（tags)</li>
<li>响应4万个照片访问请求</li>
<li>处理10万个缓存操作</li>
<li>运行13万个数据库查询</li>
</ul><p>2009年Flickr 的数据相比2007的时候又有了显著的增长：</p><ul>
<li>24 TB 的 MySQL 数据</li>
<li>每秒钟 MySQL 有 3.2 万次写操作</li>
<li>每秒钟 MySQL 有 12万次读操作</li>
<li>图片容量 6PB</li>
<li>每天要用掉 10TB 存储</li>
<li>超过 15000 个服务监控点</li>
</ul><p>以下内容是网上信息的拼凑，由于相关的信息比较早，所以有些信息可能已经过期了。</p><p><b>Flickr用到的技术：</b></p><ul>
<li>PHP App Servers<br>－ 运行REDHAT LINUX、Apache上的PHP应用，Flickr网站的主体是大约6万行PHP代码<br>－ 没有使用PHP session, 应用是stateless,便于扩展，并避免PHP Server故障所带来的Session失效。<br>－ 每个页面有大约27～35个查询<br>－ 另有专门的Apache Web Farm 服务于静态文件（HTML和照片）的访问</li>
<li><a href="http://www.mysql.com/" target="_blank">MySQL</a>，Master-Master结构，mysql的常见的master-slave结构，大家都知道存在”single point of failure”(单点故障的问题)，且只对读操作有好处，对于写频繁的网站却不是一个好的解决方案，Flickr的双master方案据我推测用的就是这个<a href="http://code.google.com/p/mysql-master-master/">http://code.google.com/p/mysql-master-master/</a>，原理就是master轮询，保证同时只有一个master负责写，解决了单点故障的问题。</li>
<li>Shards</li>
<li><a href="http://www.danga.com/memcached/" target="_blank">Memcached</a>&nbsp;作为中间缓存层</li>
<li><a href="http://www.squid-cache.org/" target="_blank">Squid</a>&nbsp;作反向代理服务器(reverse-proxy for html and images).</li>
<li><a href="http://smarty.php.net/" target="_blank">Smarty&nbsp;</a>作为模板解析</li>
<li>Perl 估计用perl做一些系统层面的东西吧，比如日志处理（猜测）</li>
<li>PEAR 做XML和Email解析</li>
<li>前期使用的是<a href="http://www.imagemagick.org/" target="_blank">ImageMagick</a>&nbsp;进行图像处理，在 2004 &nbsp;转移到&nbsp;<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>， 处理速度提升了 15%。</li>
<li>Java 作为节点服务</li>
<li><a href="http://www.apache.org/" target="_blank">Apache</a></li>
<li><a href="http://wiki.systemimager.org/" target="_blank">SystemImager</a>&nbsp;作为服务器部署</li>
<li><a href="http://ganglia.info/" target="_blank">Ganglia</a>&nbsp;分布式系统监控</li>
<li><a href="http://code.google.com/p/subcon/" target="_blank">Subcon</a>&nbsp;用SVN维护服务器配置文件并且可以部署不同的配置文件到服务器集群中去</li>
<li><a href="http://www.cvsup.org/" target="_blank">Cvsup</a>&nbsp;用做文件分发、更新</li>
<li><a href="http://backhand.org/wackamole/" target="_blank">Wackamole</a>前端负载均衡</li>
<li>Pair of ServerIron’s 做负载均衡方案</li>
<li>Squid Caches 代理，用于缓存静态的HTML和照片</li>
<li>Dual Tree Central Database<br>－ MySQL 数据库，存放用户表，记录的信息是用户主键以及此用户对以的数据库Shard区，从中心用户表中查出用户数据所在位置，然后直接从目标Shard中取出数据。<br>－ “Dual Tree”架构是”Master－Master”和“Master-Slave”的有效结合，双Master 避免了“单点故障”，Master－Slave又提高了读取速度，因为用户表的操作90％以上是读。</li>
<li>Master-master shards<br>－ MySQL 数据库，存储实际的用户数据和照片的元数据（Meta Data)，每个Shard 大约40万个用户，120GB 数据。每个用户的所有数据存放在同一个shard中。<br>－ Shard中的每一个server的负载只是其可最大负载的50％，这样在需要的时候可以Online停掉一半的server进行升级或维护而不影响系统性能。<br>－ 为了避免跨Shard查询所带来的性能影响，一些数据有在不同的Shard有两份拷贝，比如用户对照片的评论，通过事务来保证其同步。</li>
<li>Memcached Cluster 中间层缓存服务器，用于缓存数据库的SQL查询结果等。</li>
<li>Big Search Engine<br>- 复制部分Shard数据（Owner’s single tag）到Search Engine Farm以响应实时的全文检索。<br>- 其他全文检索请求利用Yahoo的搜索引擎处理</li>
<li>Storage Manager 运行私有的，适用于海量文件存储的Flickr File System</li>
<li>Net App公司的Filer, NAS存储设备，用于存储照片</li>
<li>服务器的硬件配置：<br>- Intel或AMD 64位CPU，16GB RAM<br>- 6-disk 15K RPM RAID-10.<br>- 2U boxes.</li>
<li>服务器数量：(数据来源：April 2008 MySQL Conference &amp; Expo)<br>166 DB servers, 244 web servers(不知道是否包括 squid server？), 14 Memcached servers</li>
<li>使用<a href="http://wiki.systemimager.org/">SystemImager/SystemConfigurator</a>&nbsp;自动化安装、软件分发，</li>
<li><a href="http://code.google.com/p/subcon/">Subcon</a>作为配置管理工具提高部署效率。</li>
<li><a href="http://ganglia.sf.net/">Ganglia</a>&nbsp;来进行容量数据的展现。Ganglia 最主要的优点还是管理的方便性: Client/Server 结构, 各自跑 Demon 进行数据交互(<abbr title="eXtensible Markup Language">XML</abbr>形式)。相比&nbsp;<a href="http://www.cacti.net/">Cacti</a>&nbsp;+&nbsp;<a href="http://www.collectd.org/">Collectd</a>&nbsp;需要进行很多手工配置，更加方便。John Allspaw很强调<a href="http://blog.csdn.net/yanghehong/archive/2010/07/27/5769928.aspx" target="_blank" rel="nofollow">测量(measurement)</a>的重要性；他也很鄙视benchmark，无论是对开源软件比如Cassandra的benchmark，或是自己开发的进程的性能测试，都与上线后运营的负载差异太大，以致对容量规划几乎没帮助。基本上需要在灰度发布后根据实际应用负载才能做比较靠谱的规划。</li>
</ul><p><b>Flickr的数据库从“Master-Slave”的复制模式到Shard架构</b></p><p>也许有人不相信，Flickr是从一台服务器起步的，即Apache/PHP和MySQL是运行在同一台服务器上的，很快MySQL服务器就独立 了出来，成了双服务器架构。随着用户和访问量的快速增长，MySQL数据库开始承受越来越大的压力，成为应用瓶颈，导致网站应用响应速度变慢。一般来说，数据库的扩展无外是两条路，Scale-Up和Scale-Out。Scale-Up，简单的说就是在同一台机器内增加CPU、内存等硬件来增加数据库系统的处理能力，一般不需要修改应用程序；Scale-Out,就是我们通常所说的数据库集群方式， 即通过增加运行数据库服务器的数量来提高系统整体的能力，而应用程序则一般需要进行相应的修改。Flickr的技术人员发现，查询即SELECT语句的数量要远远大于添加，更新和删除的数量，比例达到了大约13：1甚至更多，所以他们采用了“Master-Slave”的复制模式，即所有的“写”操作都在发生在“Master”， 然后”异步“复制到一台或多台“Slave”上，而所有的”读“操作都转到”Slave”上运行，这样随着“读”交易量的增加，只需增加Slave服务器就可以了。</p><p>所以Frickr最初的数据库架构为：应用程序能够在多个”Slave“上进行负载均分；2）当一个或多个”slave”出现故障时，应用程序能自动尝试下一个“slave”，如果全部“Slave”失效，则返回错误。 Flickr曾经考虑过的方案是在Web应用和”Slave“群之间加入一个硬件或软件的”Load Balancer“，这样的好处是应用所需的改动最小，因为对于应用来说，所有的读操作都是通过一个虚拟的Slave来进行，添加和删除“Slave”服务器对应用透明，Load Balancer 实现对各个Slave服务器状态的监控并将出现故障的Slave从可用节点列表里删除，并可以实现一些复杂的负载分担策略，比如新买的服务器处理能力要高 过Slave群中其他的老机器，那么我们可以给这个机器多分配一些负载以最有效的利用资源。</p><p>“Master”-”Slave”模式的缺点是它并没有对于“写’操作提供扩展能力，而且存在单点故障，即一旦Master故障，整个网站将丧失“更新” 的能力。解决的办法采用“Master”-”Master”模式，即两台服务器互为”Master“-”Slave”,这样不仅”读/写“能力扩展了一 倍，而且有效避免了”单点故障“，结合已有的“Master”-”Slave”，整个数据库的架构就变成了下面的”双树“结构。“双树”架构并没有支撑太久的时间，大概6个月后，随着用户的激增，系统再一次达到了极限，不仅”写”操作成为了瓶颈，而且“异步复制”也由于 ”Slave“服务器过于繁忙而出现了严重的滞后而造成读数据的不一致。那么，能不能在现有架构加以解决，比如说增加新的”Master“服务器和考虑采用”同步复制“呢？答案是否定的，在Master超过两台的设置中，只能采用”闭环链“的方式进行复制，在大数据量的生产环境中，很容易造成在任意时刻没 有一个Master或Slave节点是具有全部最新数据的，这样很难保障数据的一致性，而且一旦其中一个Master出现故障，将中断整个复制链；而对于”同步复制“，当然这是消除”复制滞后“的最好办法，不过在当时MySQL的同步复制还远没有成熟到可以运用在投产环境中。Flickr网站的架构，需要一次大的变化来解决长期持续扩展的问题。</p><p>2005年７月Dathan Pattishall(MySQL 2005、2006年度 “Application of the Year Award”获得者)加入了Flickr团队。一个星期之内，Dathan解决了Flickr数据库40%的问题，更重要的是，他为Flickr引进了 Shard架构，从而使Flickr网站具备了真正“线性”Scale-Out的增长能力，并一直沿用至今，取得了巨大的成功。&nbsp;Shard主要是为了解决传统数据库Master/Slave模式下单一Master数据库的“写”瓶颈而出现的，简单的说Shard就是将一个大表分割成多个小表，每个小表存储在不同机器的数据库上，从而将负载分散到多个机器并行处理而极大的提高整个系统的“写”扩展能力。相比传统方式，由于每个数据库都相对较小，不仅读写操作更快，甚至可以将整个小数据库缓存到内存中，而且每个小数据库的备份，恢复也变得相对容易，同时由于分散了风险，单个小数据库 的故障不会影响其他的数据库，使整个系统的可靠性也得到了显著的提高。</p><p>对于大多数网站来说，以用户为单位进行Shard分割是最合适不过的，常见的分割方法有按地域（比如邮编），按Key值（比如Hash用户ID),这些 方法可以简单的通过应用配置文件或算法来实现，一般不需要另外的数据库，缺点是一旦业务增加，需要再次分割Shard时要修改现有的应用算法和重新计算所 有的Shard KEY值；而最为灵活的做法是以“目录”服务为基础的分割，即在Shard之前加一个中央数据库（Global Lookup Cluster），应用要先根据用户主键值查询中央数据库，获得用户数据所在的Shard，随后的操作再转向Shard所在数据库，Dual Tree Central Database就是中央数据库，存放用户表，记录的信息是用户主键以及此用户对以的数据库Shard区；而Master-Master Shards就是一个个的Shard用户数据库，存储实际的用户数据和照片的元数据（Meta Data）。</p><p>Shard架构的一些问题和Flickr的解决办法：</p><p>１）Shard只适用于不需要 join操作的表，因为跨Shard join操作的开销太大。</p><p>解决的办法是将一个用户的所有数据全部存放在同一个Shard里，对于一些传统方式下需要 跨Shard查询的数据，只能采取冗余的方法，比如Shard1的用户A对Shard2的用户B的照片进行了评论，那么这条评论将同时存放在Shard1 和Shard2中。这样就存在一个数据一致性的问题，常规的做法是用数据库事务(Transaction)、”两阶段提交“(2 phase commit)来解决，但做过两阶段提交（2PC）应用的都知道，2PC的效率相对较差，而且实际上也不能100%保证数据的完整性和一致性；另外，一旦由于其中一个Shard故障而提交失败回滚，用户只能放弃或再试一遍，用户体验较差。Flickr对于数据一致性的解决方案是Queue（Flickr用 PHP开发了一个强大的Queue系统，将所有可以异步的任务都用Queue来实现，每天处理高达１千万以上的任务。）,事实上当用户A对用户B的照片进行评论时，他并不关心这条评论什么时候出现在用户B的界面上，即将这条评论添加到用户B的交易是可以异步的，允许一定的迟延，通过Queue处理，既保证了数据的一致性，又缩短了用户端的相应时间，提高了系统性能。</p><p>２）Shard的另一个主要问题Rebalancing,既当现有Shard的负载达到一定的阀值，如何将现有数据再次分割。</p><p>Flickr目前的方式依然是手工的，既人工来确定哪些用户需要迁移，然后运行一个后台程序进行数据迁移，迁移的过程用户账户将被锁住。</p><p><b>Memcached在Flickr的应用</b></p><p>Flickr为中央数据库配置了Memcached，但是没有给Shard配置，原因是什么？Memecached的主要目的是将经常读取的对象放入内存以提高整个系统，尤其是数据库的扩展能力。Memcached的主要结构是两个Hash Table,Server端的HashTable以key-value pair的方式存放对象值，而Client端的HashTable的则决定某一对象存放在哪一个Memcached Server.举个例子说，后台有3个Memecached Server,A、B、C，Client1需要将一个对象名为”userid123456“，值为“张三”的存入，经过Client1的Hash计 算，”userid123456″的值应该放入Memcached ServerB, 而这之后，Client2需要读取”userid123456″的值，经过同样的Hash计算，得出”userid123456″的值如果存在的话应该在 Memcached Server B，并从中取出。最妙的是Server之间彼此是完全独立的，完全不知道对方的存在，没有一个类似与Master或Admin Server的存在，增加和减少Server只需在Client端”注册”并重新Hash就可以了。</p><p>Memcached作为数据库缓存的作用主要在于减轻甚至消除高负载数据库情况下频繁读取所带来的Disk I/O瓶颈，相对于数据库自身的缓存来说，具有以下优点：</p><ol>
<li>Memecached的缓存是分布式的，而数据库的缓存只限于本机；</li>
<li>Memcached 缓存的是对象，可以是经过复杂运算和查询的最终结果，并且不限于数据，可以是任何小于１MB的对象，比如html文件等；而数据库缓存是以”row”为单 位的，一旦”row”中的任何数据更新，整个“row”将进行可能是对应用来说不必要的更新；</li>
<li>Memcached的存取是轻量的，而数据库的则相对较 重，在低负载的情况下，一对一的比较,Memcached的性能未必能超过数据库，而在高负载的情况下则优势明显。</li>
</ol><p>Memcached并不适用于更新频繁的数据，因为频繁更新的数据导致大量的Memcached更新和较低的缓冲命中率，这可能也是为什么Shard没有集成它的原因；Memcached更多的是扩展了数据库的”读“操作，这一点上它和Slave的作用有重叠，以至于有人争论说应该 让”Relication”回到它最初的目的”Online Backup”数据库上，而通过Memcached来提供数据库的“读”扩展。然而，在体系架构中增加Memecached并不是没有代价的，现有的应用要做适当的修改来同步Memcached和数据库中的数据，同时Memcached不提供任何冗余和“failover”功能，这些复杂的控制都需要应用来实现。</p><p>我们看到在每一次数据更新都需要更新Memcached，而且数据库或Memcached任何一点写错误应用就可能取得“过期”的数据而得到错误的结果，如何保证数据库和Memcached的同步呢？我们知道复制滞后的主要原因是数据库负载过大而造成异步复制的延迟，Shard架构有效的分散了系统负载，从而大大减轻了这一现象，但是并不能从根本上消除，解决这一问题还是要靠良好的应用设计。当用户访问并更新Shard数据时，Flickr采用了将用户“粘”到某一机器的做法，即同一用户每次登录的所有操作其实都是在Shard中的一个Master上运行的，这样即使复制到Slave，也就是另一台Master的时候有延时，也不会对用户有影响，除非是用户刚刚更新，尚未复制而这台Master就出现故障了。</p><p>对于Central Database的复制滞后和同步问题，Flickr采用了一种复杂的“Write Through Cache”的机制来处理：”Write Through Cache”就是将所有的数据库”写“操作都先写入”Cache”，然后由Cache统一去更新数据库的各个Node,“Write Through Cache”维护每一个Node的更新状态，当有读请求时，即将请求转向状态为”已同步“的Node，这样即避免了复制滞后和Memcached的同步题，但缺点是其实现极为复杂，“Write Throug Cache”层的代码需要考虑和实现所有”journal”,”Transaction“，“failover”，和“recovery”这些数据库已经实现的功能，另外还要考虑自身的”failover”问题。</p><p>另外Flickr也用了<a href="http://blog.csdn.net/yanghehong/archive/2010/12/14/6074472.aspx" target="_blank" rel="nofollow">Redis</a>，在他的那个offline tasks&nbsp;<a title="system" href="http://www.ha97.com/tag/system">system</a>，对Redis评价很高。</p><p><b>对于PHP&nbsp;session 的弃用</b></p><p>除图片外，Flickr所有的数据都存在数据库中。</p><p>php的session是存储在服务器文件系统的，而且默认没有做hash目录，这就意味着如果你的网站访问量大，比如有10万个人在线，你的session目录下就有10万个文件，如果你的文件格式是NTFS(windows)或者Ext3(Linux)，你要定位到某个文件，系统基本上会假死。使用默认的php session还有另外一个问题：服务器session同步，用户在A服务器登录后，session存储在A服务器上，然后应用跳转到B服务器，B服务器上的session没有同步就出问题。</p><p>Flickr的架构不能说是完美的，没有完美的架构，ebay对于扩展有以下建议：</p><ul>
<li>不要预先去为性能扩展，出现问题之后找到问题再寻扩展；</li>
<li>不要想寻找到一个一劳永逸的方案，因为你不知道下一个瓶颈在哪里；</li>
<li>访问量大了，出了问题，修改架构，稳定运行，访问量再大了，又出问题了，再修改，这个是解决问题的唯一方案。</li>
</ul><p><a href="http://highscalability.com/" target="_blank">Todd Hoff</a>总结的经验：</p><ul>
<li>不要把你的应用简单的看成一个Web应用，可能会有REST APIs, SOAP APIs, RSS feeds, Atom feeds等等的应用</li>
<li>“无界限”设计，不要把你的用户死死的绑定在某个服务器上</li>
<li>&nbsp;产品设计时需要做扩容的计划以及预算</li>
<li>慢慢来，不要一开始就买一堆服务器</li>
<li>实地考察，不要臆想，获得实际数据之后再做决定</li>
<li>内建日志系统，记录服务器和应用日志</li>
<li>Cache，缓存是必不可少的</li>
<li>抽象层，由于你的架构随时可能变，架构的变化必定要带来底层的变化，这就需要你在底层的基础上根据业务封装一层中间层，这样底层的改动不至于影响业务（这个太重要了，不要因为扩展把原来的程序推倒重来）</li>
<li>迭代开发，随时改进</li>
<li>忘记那些调优的小技巧吧，比如很多人对与PHP里面的require和require_once的性能差别，这些性能的差异和架构上的短板比起来根本不足为道</li>
<li>在线上测试你的效果</li>
<li>忘记用工具测试出来的结果，这些结果只能给你一个大概的印象而已</li>
<li>找出你的系统短板，一台服务器的最大处理能力是多少？现在离最大负载还有多远？mysql的瓶颈在哪里？是不是磁盘IO？memcache的瓶颈在哪里？CPU还是网络传输？</li>
<li>注意你的用户使用规律，比如Flickr发现每年的第一个工作日比平时多20％～40％的上传量，周日的访问量比平时要多40％～50％</li>
<li>要注意指数型的增长</li>
<li>你的计划是为你访问的峰值设计的</li>
</ul><p>除了技术手段的优化，Flickr 充分利用硬件本身的更新换代带来的好处，曾经用 18 台新机器替换掉原来的 67 台 Web 服务器，用 8 台新机器替换掉原来的 23 台图片处理的机器。无论从机架占用还是电力使用都节省了很多，而整理处理能力并没有削弱。</p><p>Flickr 技术团队随着网站的快速发展并没有增加大量人手，个人生产力的产出是相当的高。如何做到的呢？给出了四个非常有趣的原则：</p><ul>
<li>使得机器自动构建 (Teach machines to build themselves)</li>
<li>使得机器自监控(Teach machines to watch themselves)</li>
<li>使得机器自修复(Teach machines to fix themselves)</li>
<li>通过流程减少 MTTR (Reduce MTTR by streamlining)</li>
</ul><p>自动购建上，Flickr 使用了&nbsp;<a href="http://www.opscode.com/">OpsCode</a>&nbsp;、<a href="http://reductivelabs.com/products/puppet/">Puppet</a>&nbsp;以及 System Imager/Configurator 等。或许这几个工具值得我们关注一下。</p><p>Flickr 团队内部沟通工具也挺有意思，除了内部的&nbsp;<abbr title="Internet Relay Chat">IRC</abbr>&nbsp;用于讨论之外，还利用 Yahoo! Messenger 的<a href="http://libyahoo2.sourceforge.net/"><abbr title="Instant Message">IM</abbr>&nbsp;Bot</a>&nbsp;记录更多的系统变化，并且，重要的是，将这些信息弄到搜索引擎里面&nbsp;… “信息查找”，是国内多数团队交流工具忽视的地方。</p><p>参考信息：</p></div></div>]]></description><link>http://zackyang.com/post/flickr-architecture</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 27 Feb 2014 01:31:27 GMT</pubDate></item><item><title><![CDATA[博弈论：7万口袋妖怪玩家如何毁了他们自己]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			口袋妖怪红版和蓝版至今仍然是电子游戏史上最具代表性的两款作品。它们深埋在我们那一代，玩着游戏长大的孩子的心中（包括我自己），即使今天已经成为大人了，我们还是忍不住去重温旧时的经典。</p>
		<p>
			在游戏直播站&ldquo;Twitch.tv&rdquo;上，一个叫&ldquo;TwitchPlaysPokemon&rdquo;的用户，发起了一个在线的口袋妖怪红版的游戏，但是有一个特别之处：所有的游戏命令，比如&ldquo;上&rdquo;、&ldquo;下&rdquo;、&ldquo;左&rdquo;、&ldquo;右&rdquo;、&ldquo;b&rdquo;、&ldquo;a&rdquo;，&ldquo;选择&rdquo;和&ldquo;开始&rdquo;，都需要通过在直播聊天框里输入对应的字母来生效。一开始，这看起来像是一个疯狂的想法：如果有上千人同时输入命令，我们还怎么能好好玩游戏？</p>
		<p>
			<img alt="" class="aligncenter" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\5c4a9cd7-39ae-441a-a0be-954c4abc73d9.png" style="width: 600px; height: 324px;" /></p>
		<p>
			当这个游戏出来之后，担忧果然被印证了。随着著名游戏论坛&ldquo;NeoGAF&rdquo;发现了这个在线游戏之后，一个3000人的小组，带给了这个游戏一个难以置信的进展，居然通过了第一个道馆（8个道馆中的一个）并且还在继续。几天之后，当论坛上的主要新闻都被这件事占据之后，他们已经成功通过了4个道馆了，这激发了粉丝们大量的创意，同时也创造了一个新的&rdquo;宗教&ldquo;。</p>
		<p>
			那句话怎么说来着，成功的路上总不会是一帆风顺。最后，这个游戏团体需要面对他们最大的敌人：自己。这个在线游戏的意义并不在于去获得胜利，而在于努力去避免输的太惨。当然他们最终还是会失败。整个事件就像是一列火车的失事一样，一直吊人胃口。</p>
		<h3>
			冒险开始</h3>
		<p>
			在线版的口袋妖怪&middot;红游戏出生后的第一个区域还算是比较顺利，直到第三个道馆所在的枯叶市为止。在那之前，精灵训练师小智，也就是玩家扮演的角色，已经有一些非常离奇的遭遇了，这都要感谢那些在&ldquo;Twitch&rdquo;上的玩家。小智选了小火龙（之后进化成火恐龙）当作他的第一只小精灵，他把它取名为&ldquo;ABBBBBBK&rdquo;（或者是&ldquo;Abby&rdquo;简称。他还抓了一些别的小精灵，包括一只波波（之后进化成比比鸟）然后进化成比雕），2只小拉达（其中一只命名为&ldquo;JLVWNNOOOO&rdquo;，也就是&ldquo;Jay Leno&rdquo;），一只素利普，以及一只烈雀后来换了大葱鸭，这些就是小智全部的小精灵了。</p>
		<p>
			<img alt="" class="aligncenter" height="335" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\1561bb8c-bef5-4a0c-b7fd-92939c7bd5e1.png" width="600" /></p>
		<p>
			因为有上千个玩家同时输入指令，所以在小精灵对战中毫无策略可言，这导致了在大多数战斗中都无法获胜。不过必须得感谢一般RPG游戏设定的升级机制和因为走运而产生的攻击，小智还能够坚持下去（尽管才过了几个小时罢了）。</p>
		<p>
			在小智从圣安奴号获得HM01道具之前，&ldquo;Twitch&rdquo;上的玩家还是比较轻松的，然而这个道具需要一列有序的按键顺序才能够使用。</p>
		<p>
			然后事情变得复杂了。</p>
		<h3>
			学习砍树</h3>
		<p>
			HM01道具的作用是赋予一个小精灵砍伐的能力，但是学会砍伐技能需要去砍树作为前提；此时，枯叶市的道馆前面正好有一棵树。为了教一个小精灵砍伐，玩家必须：<br />
			1、打开开始菜单。<br />
			2、选择道具界面。<br />
			3、选择HM01道具。<br />
			4、确认使用HM01道具。<br />
			5、选择一个小精灵去学习砍伐。<br />
			6、确认选择这个小精灵学习砍伐。<br />
			7、选择一个技能框填充砍伐技能。<br />
			那些破坏者在上面这7步当中只要按了B按钮，就会把一切都恢复到最初一步。</p>
		<p>
			<img alt="" class="aligncenter" height="337" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\b9ce321e-80e0-4d9a-a788-bd99a7fba1ab.jpg" width="681" /></p>
		<p>
			与此同时，游戏的参与者已经达到了3万人。人数的增长造成了输入指令的延迟，需要20秒左右的时间游戏才能响应玩家当前的输入。这给选择正确菜单造成了非常大的困难，尤其是&ldquo;上&rdquo;&ldquo;下&rdquo;指令，因为基本上菜单一打开就被关闭了。</p>
		<p>
			除此之外，随着玩家人数的激增，破坏者的数量也在增加。并且这些破坏者非常喜欢去按B按钮。</p>
		<p>
			由于这两个因素的存在，玩家们浪费了近4个小时候的时间还是没有成功让任何一个小精灵学会砍伐技能。游戏的聊天室被各种抱怨声充满了。</p>
		<p>
			<img alt="" class="aligncenter" height="480" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\5e308ce9-0b94-450f-ba59-7639bbff79d5.png" width="500" /></p>
		<p>
			最终，奇迹发生了。大葱鸭学会了砍伐技能。没有人知道是怎么回事，但是它确实学会了。这还只是万里长征的第一步。<br />
			第二步是去砍一棵真实的树。为了去砍一棵树：<br />
			1、首先需要玩家面对一棵树。<br />
			2、打开开始菜单。<br />
			3、选择小精灵界面。<br />
			4、选择那只会砍树的小精灵。<br />
			5、选择砍树技能。<br />
			可是破坏者的问题依然存在。仅仅是面对一棵树，在成千上万的&ldquo;上&rdquo;&ldquo;下&rdquo;指令面前也是十分困难的，相反要让我们的主角小智远离一棵树却是分分钟的事。</p>
		<p>
			为了砍倒一棵树，又花了4个小时。当小智终于砍倒了树，打倒了道馆里的主人出来之后，门口砍倒的那棵树又重生了，噢，耶！</p>
		<p>
			<img alt="" class="aligncenter" height="220" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\fe67cad4-d26b-4810-a137-c97bc96c3d16.png" width="320" /></p>
		<p>
			HM01的例子告诉我们，越多的人反对，那么你的任务就越不可能达成。甚至不需要你不理解或者是胡乱的组织，只需要一些恶作剧就能够阻止你成功。</p>
		<h3>
			和角落里的BOSS战斗</h3>
		<p>
			在枯叶市的道馆主人被打败之后（终于是打败了），&ldquo;Twitch&rdquo;上的玩家进入到了第九大道，准备前往紫苑镇。听起来是不是很简单，但是我们的小智遇到了障碍。</p>
		<p>
			<img alt="" class="aligncenter" height="163" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\52d0321f-17c6-4755-93ab-57c8f946cfd1.png" width="288" /></p>
		<p>
			小智必须从左到右通过一个只有1个角色宽度的通道。如果小智摔下去了，那么小智就必须从头开始走。</p>
		<p>
			在这个通道里，小智必须向右连续走8步，如果其中有任何一步向下就悲剧了。</p>
		<p>
			HM01事件中，输入的延迟一直是失败的罪魁祸首。那么这次，破坏者就有真正的话语权了。任何一次&ldquo;下&rdquo;都会毁了前面所有的努力。而且这个游戏变得更加有名了，致使目前已经有了5万名玩家。</p>
		<p>
			<img alt="" class="aligncenter" height="339" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\445399b5-9df9-4315-bc96-9184ffab6bfc.png" width="600" /></p>
		<p>
			那么结果呢？通过那个通道花了12个小时。并且小智最后还被角落里的训练师给打败了，走回去需要花费同样多的时间。</p>
		<p>
			学到了吗？如果破坏者拥有绝对的权力，他们将会使用它，并且会毫无节制的使用它。</p>
		<p>
			（2月19日更新）最后&ldquo;Twitch&rdquo;上的玩家还是成功的战胜了角落里的训练师，他们发现通过大量的人同时按&ldquo;右&rdquo;，因为有延迟的缘故，只要有足够多的玩家，那么最终小智还是会向右走足够多的步数。</p>
		<h3>
			无视决策树</h3>
		<p>
			在角落训练师事件结束后，粉丝们变得更加偏执了。游戏中的哪些部分是绝对不可以向这些破坏者妥协的？其中一个考虑便是游戏里的PC系统，这个系统是用来存储小精灵的；当然也可以用来丢掉小精灵，把它们从游戏中彻底的删除。由于破坏者太强大，冒着失去顶级小精灵的风险去使用PC系统有可能让游戏彻底悲剧，所以玩家们决定除非万不得已，否则绝对不使用PC系统。</p>
		<p>
			小智通过了紫苑镇，来到了彩虹市，在这里&ldquo;Twitch&rdquo;的玩家打败了道馆的主人获得了第四枚徽章（花了很长的时间：因为道馆外面和道馆里面各有一棵树！）</p>
		<p>
			此时，对于游戏里的小智来说，后面会越来越困难，这也导致了玩家们对于下一步该做什么出现了分歧。许多玩家指出，现有的小精灵中缺少了一只会冲浪的小精灵，冲浪也是一个技能，就跟砍树一样，而冲浪这个技能在游戏的后期会用到。随着剧情的推进，小智最终会获得一个能够学习冲浪技能的小精灵（乘龙），同时乘龙也是一个强大的战斗力。</p>
		<p>
			玩家也可以收集免费的小精灵伊布。伊布有三种进化：最糟糕的进化是火精灵，比较好的进化是雷精灵，最佳的进化是水精灵，因为水精灵能够学习冲浪技能。但是为了进化成水精灵，必须购买一颗水之石，在购买的时候，必须要提防购买错成任何别的东西，同时还要小心b按钮。然后还要在使用它的时候，防止任何的破坏或者是丢弃它。两种方式由于输入的延迟和破坏者的存在都非常的困难。</p>
		<p>
			现在拥有5只小精灵（小拉达在之前被放到了PC系统里），所以玩家只有一个空位去获得小精灵了，因为他们害怕如果使用PC系统存放小精灵，会发生删除小精灵的事。哪一种方式才是更合理的方法去获得一只会冲浪的小精灵呢：是继续等待然后安全的获得一只乘龙呢，还是去抓捕伊布然后祈祷玩家们能够成功的把它进化成水精灵？一个安全而漫长的过程还是去冒一次险？</p>
		<p>
			显然，当有7万人同时做决定时，他们是不可能理性的。相反，各种欢乐接踵而至。</p>
		<h3>
			游戏失败的原因</h3>
		<p>
			&ldquo;Twitch&rdquo;上的玩家最后抓捕了伊布（仍然有很多人说这是个错误的决定），然后去购买水之石。因为这个输入操作各种悲剧，他们最后买了火之石，把伊布进化成了毫无用处的火精灵。聊天室里又是一片骂声。</p>
		<p>
			<img alt="" class="aligncenter" height="500" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\19700670-176d-465d-922d-501d36ebc628.jpg" width="443" /></p>
		<p>
			为了给未来的乘龙腾出空间，玩家们决定使用PC系统把火精灵存放起来。</p>
		<p>
			<img alt="" class="aligncenter" height="355" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\db95932e-e90e-4b47-9b23-9b5ed46562a4.png" width="639" /></p>
		<p>
			然后，Abby和Jay Leno都被永久的从游戏里删除了。</p>
		<p>
			<img alt="" class="aligncenter" height="600" src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\cf0e2760-a933-43ec-8dea-eead40fb84ab.jpg" width="600" /></p>
		<p>
			玩家们终于出离悲愤。</p>
		<p>
			直到现在，&ldquo;Twitch&rdquo;上的玩家仍然在努力，但是每一个参与的玩家都学到了一课：人们都是按照自己的喜好行事。而破坏者有着非常不同的个人喜好。并且破坏者总是存在的。知道如何优雅的失败总会是有用的。</p>
		<p>
			最后的最后，玩家们做出的努力已经让大家非常非常的意外并且印象深刻了。</p>
		<!-- p><a target="_blank" rel="nofollow" href="http://www.hi-vps.com/?utm_source=jobbole.com"><img src="/upload/offsite/2014.02.27.276ab405-11d4-4b17-904d-3f0c5640d73a\66e23643-0a96-49f9-9201-fa2b4347d141.jpg"></img></a></p --></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/game-theory-70000-pokemon-players-how-to-ruin-their-own</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 27 Feb 2014 01:30:48 GMT</pubDate></item><item><title><![CDATA[“舌战群儒”的技术分析]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			诸葛亮舌战群儒是三国演义中一个深受欢迎的情节，历来被视为正面经典，甚至入选过中学和大学语文课本，还要求学生学习其中的论辩方法。这段故事<a href="http://big5.xinhuanet.com/gate/big5/news.xinhuanet.com/theory/2008-08/11/content_9156190.htm">并非历史事实</a>，而是罗贯中的虚构，目的当然是想突出诸葛亮的智慧形象。但是站在今天的视角看来，这个形象其实并不怎么样。我们甚至可以说，这段书表现了小知识分子所代表的文化糟粕，根本不应该推广学习。</p>
		<p>
			诸葛亮前往江东是为了说服孙权抗曹。这一仗打还是不打，正确的讨论方法是摆事实讲道理，推演各种选择的最可能结局，利弊分析，再作出决策。但舌战群儒这场辩论的主题却并不是打不打，而是一见面首先想要从气势上压过对方一头。文人这种玩法，就如同两军列阵的这个时间段派几个斥候先对决一番，重要的不是死伤多少，而是面子问题。</p>
		<p>
			而这场群嘲般的辩论中诸葛亮虽然处处占上风，但是显然未能取得东吴群儒的认同，反而拉了仇恨，对抗曹大业并无帮助。其实日常生活中的绝大多数争论恐怕也是如此。Nassim Nicholas Taleb 在 <i>The Bed of Procrustes</i> 这本书里有句话说得好：世界上有两种人，一种人想赢，一种人想赢得争论 &mdash; 他们从来都不是同一种人。</p>
		<p>
			本文分析这场辩论中使用的技术。研究这些技术并不是为了武装自己跟人争论，而是因为这些技术非常有代表性，我们可以在很多地方看到它们的影子。真正的三国人物必不如此，但很多后世无良文人，就是这种思维方式。</p>
		<p>
			这些技术的核心追求，不是证明对方说的结论不对，而是证明对方这个&ldquo;人&rdquo;，或者对方所代表的势力，不行。表面上说具体的问题，实际上都是说人。这种&ldquo;以人为本&rdquo;可能是中国文人最坏的毛病。如果你的目的是想要否定这个人主张的一件事，你最好先否定这个人。你要想否定这个人，又只需列举他做的某个小小的坏事。争论的目标不是追求真理，而是把对方全面贬低。这不是切磋武艺，这是打仗。</p>
		<p>
			我认为舌战群儒的技术一共就三招，按使用优先级顺序如下。</p>
		<p>
			<br />
			<b>1）列举事实证据，暗示对方能力不行</b></p>
		<p>
			人出来混无非靠两点：人格和能力。中国传统上对一般人的道德要求远远超过能力要求，最理想的结果似乎是证明我的人格境界比你高。但知识分子靠学问吃饭，往往宁可让你攻击他的人格，也不让你侮辱他的智商。所以攻击一个人要优先攻击他的能力。</p>
		<p>
			成年人对话不可能一上来就说&ldquo;你是个坏人&rdquo;，或者&ldquo;你是个笨蛋&rdquo;，那是小孩骂人。一定要列举各种事实来指向这种判断，但是自己又绝不亲口说出这个判断。结论要暗示，呼之欲出而不出。最直接的办法当然是把对方过去的败绩和糗事拿出来揭短 &mdash; 不过高手是不会这么直接的，太像找茬了。</p>
		<p>
			高手的做法是先恭维对方几句，把人抬上去。如果对方真顺着你给的杆爬上去了，你再质疑 &mdash; 不对啊，你这么牛，可怎么我听说你&hellip;&hellip; 这时候充分列举对方短处就显得好像学术研讨一样。</p>
		<p>
			被人揭了短怎么反驳呢？在高层次对话中一般不会有人用错误事实做论据，所以我们没法反驳他列举的事实。我们只能列举新的事实，对我们有利的事实。这是防守。</p>
		<p>
			每当被人揭短，一般人一定会抑制不住反击的冲动，想要立即揭对方的短。这是不对的。如果辩论这么进行下去就成了比烂，实在有辱斯文。正确做法一定要先防守，充分列举事实证明自己真有能力。防守得当，对方的形象已经是胡搅蛮缠了。反击，还意味着把自己拉到跟对手一样的层次。所以我们看到自始至终诸葛亮都是以守为主，从不主动挑人，让对方先出牌。对手受伤基本上不是因为诸葛亮打他们，而是他们被诸葛亮身上的反作用力打。</p>
		<p>
			但如果对方真的出现了事实错误，哪怕是非常小的一个错误，甚至是一个与主题不相关的错误，也要立即抓住机会一棍子打死！你连事实都没搞清楚根本不配和我辩论！知识分子最怕暴露自己没知识，后面都不必辩了。</p>
		<p>
			<br />
			<b>2）如果比不过事实，比境界</b></p>
		<p>
			如果事实就是我方实力比较差，闪光点实在有限，怎么办呢？这时候就不能跟着对方思路走局限在实力对比了，得 think out of the box，比境界。我们要从物质层面上升到精神层面，把对手拉到更高的场地上再战胜他。</p>
		<p>
			那件事我的确输了，可你知道我为什么输了吗？因为我不忍心，或则不屑于赢。不忍心是因为我道德高，不屑于是因为我看得远。这时候一定要率先抢占道德制高点和战略制高点，谁先跳出这个事实 box 谁占优势。</p>
		<p>
			可是如果那次不论是按战略标准还是按道德标准我们都应该赢，但还是输了，这又怎么说呢？答案是我们至少参与了。我们明知这件事很难办还是去办了。我们明知打不过还是去打了。是，我们是失败了。可是我们知其不可而为之，虽败犹荣！</p>
		<p>
			一旦把悲壮感建立起来，你就已经在辩论中立于不败之地。中国传统上常常认为做事的动机比结果重要得多，尤其是大事，讲究&ldquo;论心不论事&rdquo;。人们非常同情悲壮的英雄，甚至认为他比成功者更值得尊敬。</p>
		<p>
			文人写文章经常如此，往往明明是非常差的局面，他一说反而升华了。我们看官方媒体的国内灾难报道，也深得此法。哪怕事情再坏，也要突出强调我们不屈不挠的奋斗精神，特别要好好表现几个英雄人物的光辉形象。给人感觉我们损失的仅仅是有限的一点点物质财富，收获的却是无限的精神财富。</p>
		<p>
			一般人如果旁观文人吵架吵到这个层次，有可能会佩服得五体投地。市井小民争吵都是互相比烂越吵话题越低级，尼玛文人辩论都是越吵越高级啊！一开始还以为两人在讨论技术问题，后来感觉好像在说人品问题，最后才发现原来人家说的是哲学！</p>
		<p>
			<br />
			<b>3）你别说我如何如何不堪，著名英雄xxx也曾经如此不堪</b></p>
		<p>
			如果前面两条都没用上，被人真的证明了自己很不堪，那就只有真的比烂了。但是比烂不能跟对手比，他不配。必须找个历史上公认的牛人比，拿大人物找回面子。多知道点古今中外的名人轶事，在这能用上。</p>
		<p>
			现在我们就结合《三国演义》原文来看看这三个技术在舌战群儒中的具体应用。</p>
		<p>
			<br />
			<strong>1. 张昭</strong></p>
		<blockquote>
			<p>
				张昭先以言挑之曰：&ldquo;昭乃江东微末之士，久闻先生高卧隆中，自比管、乐，此语果有之乎？&rdquo;孔明曰：&ldquo;此亮平生小可之比也。&rdquo;昭曰：&ldquo;近闻刘豫州三顾先生于草庐之中，幸得先生，以为如鱼得水，思欲席卷荆襄。今一旦以属曹操，未审是何主见？&rdquo;孔明自思：&ldquo;张昭乃孙权手下第一个谋士，若不先难倒他，如何说得孙权？&rdquo;遂答曰：&ldquo;吾观取汉上之地，易如反掌。我主刘豫州躬行仁义，不忍夺同宗之基业，故力辞之。刘琮孺子，听信佞言，暗自投降，致使曹操得以猖獗。今我主屯兵江夏，别有良图，非等闲可知也。&rdquo;</p>
			<p>
				昭曰：&ldquo;若此，是先生言行相违也。先生自比管、乐，管仲相桓公，霸诸侯，一匡天下；乐毅扶持微弱之燕，下齐七十馀城：此二人者，真济世之才也。先生在草庐之中，但笑傲风月，抱膝危坐。今既从事刘豫州，当为生灵兴利除害，剿灭乱贼。且刘豫州未得先生之前，尚且纵横寰宇，割据城池。今得先生，人皆仰望，虽三尺童蒙，亦谓彪虎生翼，将见汉室复兴，曹氏即灭矣；朝廷旧臣，山林隐士，无不拭目而待，以为拂高天之云翳，仰日月之光辉，拯民于水火之中，措天下于衽席之上，在此时也。何先生自归豫州，曹兵一出，弃甲抛戈，望风而窜？上不能报刘表以安庶民，下不能辅孤子而据疆土，乃弃新野，走樊城，败当阳，奔夏口，无容身之地。是豫州既得先生之后，反不如其初也。管仲、乐毅果如是乎？愚直之言，幸勿见怪。&rdquo;</p>
			<p>
				孔明听罢，哑然而笑曰：&ldquo;鹏飞万里，其志岂群鸟能识哉？譬如人染沉疴，当先用糜粥以饮之，和药以服之，待其腑脏调和，形体渐安，然后用肉食以补之，猛药以治之，则病根尽去，人得全生也。若不待气脉和缓，便投以猛药厚味，欲求安保，诚为难矣。吾主刘豫州向日军败于汝南，寄迹刘表，兵不满千，将止关、张、赵云而已，此正如病势尪羸已极之时也。新野山僻小县，人民稀少，粮食鲜薄，豫州不过暂借以容身，岂真将坐守于此耶？夫以甲兵不完，城郭不固，军不经练，粮不继日，然而博望烧屯，白河用水，使夏侯惇、曹仁辈心惊胆裂，窃谓管仲、乐毅之用兵，未必过此。至于刘琮降操，豫州实出不知；且又不忍乘乱夺同宗之基业，此真大仁大义也。当阳之败，豫州见有数十万赴义之民扶老携幼相随，不忍弃之，日行十里，不思进取江陵，甘与同败，此亦大仁大义也。寡不敌众，胜负乃其常事。昔高皇数败于项羽，而垓下一战成功，此非韩信之良谋乎？夫信久事高皇，未尝累胜。盖国家大计，社稷安危，是有主谋。非比夸辩之徒，虚誉欺人：坐议立谈，无人可及；临机应变，百无一能。诚为天下笑耳。&rdquo;这一篇言语，说得张昭并无一言回答。</p>
		</blockquote>
		<p>
			- 张昭一上来用的就是第一个技术，而且是先把诸葛亮<b>抬上去</b>（自比管乐、如鱼得水）再揭短：怎么刘备得了你反而地盘还变小了呢？</p>
		<p>
			- 这个是事实俱在，诸葛亮只能<b>拔高境界</b>：<b>道德上不忍</b>夺同宗之基业，<b>战略上别有良图</b>。</p>
		<p>
			- 但张昭不买账，继续揭短，仍然<b>先捧后摔</b>，<b>列举</b>诸葛亮<b>种种败绩</b>。</p>
		<p>
			- 于是诸葛亮用非常长的篇幅<b>列举种种有利于自己的事实</b>，包括起点低、客观条件差、照顾百姓等等，以及自己就是在这样的条件下也取得了种种胜利；</p>
		<p>
			- 然后搬出古人，指出韩信<b>也曾如此不堪</b>，&ldquo;夫信久事高皇，未尝累胜&rdquo;；</p>
		<p>
			- 最后<b>用比烂反击</b>：我至少实干，而你张昭只会空谈。</p>
		<p>
			注意，在江东出场的七个谋士之中，张昭是唯一一个使用先捧后摔战术的。其他六人都是一上来就直接贬，表现比张昭差了一个档次。而诸葛亮唯一一次跟对手比烂，也是对张昭。比如后面严畯问他治何经典，诸葛亮并没有反问严畯说你又治何经典？因为他假设严酸就是个业余爱好者，只配看着别人治经典。诸葛亮和张昭二人真是惺惺相惜啊！</p>
		<p>
			<br />
			<strong>2.&nbsp;虞翻</strong></p>
		<blockquote>
			<p>
				座上忽一人抗声问曰：&ldquo;今曹公兵屯百万，将列千员，龙骧虎视，平吞江夏，公以为何如？&rdquo;孔明视之，乃虞翻也。孔明曰：&ldquo;曹操收袁绍蚁聚之兵，劫刘表乌合之众，虽数百万不足惧也。&rdquo;虞翻冷笑曰：&ldquo;军败于当阳，计穷于夏口，区区求救于人，而犹言不惧，此真大言欺人也。&rdquo;孔明曰：&ldquo;刘豫州以数千仁义之师，安能敌百万残暴之众？退守夏口，所以待时也。今江东兵精粮足，且有长江之险，犹欲使其主屈膝降贼，不顾天下耻笑。由此论之，刘豫州真不惧操贼者矣。&rdquo;虞翻不能对。</p>
		</blockquote>
		<p>
			- 虞翻再次列举诸葛亮败绩揭短，与张昭不同的是他把这次辩论的关键课题点出来了：到底能不能对抗曹操。而你家可是输给曹操了啊。</p>
		<p>
			- 诸葛亮先强调我方弱的客观事实，再<b>跳出这个box跟对手比境界</b>：我们虽然弱但是敢打，你们倒是强怎么只知道投降呢？诸葛亮一占领了道德制高点，虞翻就没招了。</p>
		<p>
			<br />
			<strong>3. 步骘</strong></p>
		<blockquote>
			<p>
				座间又一人问曰：&ldquo;孔明欲效仪、秦之舌，游说东吴耶？&rdquo;孔明视之，乃步骘也。孔明曰：&ldquo;步子山以苏秦、张仪为辩士，不知苏秦、张仪亦豪杰也：苏秦佩六国相印，张仪两次相秦，皆有匡扶人国之谋，非比畏强凌弱、惧刀避剑之人也。君等闻曹操虚发诈伪之词，便畏惧请降，敢笑苏秦、张仪乎？&rdquo;步骘默然无语。</p>
		</blockquote>
		<p>
			- 步骘本来想的挺好，直接点出诸葛亮就是个大忽悠，想无成本忽悠江东抗曹。本来这个质疑并不太好回答，可惜步骘用错了典故！苏秦张仪在务实派看来是历史上的正面人物！</p>
		<p>
			- 所以诸葛亮<b>抓住这个错误</b>把他<b>一棍子打死了</b>。整个回答都是在谈苏秦张仪如何，对自己是不是来忽悠的完全回避了。</p>
		<p>
			<br />
			<strong>4. 薛综</strong></p>
		<blockquote>
			<p>
				忽一人问曰：&ldquo;孔明以曹操何如人也？&rdquo;孔明视其人，乃薛综也。孔明答曰：&ldquo;曹操乃汉贼也，又何必问？&rdquo;综曰：&ldquo;公言差矣。汉传世至今，天数将终。今曹公已有天下三分之二，人皆归心。刘豫州不识天时，强欲与争，正如以卵击石，安得不败乎？&rdquo;孔明厉声曰：&ldquo;薛敬文安得出此无父无君之言乎？夫人生天地间，以忠孝为立身之本。公既为汉臣，则见有不臣之人，当誓共戮之，臣之道也。今曹操祖宗叨食汉禄，不思报效，反怀篡逆之心，天下之所共愤。公乃以天数归之，真无父无君之人也，不足与语，请勿复言。&rdquo;薛综满面羞惭，不能对答。</p>
		</blockquote>
		<p>
			- 薛综说的很实在，曹操实力如何，刘备实力如何。这个实力对比是没法用任何新的事实来反驳的。</p>
		<p>
			- 所以诸葛亮再次<b>跳出 box 跟人比境界</b>，占领道德制高点。</p>
		<p>
			<br />
			<strong>5. 陆绩</strong></p>
		<blockquote>
			<p>
				座上又一人应声问曰：&ldquo;曹操虽挟天子以令诸侯，犹是相国曹参之后。刘豫州虽云中山靖王苗裔，却无可稽考，眼见只是织席贩屦之夫耳，何足与曹操抗衡哉？&rdquo;孔明视之，乃陆绩也。孔明笑曰：&ldquo;公非袁术座间怀橘之陆郎乎？请安坐，听吾一言。曹操既为曹相国之后，则世为汉臣矣。今乃专权肆横，欺凌君父，是不惟无君，亦且蔑祖；不惟汉室之乱臣，亦曹氏之贼子也。刘豫州堂堂帝胄，当今皇帝按谱赐爵，何云&lsquo;无可稽考&rsquo;？且高祖起身亭长，而终有天下；织席贩屦，又何足为辱乎？公小儿之见，不足与高士共语。&rdquo;陆绩语塞。</p>
		</blockquote>
		<p>
			- 陆绩一看诸葛亮又上境界了，那就从境界战场跟你谈。他的办法是指出刘备的出身不如曹操高贵。陆绩说的其实也对，刘备的身世的确有问题。在特别讲出身的古代，这个是好使的。</p>
		<p>
			- 诸葛亮的做法是<b>你跟我讲事实，我就跟你讲境界；你跟我讲境界，我又跟你讲事实</b>。曹操就算生的高贵也是贼子，刘备的身份可是有皇帝认证的！</p>
		<p>
			- 然后再<b>搬出古人</b>，刘邦出身比刘备<b>更烂</b>。</p>
		<p>
			从陆绩开始，东吴群儒选择的辩论话题就越来越不像话了，完全变成了直接的人身攻击，实在上不了台面。</p>
		<p>
			<br />
			<strong>6. 严畯</strong></p>
		<blockquote>
			<p>
				座上一人忽曰：&ldquo;孔明所言，皆强词夺理，均非正论，不必再言。且请问孔明治何经典？&rdquo;孔明视之，乃严畯也。孔明曰：&ldquo;寻章摘句，世之腐儒也，何能兴邦立事？且古耕莘伊尹，钓渭子牙，张良、陈平之流，邓禹、耿弇之辈，皆有匡扶宇宙之才，未审其生平治何经典，岂亦效书生区区于笔砚之间，数黑论黄，舞文弄墨而已乎？&rdquo;严畯低头丧气而不能对。</p>
		</blockquote>
		<p>
			- 严畯揭短揭到问对方有多少 publications 上去了。</p>
		<p>
			- 诸葛亮正好来个<b>高境界</b>！世之腐儒才整天加自己的影响因子，我们只玩大的。</p>
		<p>
			- 顺手再次<b>用到古人</b>，牛人之牛，根本不是用 H-index 衡量的。</p>
		<p>
			<br />
			<strong>7.&nbsp;程德枢</strong></p>
		<blockquote>
			<p>
				忽又一人大声曰：&ldquo;公好为大言，未必真有实学，恐适为儒者所笑耳。&rdquo;孔明视其人，乃汝南程德枢也。孔明答曰：&ldquo;儒有君子、小人之别。君子之儒，忠君爱国，守正恶邪，务使泽及当时，名留后世；若夫小人之儒，惟务雕虫，专工翰墨，青春作赋，皓首穷经，笔下虽有千言，胸中实无一策。且如杨雄以文章名世，而屈身事莽，不免投阁而死，此所谓小人之儒也，虽日赋万言，亦何取哉？&rdquo;程德枢不能对。</p>
		</blockquote>
		<p>
			-&nbsp;程德枢的质问基本上等于重复了严畯的意思，有点冲动了。但是这非常正常，任何人听了诸葛亮刚才那一番话都会有这个必然反应：大哥你太狂了吧？殊不知这等于是给诸葛亮捧哏呢。</p>
		<p>
			- 于是诸葛亮提出了至今让我每次读到都肃然起敬的一个理论：君子之儒和小人之儒。每当读到这里我都感慨诸葛亮的<b>境界</b>实在太高了！原来读书还有这么读的！只觉得一股英雄之气弥漫在整个书房。</p>
		<p>
			问题是诸葛亮回答了&ldquo;你到底是不是个大忽悠&rdquo;这个问题没有？始终没有。你问他这句话是不是忽悠，他的用一个更大的忽悠回答你。</p>
		<p>
			总体来说东吴的人还是比较有品的，一旦被击中立即退出，没有死缠烂打的行为。毕竟是知识分子，不能跟市井刁民一样。我们在生活中和网络上遇到的人如果恼羞成怒，通常都会继续强词夺理下去，而且越说越烂，到最后逼得版主删帖，根本不可能让辩论过程进课本。</p>
		<p>
			可是如果我们对比任何一场现代化的辩论，比如美国总统的竞选辩论，就会发现&ldquo;舌战群儒&rdquo;其实远远不是最好的辩论，甚至可以说根本不是一个好的辩论。尤其后面这两个技术，非常不好。我说你没有把医保问题解决好，你敢用&ldquo;罗斯福也没解决好&rdquo;来当挡箭牌吗？你得说点实质的东西。</p>
		<p>
			最关键的一点，辩论，应该是关于议题的，而不应该是关于人的。两个男人在那比美，实在不是&ldquo;君子之儒&rdquo;所为啊。</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/the-shezhanqunru-of-technical-analysis</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Sat, 22 Feb 2014 01:49:09 GMT</pubDate></item><item><title><![CDATA[程序员媳妇：我老公编程有瘾]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			能上瘾的还有更糟糕的东西，比如毒品，性，色情或宝石消除游戏。<strong>而我的老公&mdash;&mdash;一个普通的小伙&mdash;&mdash;却是对编程有瘾。</strong></p>
		<p>
			会编程的人在不同的阶段会有很多不同的名称：软件开发者，程序员，编码员，黑客。我的老公，马克，和其他程序员一样，<strong>编程不仅仅是一种爱好或事业&mdash;&mdash;那是一种生活方式。</strong></p>
		<p>
			我在他的日常生活习惯和行为上经常能看到编程思维模式给他带来的影响：他的最有效的摆放袜子格的方式和他如何用最少的水和最少的洗洁精洗出最干净的盘子的方法。</p>
		<p>
			有时候，我真是受不了他的那种被编程改造的思维方式。<strong>例如，当我们对什么事情有争执时，他总是有条理的、系统性的摆出一大堆该死的逻辑关系论据。</strong></p>
		<p>
			&ldquo;逻辑上就是这样，&rdquo;要命的马克的口头禅。</p>
		<p>
			&ldquo;去死吧！我是一个人，不是一个布尔条件！&rdquo;明显带有愤怒的我会这样反驳他。</p>
		<p>
			马克的大脑里全是括弧，标记，分号和逻辑操作符。对我来说，这些全是噪音。</p>
		<p>
			即使当他不在电脑前面时，他也是翻来覆去的想那些他之前编写的代码和语法。最近，当我在为编辑部给一些晚会和周末活动做计划时，我老公表现的异常兴奋&mdash;&mdash;因为这意味我不在家时他可以继续编程了。</p>
		<p>
			&ldquo;你真讨厌，&rdquo;我说。&ldquo;我觉得你编程时更享受，而不是和我在一起时。&rdquo;</p>
		<p>
			<strong>我有跟我同病相怜的女人们&mdash;&mdash;一些程序员的老婆和女朋友会告诉我她们的男人是如何经常忘记吃饭、喝水或洗澡的。</strong></p>
		<p>
			她们每个人都尝试过用自己的办法来阻止她们心爱的男人编程：</p>
		<p>
			有一个女人把他丈夫的电脑藏了起来。她用她的淫威命令老公去打扫房间。</p>
		<p>
			另外一个年轻的女孩采用了一个完全不同的策略，她裸体在他的男朋友面前扭来扭去，企图吸引他的注意力。这样也失败了。</p>
		<p>
			我真的非常想知道，是什么魔力诱引马克利用一切机会去思考他的代码？是什么让编程如此招人上瘾？</p>
		<p>
			为了能彻底的理解老公的痴迷，我报名参加了加拿大最大的&ldquo;学习编程&rdquo;活动，希望能通过这种方法进入他的数字世界并找到共同空间&mdash;&mdash;不再是一个程序员的外行老婆，而是一个学习编程的太太。</p>
		<p>
			<strong>编程101</strong></p>
		<p>
			组织方把这种活动叫做HTML500：因为要吸引500人参加了这样的一个免费活动，所以起了这样一个有趣的名字。但对我来说，我感觉这个名称对我来说也许是个不好的预兆。</p>
		<p>
			学习任务是要在6小时里做出一个网站。来自温哥华Lighthouse Labs的老师给我们上了两堂晨课，指导了我们一些基本的HTML和CSS知识。我选择去做一个在线的简历。我找到一些参考手册，有一个辅导团队帮助，我就开始编写我的第一行代码了。</p>
		<p>
			我做了一个大标题，填上我的名字和我的专业职称。再添加我的邮件地址。在地址上加入超链接。我回头又去修改了大标题的颜色和风格。增加字体大小。然后上传了一张我的照片。使用快捷键R，我能立即预览到我的劳动成果。代码非常简单，只有几行，我很快就看到了我的网站变成了现实。</p>
		<p>
			学到这里，我们的免费午餐、程序员的最爱食品&mdash;&mdash;批萨&mdash;&mdash;来了。我发现自己一手拿着一片烤胡椒香肠，而另一手还在拨弄着键盘。瞧，这么快就染上了程序员的坏习惯了。但现在没时间考虑这些事情。我还要继续建设我的网站。</p>
		<p>
			一条红色的下划线出现在了一段代码下面，显示这里有问题。我上下翻动看看是什么导致了错误。文学创作者把这称为编辑；程序员把它称作&ldquo;debugging&rdquo;。我写的这几行代码想向我讲述一个故事。有几种方法能让这些代码更简洁、紧凑&mdash;&mdash;就像写作。</p>
		<p>
			在我看来，并不是这些数字和逻辑致使编程成瘾。而是这种创作出以前不存在的东西的魅力。我问辅导员，是什么让他们迷上了编程，他说是一种肾上腺素，是一种解决看起来无法解决的难题的兴奋，这会让他们把全部的时间和精力投入到其中，一干就是数小时，直到成果出现。&ldquo;这就像是在吃已经烤了数小时的鲜美烤肉&rdquo;。</p>
		<p>
			组织方说参加这个活动的人60%都是女性。每个人都有自己不同的目的来到这里，把她们的周末用在学习编程上：</p>
		<p>
			&ldquo;这是拿到工作执照最简单的方法&rdquo;</p>
		<p>
			&ldquo;本想去IKEA的，但发现这个地方也不错。&rdquo;</p>
		<p>
			&ldquo;免费午餐&rdquo;</p>
		<p>
			还有一些更有意义的原因：</p>
		<p>
			&ldquo;我喜欢探究原理，看看里面是什么，如何工作的。&rdquo;</p>
		<p>
			&ldquo;因为奥巴马总统说，&lsquo;不要只在手机上玩，去编写一个。&rdquo;</p>
		<p>
			有一些人说的跟马克曾经告诉我的非常相似：<strong>&ldquo;编程是一种不断学习的活动。我喜欢这种每天都能学到新东西的感觉。&rdquo;</strong></p>
		<p>
			在我看来，并不是这些数字和逻辑致使编程成瘾。而是这种创作出以前不存在的东西的魅力。</p>
		<p>
			这些年来，我一直认为老公和我是一对矛盾体。我是作家，他是程序员。我用文字写；他用Common Lisp和Ruby on Rails写。然而，这两种工作却要求非常相似的态度：坚持，创新和解决问题。</p>
		<p>
			如今有很多的人都在学习编程，他们并不是一些很擅长数学的人。有的是搞绘画的，有时是搞音乐的，有的是新闻记者，甚至小孩也开始扩展他们这方面的知识面，相信编程将会是将来的一种基本技能。</p>
		<p>
			有很多很好的理由促使我们学习编程&mdash;&mdash;即使简单的为了更好的理解自己的老公。你可能永远想不到你也许是多么的喜欢编程。</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/programmers-wife-my-husband-programming-was-an-addict</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 20 Feb 2014 07:13:23 GMT</pubDate></item><item><title><![CDATA[好的用户界面-界面设计的一些技巧]]></title><description><![CDATA[<p>
	如此<a href="http://goodui.org/" target="_blank">有用的文章</a>我已记不得是什么时候发现的了，但在看完的那一刻便想将之翻译，分享给大家自己也受用。</p>
<p>
	时间过了很久，来到了2014年，终于静下心来花了大把时间连同图片一起译成了中文。像我这样业余的翻译六级分数只够及格的程序员，不敢说做到<a href="http://www.zhihu.com/question/20209399" target="_blank">信雅达</a>，但求意思到位。</p>
<p>
	&nbsp;</p>
<h3>
	1 尽量使用单列而不是多列布局</h3>
<p>
	单列布局能够让对全局有更好的掌控。同时用户也可以一目了然内容。而多列而已则会有分散用户注意力的风险使你的主旨无法很好表达。最好的做法是用一个有逻辑的叙述来引导用户并且在文末给出你的操作按钮。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\0d7dafa2-9e3c-4fb3-b565-ab7b2a79d3ef.png" /></p>
<p>
	&nbsp;</p>
<h3>
	2 放出礼品往往更具诱惑力</h3>
<p>
	给用户一份精美小礼品这样的友好举动再好不过了。具体来讲，送出礼品也是之有效的获得客户忠诚度的战术，这是建立在人们互惠准则上的。而这样做所带来的好处也是显而易见的，会让你在往后的活动进展（不管是推销，产品更新还是再次搞活动）中更加顺利。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\f7a8ab34-96ae-4e8e-be78-cb07b22e0d65.png" /></p>
<p>
	&nbsp;</p>
<h3>
	3 合并重复的功能而使界面简洁</h3>
<p>
	在整个产品开发期间我们会有意无意地创建很多模块，版面或者元素，而它们的功能可能有些是重叠的。此种情况表明界面已经过度设计了。时刻警惕这些冗余的功能模块，它无用且降低了电脑性能。此外，界面上模块越多，用户的学习成本就越大。所以请考虑重构你的界面使它足够精简。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\4f4e2c88-350d-43c5-bb30-05a956d0b372.png" /></p>
<p>
	&nbsp;</p>
<h3>
	4 客户的评价好过自吹自擂</h3>
<p>
	在获得项目机会或提高项目转化率时客户的好评是一种极为有效的手段。当潜在客户看到其他人对你的服务给予好评时，项目机会会大增。所以试着提供一些含金量高的证据证明这些好评是真实可信的。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\39590dcc-33ed-43d2-b807-7bb5828df35e.png" /></p>
<p>
	&nbsp;</p>
<h3>
	5 频繁展示你的主旨来加深印象</h3>
<p>
	多次重复主旨口号这种方法适用于界面很长或者分页的情况。首先你肯定不想满屏刷出相同的信息，这样会让人生厌。但当页面足够长的时候这些重复就显示自然多了并且也不显得拥挤。所在在页面顶部放一个按钮然后在页面底部再适当放个突出的按钮的做法没有什么不妥。这样当用户到达页面底部在思考接下来该做什么的时候，你提供的按钮就可以获得一个潜在的合同或者即使用户不需要你的服务这个按钮也可以起到过滤的作用。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\6a26133f-ac1d-418e-8ca2-e707a202db39.png" /></p>
<p>
	&nbsp;</p>
<h3>
	6 将选项与按钮区分开来</h3>
<p>
	诸如颜色，层次及模块间的对比这些视觉上的设计可以很好地帮助用户使用产品：他时刻知道当前所处的页面以及可以转到哪些页面。要传达这样一个好的界面，你就需要将可点击的元素（比如连接，按钮），可选择的元素（比如单选多选框）以及普通的文字明显区分开来。在下图的例子中，我将点击操作的元素设置为蓝色，选中的当前元素为黑色。这样适当的设计可以让用户很方面地在产品的各模块间切换。但千万不要把这三种元素设计得混乱不堪。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\bc7382b2-6474-48ee-ac3a-7999d50a2683.png" /></p>
<p>
	&nbsp;</p>
<h3>
	7 给出推荐而不是让用户来选择</h3>
<p>
	当展示许多项服务时，给出一个重磅的推荐项是个不错的做法，尽管推荐的设置无法满足所有用户。这么做是有理论依据的，<a href="http://www.nytimes.com/2010/02/27/your-money/27shortcuts.html?_r=0" target="_blank">一些研究</a>已经揭示了这么一种现象：当面临的选择越多时，用户就越难做出决定。所以你可以高亮某个选项来帮助用户做出选择。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\11bb33df-87ba-4fcd-957f-a50c2d13005d.png" /></p>
<p>
	&nbsp;</p>
<h3>
	8 给出撤销操作来代替确定操作</h3>
<p>
	假设你刚点击了一个连接或者按钮，撤销操作可以让操作流畅自然，这也符合人类的本能。而每次操作都弹一个确定框则好像是在质问用户你明白不明白这个操作会产生什么后果。我还是更习惯假设用户每次操作都是正确的，其实只有极少数情况下才会发生误操作。所以，为了防止误操作而设计的确认窗口其实是不人性化的，用户每次操作都需要进行毫无意义的确定。所以请考虑在你的产品里实现撤销操作来增加用户的操作友好度吧。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\c6232551-d8c0-49a7-b6ae-90a83cc6d5a6.png" /></p>
<p>
	&nbsp;</p>
<h3>
	9 指出产品适用人群而不是做成全年龄</h3>
<p>
	你是想把产品做成大众化的呢还是有精确的适用人群？在产品定位上你需要更精确些。通过不断了解目标客户的需求及标准，你能把产品做得更好得到更多与客户交流的机会，并且让客户觉得你很专业，在这方面是独家提供的优质服务。把产品定位得精确的风险就是可能缩小了目标潜在客户的范围，也使自身变得不那么全能。但这种做得更专业的精神却反过来会赢得信任，权威。</p>
<p>
	（贴士：喜欢下图中可爱的小人物造型么？去了解<a href="http://www.linowski.ca/micropersonas" target="_blank">MicroPersonas</a>吧）</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\f1029d34-4f76-4ae6-9d37-3f17bbd2806e.png" /></p>
<p>
	&nbsp;</p>
<h3>
	10 试着直接果断而不要唯唯诺诺</h3>
<p>
	你可以通过不确定而颤抖的声音来表达传递自己的意思，当然也可以通过很自信的方式表达。如果你在界面中的表述用语多以问号结束，比如&quot;也许&quot;，&quot;可能&quot;，&quot;感兴趣？&quot; 或者&quot;想要试试么？&quot;，那么你完全还可以把语气变得更坚定一些。不过万事无绝对，或许适当放松措词让用户有自行思考的余地也是可以的。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\0be66e68-9578-4af4-a9ab-6c1398621f4a.png" /></p>
<p>
	&nbsp;</p>
<h3>
	11 界面要有鲜明对比让人容易区分</h3>
<p>
	把主要功能区从界面中突出显示出来效果会好很多。使你的主要口号醒目有很多种方法。通过明暗色调的对比来突显。通过为元素添加阴影渐变等效果让界面富有层次感来张显主题。最后，你甚至可以在色相环上专门选择互补色（比如黄色与紫色）来设计你的界面，以达到突出重心的目的。综合所有这些，最后得到的界面会使你的主要意图与界面其他元素有明显的区分，得到完美的呈现。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\7a380924-392b-43eb-a289-4aea1560c510.png" /></p>
<p>
	&nbsp;</p>
<h3>
	12 指明产地</h3>
<p>
	指明你的地区，所提供的服务，产品来自哪里意义重大，同时也将与客户的沟通引入了一个更具体带有地域特色的场景中。指出具体来自哪里，国家，省分及城市，也是一种在进行自我介绍或产品展示时被常常提及的。当你在界面设计中实现这点时，让人觉得非常友好。同时指明区域也会隐形提高产品的声誉，好上加好。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\13e20a66-11ad-48d9-bce5-e11678562052.png" /></p>
<p>
	&nbsp;</p>
<h3>
	13 精简表单内容</h3>
<p>
	人生性就懒惰，在填写表单时也是同样的道理，没人愿意填写一大堆表单字段。表单中每个字段都会有失去用户的风险。不是每个人打字都很快速的，并且在移动设备上进行输入更是相当麻烦的事情。问下自己表单中是不是每个字段都必需，然后尽量减少表单中的字段。如果你确实需要一大堆信息让用户填写，试着将它们分散在不同页面，在表单提交后还可以继续补充。过多字段很容易让整个表单显示臃肿，当然想简洁也很容易，只放少数字段。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\9df814e6-c144-450f-bdec-a2880513a247.png" /></p>
<p>
	&nbsp;</p>
<h3>
	14 暴露选项而不要将操作隐藏</h3>
<p>
	你使用的任何一个下拉框都会对用户造成信息的隐藏而需要额外的操作才能显示。如果这些信息是贯穿整个操作所必需的，那你最好把它展示出来做得更显而易见一点。下拉框最好用在选择日期，省份等约定俗成的地方。对于程序中重要的选项最好还是不要做成下拉形式。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\ef6fae1a-4d13-486d-bad5-7eb5d00a8c7a.png" /></p>
<p>
	&nbsp;</p>
<h3>
	15 把界面做得环环相扣要好过直白的排版</h3>
<p>
	一个平淡无奇行文无疑会让用户失去兴趣而继续阅读。是的，单列滚动的长页面是不错的，但是我们应该适当地设置一些小节，并且环环相扣，来提高用户的兴趣使其继续阅读。但需要注意的是节与节之间的留白不要太大。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\16cc5919-2579-484b-acf0-d443c324919b.png" /></p>
<p>
	&nbsp;</p>
<h3>
	16 不要放太多链接分散用户注意力</h3>
<p>
	为了满足各式用户的需求，在页面上放些链接链到这里链到那里是常见的做法。如果你的主要目的是想让用户点击页面最后那个下载按扭什么的话，就需要三思了。因为用户可能点击了其他链接离开页面了。所以你需要注意页面的链接数量，最好将用于导航与用于操作的链接用样式区分开。尽量移除页面不需要的链接会让用户点击到你的功能按钮。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\579134bf-e29f-4579-9c07-b9554c23408d.png" /></p>
<p>
	&nbsp;</p>
<h3>
	17 将操作的状态或者进度呈现出来</h3>
<p>
	现如今大多界面当中已经呈现了各色样式的进度条或者标明状态的图标，比如邮件有已读或未读的状态，电子帐单有支付或未支付的状态。而在界面上呈现这样的状态对于用户来说是很有必要的。这样用户就可以知道某些操作是否成功，接下来准备进行怎样的操作。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\9b3b419a-25b3-4b26-9557-4f6916698d56.png" /></p>
<p>
	&nbsp;</p>
<h3>
	18 不要让用户觉得是在完成任务</h3>
<p>
	试想界面上有这样两个按钮：一个是&quot;获取折扣&quot;，另一个是&quot;立即注册&quot;。我敢打赌大多数人会点击第一个，因为第二个按扭让人感觉不到有利可图，并且&quot;注册&quot;让人联想到填不完的表单。也就是说让用户感受到获利的按钮更有可能被点击。这种让用户感到好处的文字信息也可放在按钮旁边，不一定要做为按钮的标题。当然，正常的按钮还是有用处的，一般用于重复性操作频繁的地方。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\b10a11c0-a01e-422f-a95e-813433ccffcc.png" /></p>
<p>
	&nbsp;</p>
<h3>
	19 让操作直观而不是让人觉得找不到上下文</h3>
<p>
	不用说直接在元素身上进行操作是更直观明了的方式。比如在一个列表中，我们想让用户对每个条目进行操作那么就把按钮放到当前条目上，而不要把放到列表之外。再比如就是直接点击元素就进入编辑状态（比如页面上的地址信息点击后可以进行编辑）。这种方式比传统的选中再点击相应的按钮进行操作要简洁省事得多。当然，对于一般性的操作本身就不需要有什么上下文的，就没必要这么做了，比如页面上的前进，后退按扭。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\6db7d257-a722-4bcf-8c1f-be0c7b06143e.png" /></p>
<h3>
	20 尽量显示全部内容而不要额外页面</h3>
<p>
	在一个足够大的宽屏界面上最好还是直接给出表单，这比点击按钮再弹出表单要好很多。首先减少了点击操作，流程变得简洁也节省了时间。其次，直接呈现出表单可以让用户知道表单有多长，其实也是在告诉用户注册花不了多少时间。当然，这条规则适合注册表单非常简单的情况。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\32e2ed89-1c81-4597-be63-e85d668313bd.png" /></p>
<p>
	&nbsp;</p>
<h3>
	21 让界面平滑显示而不要死板地呈现</h3>
<p>
	用户进行操作过程中，界面上的元素会经常出现，隐藏，打开，关闭，放大缩小移位等。给这些元素增加些自然的动画，淡入淡出效果不但美观，也更符合实际，本来元素尺寸位置的变化就是一个需要时间的动画过程。但要注意动画时间不要设置过长，那样会让想尽快完成操作的用户不耐烦。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\67239b97-d5f9-4fb5-9420-930342c67176.png" /></p>
<h3>
	22 循序渐进的引导而不要直接让用户注册</h3>
<p>
	与其让用户马上注册，何不让用户先进行一些体验式的操作呢。这个体验过程可以展示程序的功能，特性等。一旦用户通过简单几步的操作了解了程序的价值所在，那么它会更愿意填写注册表单的。这种循序渐进的引导可以尽量推迟用户注册的时间但又可以让用户在没注册的情况下进行个性化设置等简单操作。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\bb0cd007-b36a-4682-a160-6e7f8adcb527.png" /></p>
<h3>
	23 过多边框会让界面四分五裂</h3>
<p>
	过程边框会喧宾夺主。不用说，边框确实在划分区域进行版块设置时有很大的作用，但同时其明显的线条也会吸引走用户的注意力。为了达到划分版块又不转移用户注意力的目的，在排版时可以将界面上不同区域的元素通过空白进行分组，用上不同的背景色，将文字对齐方式进行统一，还有就是为不同区域设置不同的样式。当使用所见即所得的界面设计工具时，我们经常在界面上方便地拖出很多区块来，这些区块多了就会显得杂乱无章。所以我们又会到处放些横线来分界。一个更好的做法是将区块垂直对齐，这样做不会让那些多余的线条来扰乱视觉。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\9d0da758-121a-4077-bc7f-7a55b7e9e174.png" /></p>
<p>
	&nbsp;</p>
<h3>
	24 展示产品带来的好处而不要罗列产品特性</h3>
<p>
	市场就是这样的，用户永远只关心自身利益而产品特性对他们来说倒不是那么重要。只有利益才更直观地体现出使用产品所带来的价值。Chris Guillebeau在他的著作《100美元起家》中指出，相比压力，冲突，烦心事和未知的未来，人们在乎得更多的是爱，金钱，认同感和自由支配的空闲时间。所以我相信在展示产品特性时回归到利益上是必要的。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\7ec01cf5-298b-43fd-a976-daff3f406a73.png" /></p>
<p>
	&nbsp;</p>
<h3>
	25 不要把产品设计得过于依赖于数据</h3>
<p>
	界面上经常需要呈现不同数量的数据，从0，1，10，100到10000+等。这里存在个普遍的问题就是：在程序最开始使用的0条数据到过度到有数据之前，该如何进行显示界面。这也是我们经常忽视了的地方。当程序初始没有数据时，用户看到的就是一片空白，此时用户可能不知道该进行哪些操作。利用好没有数据的初始界面可以让用户学习和熟悉如何使用程序，在程序中创建数据。力臻完美永远是我们追求的目标，界面设计也不例外。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\5bd3f821-0423-4199-9db4-a7eabd763c43.png" /></p>
<p>
	&nbsp;</p>
<h3>
	26 默认将用户引入</h3>
<p>
	将界面做成默认用户选中想要使用你的产品，意味首如果用户真的需要使用，那么可以直接点击确定而不需要额外点选了。当然，也有另一种做法就是默认不选中服务，用户需要的话可以手动点选。前者这种设计更好的原因有两点。一是用户不需要额外点选，非常省事，因为默认设置为用户需要我们的产品或服务。二是这种做法某种程度上是在向用户推荐产品，暗示了其他人都选择了我们。当然，将界面设计成默认选择的样子多少存在点争议，有点强迫用户的感觉。如果你想道德一点，你可以要么把让用户选择的文字写得模棱两可，要么使用双重否定这样不那么直白的描述，这两种方式都可以让用户觉得没有那么强的感觉是被强迫选择使用产品的。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\5db388b1-dac8-4f8e-9d81-91521c0d6855.png" /></p>
<p>
	&nbsp;</p>
<h3>
	27 界面设计得一致，不要增加用户的学习成本</h3>
<p>
	自从Donald Norman的一系列著作面世后，界面设计中尽量保持一致性成了一个普遍遵循的准则。在设计中保持一致性可以减少用户的学习成本，用户不需要学习新的操作。当我们点击按钮，或者进行拖拽操作，我们期望这样的操作在整个程序的各个界面都是一致的，会得到相似的结果出来。反之我们需要新情境下重新学习某种操作会产生何种结果。可以在很多方面下功夫来实现一个一致的界面，包括颜色，方向，元素的表现形式，位置，大小，形状等。不过在让界面变得一致之前，记住一点，适当的打破整体的一致性也是可取的。这偶尔的不一致性的设计用在你需要强调的地方可以起到很大的作用。所以世事无绝对，我们应遵从一致的设计准则，但适当地打破这种常规。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\a9237bc1-76a8-4d70-a6d2-813b62b26090.png" /></p>
<p>
	&nbsp;</p>
<h3>
	28 使用较贴切的默认值会减少操作</h3>
<p>
	适当的默认值和预先填充好的表单字段可以大量减少用户的工作量。在节省用户宝贵的时间上面，这是种非常常见的做法，可以帮助用户快速填完表单或者注册信息。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\3b1b1353-6cc5-45a2-a926-28678cff2d8c.png" /></p>
<p>
	&nbsp;</p>
<h3>
	29 遵从一些约定而不要去重新设计</h3>
<p>
	界面设计中遵从约定的准则跟之前的界面一致性准则很相似。如果我们遵从了界面设计中的一些约定，用户用起来会很方便。相反，不一致和没有遵从约定的设计则会提高学习成本。有了界面设计中这些约定，我们想都不用想就知道界面右上角（大多数情况下）的叉叉是关闭程序用的，或者点击一个按钮后我们能够预测到将会发生什么。当然，约定是会过时的，随着时间的推移，同样的操作也有可能被赋予新的含义。但要记住，当你在界面中打破这些常规时一定要目的明确，并且出发点是好的。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\6672118e-9b3b-4f15-b81c-83e57c6fa86a.png" /></p>
<p>
	&nbsp;</p>
<h3>
	30 让用户觉得可以避免失去而不是获得</h3>
<p>
	我们喜欢成功，没有谁愿意失败。根据心理学得到的可靠结论，人们一般更顷向于避免失去拥有的东西而不是获得新的利益。这一结论也适用于产品的设计和推广中。试着说明你的产品会帮助客户维护他的利益，保持健康，社会地位等要好过告诉客户这个产品会带来一些他未曾拥有的东西。比如保险公司，它是在销售我们出事之后可以得到的大笔赔偿呢还是在强调可以帮助我们避免失去拥有的财产？</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\c1ed304f-6fe4-42f0-8688-501e9a32a42e.png" /></p>
<p>
	&nbsp;</p>
<h3>
	31 具有层次的图形化展示优于直白的文字描述</h3>
<p>
	具有层次的设计可以将界面上重要的部分与不次要部分区分开来。要让界面层次分明，可以在这些方面做文章：对齐方式，间距，颜色，缩进，字体大小，元素尺寸等。当所有这些调整运用得适当时，可以提高整个界面的可读性。相比在一个很直白的界面上用户一眼就可以从上瞟到底的设计，这样分明的设计也可以让用户放慢速度来慢慢阅读。这样也使界面更有特色一些。就好比一次旅行，你可以乘坐高铁快速到达景区（从页面顶部瞟到底部），但你也可以慢行以欣赏沿途风光。所以层次分明的设计让眼睛有可以停留的地方，而不是对着空白单调的一个屏幕。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\757897b1-6ffe-4694-8727-e344a6c1a83c.png" /></p>
<h3>
	32 将有关联的功能分组而不是杂乱无章</h3>
<p>
	将各个功能项分组合并起来可以提高程序的可用性。有点常识的人都知道刀子和叉子，或者打开文件和关闭文件是放在一起的。将功能相近的元素放在一起也符合逻辑，符合我们平时的认知。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\5dac5f76-d683-4961-9092-b29fa90cbc4b.png" /></p>
<p>
	&nbsp;</p>
<h3>
	33 使用内联的验证消息而不是提交后再验证</h3>
<p>
	在处理表单时，最好立即检测出用户所填写内容是否符合要求然后给出验证消息。这样错误一出现能就能得到改正。相反，提交后再检查表单会给出错误消息，会让用户感到乏力又要重复之前的工作。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\c51e2dd9-763a-4d71-8cf6-f12d1985c244.png" /></p>
<h3>
	34 放宽对用户输入的要求</h3>
<p>
	对用户输入的数据，尽量放宽限制，包括格式，大小写什么的。这样做可以更人性化一点，也使得界面更加友好。一个再恬当不过的例子就是让用户输入电话号码的时候，用户有很多种输入方式，带括号的，带破折号的，带空格的，带区号和不带区号的等等。如果你在代码中来处理这些格式的问题，代价也只是你一个人多写几行代码而以，却可以减少无数用户的工作量。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\16dc5cf9-4818-4abe-9893-4174284b7af6.png" /></p>
<h3>
	35 让用户感觉需要快速做出响应而不是毫无时间观念</h3>
<p>
	适当的紧迫感是个有效的战术可以让用户立即做出决定而不是等上个十天半个月。重要的是这种战术屡试不爽，因为它暗示了资源的紧缺或者活动的时间有限，今天可以买，但明天可能就无法这么低价了。另一方面，这一战术也让用户感到会错失一次大好的机会，再一次，应用了人们害怕失去的本性。当然，这种战术会被一些人嗤之以鼻，认为是不耿直的做法。不过，这只是种战术而以，并且在保持合法性的前提下应用也无伤大雅。所以请不要为了营销而在界面上制造紧迫的假象。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\c9313d32-4065-42bd-ac02-58594c24c9a5.png" /></p>
<p>
	&nbsp;</p>
<h3>
	36 使用饥饿营销</h3>
<p>
	物以稀为贵。饥饿营销给出的信息就是东西不多，只剩几件，明天再来，可能没了。你去比较一下批发与限量版的东西他们的价格差距有多大就知道了。回过头来看，那些批发商或者大零售商，他们也使用饥饿营销，以获得更好的销量。但在软件行业，我们经常会忘记有饥饿营销这回事。因为数字产品是可以很容易拷贝复制的，不存在缺货的情况。其实，在界面设计中，也可以将其运用起来与现实中的资源紧缺进行联系。想想一次网上研讨会的门票，想想你一个月可以服务的人数限制，这些信息都可以告知用户是有限的。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\32c62ba1-dad6-4d62-b6ff-f99197a7339a.png" /></p>
<p>
	&nbsp;</p>
<h3>
	37 让用户选择而不是重新填写</h3>
<p>
	这一界面设计中的经典准则是有心理学依据的，相比要让某人回想想某样东西，从一堆东西中认出某样东西会更容易些。辨识出一样东西只需要我们稍微回忆一下，通过一些线索就可以完成。而回想则需要我们全面搜索自己的大脑。也许这也是为什么试卷上选择题会比简答题做得快的原因。所以试着在界面上展示一些用户之前涉及到的信息让他们进行选择，而不是让他们想半天然后自己填写。</p>
<p>
	<img alt="" src="/upload/offsite/2014.02.20.b18e4260-0b46-4e07-94b9-75535f57df0a\41e984ba-fca9-49c9-ad7d-6bbd7c27c6b7.png" /></p>
<p>
	&nbsp;</p>
<p>
	原文地址：Good UI&nbsp;<a href="http://goodui.org" target="_blank">http://goodui.org</a></p>
<p>
	并且不时会有更新。。。</p>
<div id="MySignature">
	&nbsp;</div>
]]></description><link>http://zackyang.com/post/some-tips-for-good-userinterface-design</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 20 Feb 2014 01:00:19 GMT</pubDate></item><item><title><![CDATA[程序员的《权利法案》]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-59724">
		<!-- BEGIN .entry-header --><!-- BEGIN .entry-header --><!-- BEGIN .entry-meta --><!-- END .entry-meta --><!-- BEGIN .entry -->
		<div class="entry">
			<p>
				&ldquo;<span class="wp_keywordlink">程序员</span>应有的权利你都要去争取！而且记住：你可以让公司做出改变，要不然你就换一家公司。&rdquo;</p>
			<p>
				一个公司愿意付给一个开发人员6万~10万美元的薪水，却用糟糕的工作条件以及破烂的硬件设施摧残他，这对我来说是难以置信的。不管怎么说，这买卖一点都不划算。然而，我却总能看到这样的事情。这让人很震惊，竟然有这么多公司依然没有为软件开发者的成功提供必要的基础条件。</p>
			<p>
				我提议，我们应该制定一个针对程序员的《权利法案》，以防止公司拒绝给程序员提供取得成功所必需的基础条件，最终达到保护程序员权利的目的。</p>
			<p>
				<a class="cboxElement" href="/upload/offsite/2014.02.20.24aa27af-ebb5-40b0-92b0-2b99fe4590b3\82d3361c-1a42-4286-88d9-ccbc8d77a25f.jpg" rel="lightbox[59724]" title="程序员的《权利法案》"><img alt="20140125200436062" class="alignnone size-full wp-image-59725" src="/upload/offsite/2014.02.20.24aa27af-ebb5-40b0-92b0-2b99fe4590b3\82d3361c-1a42-4286-88d9-ccbc8d77a25f.jpg" /></a></p>
			<p>
				<span>译者注：《权利法案》，又译《人权法案》（英文：The Bill ofRights），指的是美国宪法中第一至第十条宪法修正案。权利法案包括了言论、新闻、宗教与集社等方面的自由与权利。权利法案也向美国人民保证，法案中所列出的权利并不是美国人民所能够享有的全部权利，而仅仅是人民所拥有的最重要的权利。</span></p>
			<p>
				<strong>1. 每个程序员都应该有两个显示器</strong></p>
			<p>
				在LCD价格跳水以及双输出的显卡如此普及的情况下，如果你还把你的开发者限制在一个屏幕上，那你一定是疯了。通过把电脑桌面双倍扩大可以获得生产力的提升，这已经被充分论证过了。如果你想把开发者的生产力发挥到极致，请确保每个开发者都有两个显示器。</p>
			<p>
				<strong>2. 每个程序员都应该有一台快速的电脑</strong></p>
			<p>
				程序员必须运行很多软件才能完成他们的工作：开发环境、数据库引擎、网络服务器、虚拟机，如此等等。运行所有这些软件需要一台快速的电脑，再配上很多内存。程序员的电脑越快，他们每次编译、调试的周期就越短。我不是让你当&ldquo;发烧友&rdquo;，花天价去购买最新、最顶级的配置&mdash;&mdash;但是，你也得向高配置看齐吧。给你的开发者配备快速的、带有很多内存的电脑吧。眼巴巴地盯着进度条等待绝对是一种浪费！</p>
			<p>
				<strong>3. 每个程序员都应该自己选择鼠标和键盘</strong></p>
			<p>
				在大学的时候，我经营过一个代客油漆的业务。我雇用的每一位油漆工都需要他们自己购买刷子。这是我早期积累的经验之一。将一把标准的刷子扔给一位新的油漆工是行不通的。这些&ldquo;公司标配的&rdquo;刷子不被爱惜，很快就会沦落到破损不堪的状况。但是，那些自己买刷子的油漆工很珍惜他们的刷子。他们懂得欣赏花20美元买来的专业刷子与那些从一元店里买来的一次性刷子之间的差别。拥有自己的刷子让他们产生一种持久的责任感和手艺人的感觉。程序员应该和他们的鼠标以及键盘保持一种相同的关系&mdash;&mdash;它们是我们用来实践我们手艺的最基本的日常工具，我们应该加以善待。</p>
			<p>
				<strong>4. 每个程序员都应该有一把舒适的椅子</strong></p>
			<p>
				别小看这个问题！很大程度上来说，我们靠屁股每天坐上8个小时来谋生。为什么不在一把舒适的、设计优良的椅子上度过那8小时呢？要坐8个小时啊，仅仅给程序员提供勉强过得去的椅子是不够的，要让他们坐得愉悦才行！当然，你雇用程序员主要是为了他们聪明的脑袋，但是也别忘了照顾他们的其他重要部位。</p>
			<p>
				<strong>5. 每个程序员都应该能快速接入互联网</strong></p>
			<p>
				任何东西只要能&ldquo;偷&rdquo;来的，好的程序员从来不会自己去写。互联网是有史以来&ldquo;偷&rdquo;东西的最佳去处。我完全赞成&ldquo;读万卷书&rdquo;，但如果没有快速响应的互联网搜索、不能弹指间找到我想要的东西，很难想象我是否还能正常开展工作。</p>
			<p>
				<strong>6. 每个程序员都应该有安静的工作环境</strong></p>
			<p>
				编程需要全神贯注。程序员在一个嘈杂的环境里是没法高效工作的。请确保你的工作环境能够保护程序员的&ldquo;心流&rdquo;状态，否则他们宝贵的时间将在各种干扰之下消耗殆尽。</p>
			<p>
				<span>译者注：心理学家米哈里齐克森&middot;米哈里（Mihaly Csikszentmihalyi）将心流（flow）定义为一种将个人精神力完全投注在某种活动上的感觉；心流产生时会有高度的兴奋及充实感。</span></p>
			<p>
				我们要求的这几个基本权利是容易办到的。这些要求并不过分，但它们对于软件开发者工作生活的质量起着关键性的作用。如果你所在的公司在这方面做得不好，那就改善一下吧，这既不需要大量的资金投入，做起来也并不难。<strong>作为程序员，你要去争取应有的权利！</strong>而且记住：你可以让公司做出改变，要不然你就换一家公司。</p>
			<!-- p><a target="_blank" rel="nofollow" href="http://www.hi-vps.com/?utm_source=jobbole.com"><img src="/upload/offsite/2014.02.20.24aa27af-ebb5-40b0-92b0-2b99fe4590b3\21520353-5db5-4af4-9209-bae88cf3ca64.jpg"></img></a></p --></div>
		<!-- END .entry --><!-- JiaThis Button BEGIN --><!-- JiaThis Button END --></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/programmers-bill-of-rights</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 20 Feb 2014 00:57:01 GMT</pubDate></item><item><title><![CDATA[IT经理，你可以管理多少人]]></title><description><![CDATA[<div id="readability-page-1" class="page"><div class=""><p>Johanna Rothman是一位经验丰富的管理咨询师，负责向IT经理和项目团队提供管理方面的咨询，并出版了多本管理领域的著作。在最近的一篇<a href="http://java.dzone.com/articles/how-many-people-can-you-manage" target="_blank">文章</a>中，她提出了一个比较尖锐和值得深思的问题：作为一个管理者，你能管理多少人？</p><p>在Johanna的第一任管理者角色中，她只“管理”一个人。被管理的那人并不需要太多的管理。</p><blockquote>
<p>他指导我如何管理的时候比我管理他的时候还要多。他及时阻止了我犯许多错误，这对我来说真是很棒的一次实践。</p>
<p>之后，在我的管理生涯中，我管理了一个15个测试工程师的“团队”。他们并不算是个团队，而是一个群体。我不知道为什么我上司要坚持称他们为一个团队，但是我的上司做到了。我的角色是使测试人员与项目良好的配合。我不认为我的角色是将工程师分配到项目中去，因为大家会长期呆在项目中。我不属于那种可以把人员如同棋子一样任意移动的管理误区中的一员，这也是为什么我认为我的角色是“牵线搭桥”的作用。</p>
</blockquote><p>Johanna对于这个测试工程师群体还做了些什么呢？</p><ul>
    <li>与每个人进行一对一的沟通。有些一对一的沟通是每周都进行的，有些是每两周一次的。但我至少每两周都和每个人进行一次私人谈话。每两周我都一对一的与每个人进行职业发展对话。</li>
    <li>召开每周一次的会议并且每个测试团队的人都会在组会上学到一些东西。这是一个社区实践的会议。有时是有关于技术实践的，有时是关于工具的，有时是关于项目管理技术的。由这个小组决定他们想要学习什么，由我来促进并推动会议的开展并促进他们学习。人们在会上轮番展示一些成果。是的，我也会去展示，有时候，我还会邀请公司中的其他人来展示。我们有个很长的清单，列满了要学的东西。</li>
    <li>我确保每个人都知道其他人在做什么。但并不是通过一连串的进度会议来了解。我记录每个人的电子邮件的状态，整理它们，并通过电子邮件发给所有人。如果有人感兴趣的话，可以阅读它，如果不感兴趣，他们可能将它移到垃圾桶。我当时的想法是，既然他们都工作在不同的项目，他们可能会发现一些对方可能想知道的事情，我知道没有足够的技术能力，无法为他们解决技术问题。如果必要的话，我可以协助他们解决问题。可以提供信息，他们可以跟进。</li>
    <li>我确保正确的人会被邀请到合适的会议中。这件事比听起来更加困难。有人不想去参加所有的会议，但却被邀请了。我必须确保正确的测试人员被邀请。</li>
</ul><p>在最近一次会议上，Johanna认识了一个约有100名工程师的公司的CTO（首席技术官），他想要一个扁平化的组织，他说“每个工程经理都应该能够管理15-20名工程师，以及他们所做的项目”。Johanna认为这很难实现：</p><blockquote>
<p>你会发现我并不是在管理我清单上面的那些项目。除了上述的管理责任之外，我拼了命的工作，并且时间满满当当。我不能再这样做了，如果你问我老公的话，我敢打赌他会说我过去很忙。晚饭后我完成了手机屏幕上所有的事。当我需要的时候，我也会在晚饭后写报告，因为我白天没有时间。</p>
<p>我做了任何有用的项目管理吗？没有。我还能管理更多的人吗？不能了。而且肯定没到20个人。为什么？因为我需要时间每周和大家碰面。</p>
<p>为什么我能管理14个人？因为在这时我已经是一位有经验的管理者了。我一直在练习。首先管理一个人，之后三个人或四个人。再之后七个、八个。当我的群体里有九个人的时候，我发现对于一些人我不得不每两周进行一次一对一面谈了。我问那些更资深的员工他们是否介意这件事，他们觉得可以接受。但是如果他们资历尚浅并且需要辅导呢？这就会是一场灾难。</p>
</blockquote><p>Johanna指出，不要有这样的理解误区：作为一个管理者，你能管理任意数量的人。如果你不关心管理的多优秀，你不能管理任何人，也没法做的很好。这个原则在在写代码和做项目中是同样适用的。如果你不在意代码的质量如何，你可以想写多少就写多少。但如果这些代码不能起作用，它们没有任何意义。如果你不关心自己对于项目管理的如何，那么你可以想管理多少项目就管理多少项目。</p><blockquote>
<p>我不是在谈论微观管理。我是在谈论如果他人需要的话，我们应当提供指导。我们应该为人们营造一个学习环境，一个让人们可以学习的地方，一次每个人每周都能相互信任的机会。就是这样，我期待我群体里的人们能够把他们余下的时间都用来学习，对自己负责。</p>
<p>但是因为我们都是员工，而且我要对整个团队都负起责任，所以我们很忙。如果我没有抽出时间来进行一对一面谈，我可能已经很多个星期没有和人们见面了，那将是错误的。作为一个管理者，如果你管理超过九个人，重新思考一下你可以做什么。如果你不是每周或每隔一周进行一对一谈话的话，那么除此之外你又做了什么？</p>
<p>管理不仅仅是微观管理，而是创造一个每个人都能做到最好的工作环境。如果你太忙以至于不能做到这点，你是真的在管理吗？</p>
</blockquote><!-- overlay --><!-- reply box --><!-- edit comment box --><!-- notification popup --></div></div>]]></description><link>http://zackyang.com/post/it-manager-you-can-control-how-many-people</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Sat, 25 Jan 2014 01:15:44 GMT</pubDate></item><item><title><![CDATA[你为自己定制的目标，为什么会失败？]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<img alt="年初规划，如何避免制定的目标失败？" height="200" src="/upload/offsite/2014.01.21.35d90caf-1e36-40a7-940d-897e05243a94\0d15a235-1fca-47d8-b694-93c2a734d8dd.jpeg" width="640" />
		<p>
			马上又要过年了，相信小伙伴已经按捺不足那颗回家的心。新的一年，大家都有新的打算。不知道你有没有进行新的计划时，大家有没有些更明确的方案呢？</p>
		<blockquote>
			<p>
				某A君：我希望今年能够变得牛逼一点。换到新的工作，结交很多新朋友，交到对象，还有赚很多钱。</p>
		</blockquote>
		<p>
			相信很多同学的新年的规划，一般也就是这样。不是说不好，不过自己最近看的某些信息得到是，这种愿望成真的概率是相当的低。据其原因，更多是没有明确到如何执行。只是个很虚幻的概念，没有完整的执行步骤。</p>
		<h4>
			<strong>愿景和目标</strong></h4>
		<p>
			目标需要靠自身的努力去达成。这种东西应该是&rdquo;清晰，现实，可衡&rdquo;。<br />
			比如我希望在设计专业更牛逼一点，这个便是愿景。如果换成目标，这个描述应该是&rdquo;我要做超过50个左右的项目，其中3个能够获奖，应该是具体到某个领域的奖。亦或者，我希望能出一本书，针对那个领域的学者和专家们说的东西，我要基于自己的观点，有自己的发声方式。&rdquo;</p>
		<h4>
			<strong>执行与计划</strong></h4>
		<p>
			其实，这块东西很像很多公司做的商业计划。制定目标后没有制定相应的计划，其实就和愿景一样。<br />
			每天只会抱着那个想法不停的想，最后，年末，那个东西还只是处于想象的状态。<br />
			而如何制定这个计划，最近自己在看些文章，有些有趣的方法分享给大家。结合些许真实的案例，希望能对大家未来一年的整体规划有帮助。</p>
		<p>
			一般说计划的时候，可以依据金字塔模式写下大致的执行情况。理想的状态是，假设已经明确自己长期需要干什么，且明白每个步骤要做什么</p>
		<p>
			<strong>目标构成：下一步行动&mdash;&mdash;任务&mdash;&mdash;责任范围&mdash;&mdash;目标&mdash;&mdash;愿景&mdash;&mdash;人生意</strong></p>
		<img alt="年初规划，如何避免制定的目标失败？" height="391" src="/upload/offsite/2014.01.21.35d90caf-1e36-40a7-940d-897e05243a94\40f635a9-812e-43a5-b93e-5e6d040916f2.jpeg" width="800" />
		<p>
			如果我是某某某其实要想自己的目标更容易实现，哆啦a梦已经告诉我们怎么办。<br />
			当自己不清楚，当前要做什么的时候？就可以想想，属于自己的那个梦想，试想着我已经梦想成真。就就是所谓我已经是xxx的状态。想想那时候，我们会在干什么。不是现在我们在干什么，而是到了那个阶段时，我应该在做什么。反着回顾自己这些年干过的东西。</p>
		<p>
			如果还不能理解，举自己身边的三个例子。</p>
		<h4>
			我已经是小有名气设计师，在分享会上</h4>
		<p>
			五年后，我在某个大型交流会上。交流会只是场景，还可以变成举办个展，出版书籍，设计品大卖等等。预想的东西是你最觉得激动的东西，想起来就感到很高兴。<br />
			组成这个东西其实你是在回顾过去。就像李欣频曾说：&rdquo;现在就是即将发生的未来，现实就是还没有完成的梦想。所以你要知道其实这两件事情是同一件事情，每个现在它都会变成未来。每一天都要为你的梦想灌溉做一点点事情，不要梦想说我要赚多少钱，五年后就要去哪里，不是这样。&rdquo;</p>
		<p>
			这样细分，得到的这几年我做的事情是这样：</p>
		<h4>
			<strong>现在</strong></h4>
		<p>
			分享会上，传播我的成功经验。是些设计作品，是段影像，是些文字。他们看起来很酷，给客户带来价值，获得些奖项，最重要，它们给我带来精神，物质或兼具两者的满足感。更具有意义的是，这些东西为后来者指出一条有用高效的道路。</p>
		<img alt="年初规划，如何避免制定的目标失败？" height="391" src="/upload/offsite/2014.01.21.35d90caf-1e36-40a7-940d-897e05243a94\e3102868-fdd8-4198-a80c-517f2e408caf.jpeg" width="800" />
		<h4>
			<strong>5年时间</strong></h4>
		<p>
			过去我每年都要求自己整理作品，整理还不够，挑选部分作品参加比赛。主要是些国际性的赛事，比赛对于我像调味剂，不然回顾自己的设计时，总感觉少点味道。</p>
		<p>
			当然很多会以其他标准要求自己，看到有些人合作了大型项目或客户，看到有些人出了自己作品集得到很多人认可，看到有些人将设计经验整理成书，看到有些人将身边的问题以及解答做成故事&hellip;&hellip;</p>
		<img alt="年初规划，如何避免制定的目标失败？" height="391" src="/upload/offsite/2014.01.21.35d90caf-1e36-40a7-940d-897e05243a94\9c62b235-0101-4d94-8b95-514dd9c76772.jpeg" width="800" />
		<h4>
			<strong>5年中某个月</strong></h4>
		<p>
			一个月的时间真短，除了工作，睡觉似乎什么都没做。回想起来，就是眼睛一睁一闭，时间瞬间就过去了。</p>
		<p>
			这个月，看到某个精彩的讲演。里面说到了目标的实现办法。</p>
		<p>
			1）目标的数量别太多，也别太少。新年目标和其他目标的区别在于它需要在一年内完成，有点像是废话，然而废话往往是最容易被忽视的。 2）目标需要平衡。也许你是个工作狂，但是别忘了分出一两个目标给亲朋好友，或是培养一两个兴趣爱好。每个人都有自己的&rdquo;舒适区&rdquo;，敢于走出舒适区的人往往能够发现更广阔的天地。人，有时要对自己狠一点。 所以这个月，也是围绕几年后有东西可以分享做准备。</p>
		<p>
			针对自己的项目写了些总结，并拍摄记录其实现的过程和最终效果。包括保留前期草稿，视觉稿分类整理以及事后归档。这样的整理总结我这个月做了3个，分别在自己的博客，笔记本记录了当时的思维制作过程和延伸思考。</p>
		<img alt="年初规划，如何避免制定的目标失败？" height="391" src="/upload/offsite/2014.01.21.35d90caf-1e36-40a7-940d-897e05243a94\f455b1e6-c99f-4583-84d5-e86ad09ee7c6.jpeg" width="800" />
		<h4>
			<strong>5年中某天</strong></h4>
		<p>
			五年后要去哪里，回想起来，应该渗透在每一天。</p>
		<p>
			前段时间看到的文字，我希望有一天要去埃及，他就要每一天看看埃及的东西，上埃及的网站，或者结交一些埃及或多次去过埃及的朋友等等，他会发现其实去埃及甚至于不用花钱，可能刚好有一个机会让他可以免费去埃及，或者刚好去埃及工作学习。因为他专注在埃及这件事情，而不是专注在钱这件事情上面。当你专注在钱这件事情上，有时候发现赚到那个钱，却没有时间去埃及了。</p>
		<p>
			同样，我希望有一天站在分享会上，有东西可说。那么，我会在这段时间关注有关演讲的东西，看些说话技巧，花时间记录新的事物和经验，要求自己每次的设计有所变化，最好能结合自己每天积累的东西。不然以后上台说话，要不就不知道说什么，要不就说话结结巴巴，亦或者下面的人都睡着了。</p>
		<img alt="年初规划，如何避免制定的目标失败？" height="391" src="/upload/offsite/2014.01.21.35d90caf-1e36-40a7-940d-897e05243a94\fe44c4bf-7ab9-461a-8211-ca8b35e0061a.jpeg" width="800" /><br />
		<ul>
			<li>
				6：00起床，看相关的书籍和文章，30页或6篇文字，并分类整理，画一张草稿，规划今天的工作。</li>
			<li>
				8：00出门工作，通过听的方式阅读，或干脆什么都不想。</li>
			<li>
				12：00吃饭，饭后找一部感兴趣的讲演或短片，16-30分，收看并记录下来。</li>
			<li>
				19：30锻炼，快速走路回家，估计要30分钟左右。</li>
			<li>
				21：00学习，翻翻专业网站有什么新的东西。每天做些自己感兴趣的设计，每周出一个新的实验性设计。</li>
			<li>
				22：30临睡总结，花10分钟想想自己今天做了什么。是否和5年后那个想法相关。</li>
		</ul>
		<h4>
			我已经是美院的学生，在毕业典礼上</h4>
		<p>
			毕业了，我做了个新媒体移动互联网项目的毕业设计，蛮多人给我留言，社会和学校都很认可我。看上去，就是说这一阶段我混的还不错。</p>
		<ul>
			<li>
				每一年，我都定下目标。比如获得某个多媒体设计奖，自学或参加培训学习ios设计开发经验，成为国外国外某校的媒体设计专业交换生资格，获得某个互联网公司的实习机会/或参与类似的开源项目。</li>
			<li>
				每个月&hellip;&hellip;</li>
			<li>
				每一天&hellip;&hellip;</li>
		</ul>
		<h4>
			我已经是个好丈夫/妻子</h4>
		<p>
			我在享受家庭乐趣结婚了，我应该把更多时间放在家庭。单纯把工作当成生命的全部，应该不是我现在该做的事情。更多的时间放在家庭，双方可能在一个城市或相邻的城市。能很好的处理家庭和工作的关系，至少有时间陪陪家人。</p>
		<ul>
			<li>
				每一年&hellip;&hellip;</li>
			<li>
				每一月&hellip;&hellip;</li>
			<li>
				每一天，餐饮，我要会自己做早饭，晚饭，至少减少每天50元左右的吃饭成本；健康，为了双方考虑，可能我要每天花20分钟做体育锻炼；家务，适当的分担家里的琐碎事情，比如洗碗，买菜，扫地，洗衣等。</li>
		</ul>
		<p>
			其实这些做法，和量子物理学观点很接近。<br />
			当你看一个黑色的原点，你很注意看，专心看这个原点，这个圆点慢慢会扩大。就像你在看一个梦想，你不要去管旁边的事情，这个梦想你盯得越久，它就会慢慢扩大，你所有的机会都会来，所有的可能性都会被你看到。当你越专注在一件事情，而且你愿意花全力在上面的时候，很多机会从那里爆发出来的，你就会找到很多机会是你原来以为得花五年十年才会到的途径。</p>
		<p>
			最后，看完这些文字相信很多同学已经在按耐不住，构思了很多新的目标。后续那篇成长日记会提到另一检视目标的方法。</p>
		<h4>
			总结</h4>
		<p>
			三军未动，粮草先行。粮草便是这种具体的规划，要知道每一步的方向比盲目用力更重要。如果有可能，将你的目标告诉你的信任的人，让他们提建议和挑挑刺，顺便监督。还有，每天，每月，每年都试着回顾，总结以及下一步要做的行动，最好以文字或图像形式保存下来 相信自己，这样的成长会变的更有效率。</p>
		<hr />
		<p>
			关于上一篇坚持，有位小伙伴说的很棒，也转过来这里与大家共勉。</p>
		<blockquote>
			<p>
				<strong>@藻青菌</strong>*</p>
			<h4>
				<strong>《0.00001的努力，坚持，看着世界慢慢变好》</strong></h4>
			<p>
				我不知道每一个我们现在看很牛的设计师是如何经历过什么，但是我们却可以看到他们在为每天自己的1.0001努力的汗水，没有不努力的成功，我相信这句话是每一个成功的人心中的真言。<br />
				早上看到的一个小文章，叫别把观念弄反了，里面说到：不是因为有了希望才坚持，而是坚持才有了希望，不是有了机会才争取，而是争取了才有机会，不是因为会了才做，而是做了才会&hellip;&hellip;我想这些就是成功的必然与成功的原因。 刚刚和一位同学聊了聊，她说自己现在很多兴趣想做，但是却总要抱怨没有时间、看着很难、没有经济基础等等，我说了一句很直白的话：其实就是懒和累。<br />
				感觉自己说的很真实，这个世界没有难的事情，很多事情只是看上去难，真正做起来只会让你想象不到的简单，总是在抱怨很难，那么它永远要难的无法征服。看过一个网上的小图，一个小人站在一个楼梯的前面，望着上面不敢走，最终他失败了，而他鼓起勇气努力踏上一步的时候，站在第一个台阶上就会发现似乎并不是那样难，而后没走一个台阶都会拥有新的想法，最终走上了最高，得到了成功。<br />
				半夜写了不少，与大家共勉！</p>
		</blockquote>
		<style type="text/css">
		</style>
		<!-- Tag --></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/customize-your-goals-why-fail</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 21 Jan 2014 08:57:27 GMT</pubDate></item><item><title><![CDATA[全栈工程师就是一棵歪脖子树]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<h2>
			一个故事</h2>
		<p>
			老张有一个林场，专门种植树木，待树木成材后销到城里做家具。林场里有不少杉树，长得都非常挺拔，偏偏不知怎的长了一棵歪脖子树，长得倒是郁郁葱葱，偏偏造型奇特，别的树都力争上油，可这棵歪脖子树不仅横着长，还长得颇为怪异。老张几次都想挖掉它当柴火烧，看它那怪异的造型又忍住了，心想等这批杉树成材，一起砍掉吧。</p>
		<p>
			一到晚上夜深人静的时候，林场里就炸开了锅，杉树们极力取笑歪脖子树。&ldquo;你知道作为一棵树，我们的终极目标就是成为有用之材吗，你看旁边那个，可以做梁柱，小歪脖子，你丫能干啥啊？&rdquo;；&quot;这个臭歪脖子树，抢了我们的养分和阳光，长成这样，完全是丢我们的脸，我呸！&quot;。</p>
		<p>
			歪脖子树有自己的梦想，它要长成它喜欢的造型，如此日复一日，林场里的杉树渐渐长大了，老张决定逐步卖掉这些杉树。随着一批批杉树被运出去，奚落与嘲笑更多了。&ldquo;瞧睢人家，你左边的那棵，现在在被打造成前台，在知名大企业，右边的那棵更牛逼了，它被做成了老板桌，你知道天天用的老板是谁吗，说出来吓死你。你个臭傻逼，作为一棵树，你居然不向上长？&rdquo;</p>
		<p>
			林场里的树越来越少了，歪脖子树也有些失落，对自己的未来产生了怀疑，当初为什么不和他们一样长呢。</p>
		<p>
			有一天，一个老板和他弟弟过来买树，他弟弟是个园艺家。园艺家正在筹划一个大型的园林，一切都弄好了，唯独还差一棵造型奇特的树作为点睛之用，他找了很多地方，不是造型不满意就是人为痕迹太过于严重。终于，他看到了这棵歪脖子树，立马柏板重金购买。</p>
		<p>
			老张觉得不可思议，林场里的杉树们更是炸开了锅，&ldquo;凭什么啊，我们长这么高，它就那么点高，还长得这么怪，凭啥卖了这么高的价钱&rdquo;。原来，随着经济条件的的变好，人们有闲钱了，也愿意花钱去欣赏园艺了，长得高的树木很多，但长得怪的树木却是极为难得。</p>
		<h2>
			一棵歪脖子树</h2>
		<p>
			有些人一听这个<code>全</code>字满腔怒火，凭啥你的职业中带一个全字，你是要前端后端通吃吗，还要吃掉移动端，你是不是要抢我的饭碗。你凭什么啊，做技术就应该专精，你知道茴香豆的茴字有几种写法吗？</p>
		<p>
			记得三年前我在一篇文章<a href="http://www.iove.net/archives/1734.html">《两个重要而又容易被忽视的角色》</a>中有谈到前端工程师和产品工程师的重要性，结果有一大波后端工程师批评我，他们认为前端就是一个低端的职位，切切图写写JS就完事了，重要个屁啊。现在你来看，到处都在招前端，而且工资不比后端低，甚至略高，还不一定能请到人。</p>
		<p>
			全端工程师不是什么高大上，它只是一种职业，和DBA运维产品工程师一样，只是职业的细分。全端工程师不是要吃掉前端更不是要吃掉后端，它是环境发生到一情况况所催生的一种新的职业，它恰恰是市场更细分的结果。我能理解某些工程师的那种紧张与孤傲，早些年出现前端吞掉我们的一部分工作，现在又要炒全端吃掉我们的一部分工作，你让我们这些垂直发展的人怎么活，连茴字有几种写法你都不知道，你有什么资格拿着和我们一样的工资？</p>
		<blockquote>
			<p>
				与新技术的任何方面打交道的人,他们确信自己是在做天生的高科技业务&hellip;&hellip;在我们两人看来,他们一般都不是。在这些领域中,那些有根本性突破的研究人员是在做高科技业务。我们所有其他局外人只是他们工作成果的应用者。我们用计算机和其它新技术组件来开发我们的产品或者组织我们的事务&mdash;&mdash;《人件》</p>
		</blockquote>
		<p>
			很抱歉，不管你同不同意，我们大多数人都是技术的使用者，除了极少数的牛人之外，我们都在为产品服务。我们的客户并不想知道你有多么牛逼的算法，也不想知道你用了多少种设计模式，他们要的是，你能给我带来什么价值，能不能让我用得爽用得值。</p>
		<h2>
			一幢房子</h2>
		<p>
			我很喜欢把软件工程与建筑业相比，我很抱歉又把大家和农民工相提并论了，其实我们与他们，并没有本质上的区别，他们在搬砖，而我们在搬bit，他们晒着太阳累一点活得长一点，咱们吹着空调死得早一点。做得好一点的工程师，无非就是一个代码工匠，我们都是手艺人，手熟而已，无它。</p>
		<p>
			垂直发展是钢筋，而横向发展可能就是水泥。没有钢筋的房子建不高，没有水泥的房子也是有的，不过水泥+钢筋还是多数了吧。无需你自己是钢筋就指责水泥，就象Node.js刚出来的时候，被人指责是一班臭前端搞出来玩的的东西。任何技术都有它的适用场景，离开某个场景可能一文不值，人也一样。</p>
		<p>
			不要因为自己用Java就批评ASP.net，也无需自己开发Android就骂果粉，我知道，PHP是全世界最好的语言。如果我们能在各自喜欢的领域有更好的发展，不是更好么。你觉得横向发展不好，你不跟就是，他强由他强，清风拂山冈；他横由他横，明月照大江。</p>
		<h2>
			为什么会需要全端工程师</h2>
		<h3>
			我们需要有全局视野的人</h3>
		<p>
			老板们都说，开发人员要有产品意识，要有用户意识，如果你只做后端，恐怕你是不能理解前端对用户的重要性。其实说来惭愧，很多人误以为我是个臭前端，其实我从来没有专职做过前端，我很抱歉我站错了队。这么多年，我一直是在写点前端并厚着脸皮混在后端，作为一个低水平的臭后端，我只是更喜欢和用户接近一点而已。</p>
		<p>
			IT行业的鄙视链是很严重的，大家之间相互鄙视，或者，你换个岗去做对方的工作，我相信你就能了解到他们的工作价值了。前端说用户体验重要，后端说没有后端你前端屁都不是，彼此对调一下，你能感受更多。</p>
		<p>
			一种技术不能解决所有问题，我们需要从多种技术中权衡，到底是用Hybrid还是用Native，这是要根据你的业务场景和人员配置情况来判断的，不是说看别人写的几篇教程或者指南就能决定的。</p>
		<h3>
			创业公司越来越多</h3>
		<p>
			IT的创业公司越来越多，除了少数真正玩技术的公司，恐怕还是要玩产品的。既然是玩产品，就免不了各种设备各种平台各种兼容。新公司的资源总是有限的，单个工种的工作量又没那么饱和。所以有一个多面手在创业初期是很有帮助的，不可能为了一个iOS的客户端去专门请一个月薪上万的人来做iOS应用，再花上万的月薪找人来做Android客户端，省钱是创业公司的主流，但又希望自己的产品能全面铺开，所以全端工程师是不二之选。</p>
		<h3>
			硬件设备的发展</h3>
		<p>
			有人一定会说，硬件设备和全端工程师有半毛钱关系，还真有那么一些关系。软件最初的时候是单机版，要求的只是软件工程师，后来因为网速的提升与网络的普及，B/S取代了C和C/S，所以就演变成了后端工程师占主流地位。到现在，客户的硬件设备越来越强大，网速也越来越快，所以Web前端会占主流，而所谓的后端会越来越萎缩。不管你愿意不愿意，我认为，未来的后端，会发展到只提供Web API的数据，只需要少数工程师就能搞定。大部工作会由所谓的前端和各种客户端来完成，这就是我讲的后端已死。</p>
		<p>
			移动设备的发展和云的概念以及第三方平台，肯定对这种需求起到了推波助澜的作用。一方面，企业需要一个能掌握多种技术的人以降低成本，另一方面，也需要一个有全局视野的人来参与，他需要对产品中用到的多种技术都熟悉，所以，全端工程有时候会是一个胶水的作用。</p>
		<h2>
			结语</h2>
		<p>
			全端工程师不会替代后端工程师，也不会替代替代前端工程师，这个职业不是要替代谁，它只是让我们更好的工作，只是一种新的职业而已。胶水有胶水的价值，催化剂有催化剂用处。积极地拥抱变化吧，唯一不变的是变化的本身，你我都无法阻止。</p>
		<p>
			专精是一个方向，横向也是一个方向，没有谁比谁厉害。不用担心别人呼吸你就没有氧气了，坚持自己的发展方向，你总会有价值的。尺有所长寸有所短，不必因为彼此的发展方向不一就大动干戈，有这力气，还是多搬个砖吧，多动一下，总是要活得长一点的。我知道Master Wugui是不会同意我这个看法的。</p>
		<blockquote>
			<p>
				全端工程师，就是掌握多种技能，并能利用多种技能独立完成产品的人&mdash;&mdash;涂雅</p>
		</blockquote>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/full-stack-engineers-is-a-crooked-neck-tree</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 21 Jan 2014 05:20:08 GMT</pubDate></item><item><title><![CDATA[全栈工程师到底有什么用]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="artibody">
		<p>
			　　最近国内外都在流行一个词叫Full Stack，中文翻译过来叫全栈工程师，也叫全端工程师。微博上很多专业人士都在讨论全端工程师，有赞有毁的。我对全端工程师的定义是：掌握多种技能，并 能利用多种技能独立完成产品的人。打外比方，全栈工程师就是一个能独立盖一幢10层小洋楼的人，而普通工程师，则是可以和一群人盖一幢摩天大楼的人。至于 要掌握哪些技能，我觉得这个要跟从事的行业与技术方向有关，做互联网的和做软件的是不一样的，即使是做互联网的，后端也可以分为很多种技术流派。</p>
		<p>
			　　8/2定律在哪都适用，全栈工程师就是掌握20%常用技能的人，但这20%的技能会有80%的几率被用到，剩下那80%不常用的，让我们Google吧。</p>
		<p>
			　　有人说，全栈工程师在中国已经很多年了，他们叫站长。这个说话有点靠谱但又不那么靠谱，我自己也做过站长，深知作为一名站长需要掌握很多种技术。不靠谱的是，很多站长其实并没有真正写过多少代码，而是熟练利用一些建站软件来建站。</p>
		<p>
			　　<strong>全栈工程师的价值</strong></p>
		<p>
			　　有人说了，你再牛逼，你懂五种技术，你能干五个人的活吗？全栈工程师并不是说一个人能干几个人的活，而是要从多个方面来看这个问题。</p>
		<p>
			　　<strong>全局性思维</strong></p>
		<p>
			　　现代项目的开发，很少说只用到一两种技术的，特别是移动互联网大潮下。随便一个互联网项目中用到的技术，就会需要用到后端开发、前端开发、界面设 计、产品设计、数据库、各种移动客户端、三屏兼容、restFul API设计和OAuth等等，一些比较前卫的项目，可能会用到Single Page Application、Web Socket、HTML5/CSS3这些技术，还有像第三方开发像微信公众号微博应用等等。</p>
		<p>
			　　Web前端也远远不是从前的切个图用个jQuery上个AJAX兼容各种浏览器那么简单了。现代的Web前端，你需要用到模块化开发、多屏兼容、MVC，各种复杂的交互与优化，甚至你需要用到Node.js来协助前端的开发。</p>
		<p>
			　　所以说一个现代化的项目，是一个非常复杂的构成，我们需要一个人来掌控全局，他不需要是各种技术的资深专家，但他需要熟悉到各种技术。对于一个团队特别是互联网企业来说，有一个全局性思维的人非常非常重要。</p>
		<p>
			　　像如果是我经手的项目，我肯定会注意到网页优化，也会考虑到API来兼容各种客户端，更会考虑到三屏兼容的问题。不会说项目中完全使用AJAX而不顾SEO，也不会为了功能性而忽略访问速度，我会很好的把握这个平衡，因为我知道它们的权重与实现成本。</p>
		<p>
			　　<strong>沟通成本</strong></p>
		<p>
			　　项目越大，沟通成本越高，做过项目管理的人都知道，项目中的人力是1+1&lt;2的，人越多效率越低。因为沟通是需要成本的，不同技术的人各说各话，前端和后端是一定会掐架的。每个人都会为自己的利益而战，毫不为已的人是不存在的。</p>
		<p>
			　　而全栈工程师的成本几乎为零，因为各种技术都懂，胸有成竹，一不小心自己就全做了。即使是在团队协作中，与不同技术人员的沟通也会容易得多，你让一 个后端和一个前端去沟通，那完全是鸡同鸭讲，更不用说设计师与后端了。但如果有一个人懂产品懂设计懂前端懂后端，那沟通的结果显然不一样，因为他们讲的， 彼此都能听得懂。</p>
		<p>
			　　<strong>创业公司</strong></p>
		<p>
			　　对于创业公司来说，全端工程师的价值是非常大的，创业公司不可能像大公司一样，各方面的人才都有。所以我们需要一个多面手，各种活都能一肩挑，独挡 多面的万金油。对于创业公司，不可能说DBA前端后端客户端各种人才全都备齐了，很多工作请人又不饱和，不请人又没法做，外包又不放心质量，所以全端工程 师是省钱的一妙招。虽然说全端工程师工资会比一般的工程师会高很多，但综合下来，成本会低很多。</p>
		<p>
			　　<strong>全栈工程师的困境</strong></p>
		<p>
			　　我讲技术有两个发展方向，一种是纵向一种是横向的，横向的是瑞士军刀，纵向的是削铁如泥的干将莫邪。这两个方向都没有对与错，发展到一定程序都会相互溶合，就好比中国佛家禅修的南顿北渐，其实到了最后，渐悟与顿悟是一样的，顿由渐中来。</p>
		<p>
			　　如果一个公司不太懂全栈工程师的价值，那么全栈工程师的地位将会很尴尬，说得不好听一点，全栈工程师就是什么都会，都么都不会。曾经有一次面试，对 方问我很基础的问题，我答不上来，我能做出产品，也知道什么是怎么一回事，我也不会犯那些错误，但我就是答不上概念，要考倒我非常容易。所以在应聘面试的时候，有些时候会吃亏，你可能会不如哪些在某一方面钻得很深的人工资拿得高。</p>
		<p>
			　　由于经常在各种技术穿梭，我会经常忘记代码的语法和一些API，所以我经常需要去查API甚至查语法，我觉得没有Google我几乎没法工作。这在某些人的眼里，是技术不够的表现。我记的只是一个Key，一个如何找寻答案的索引，而不是全部，人脑不是电脑，我不可能要求我能记下所有的东西。</p>
		<p>
			　　有一次面试官问我一个问题，我说我不知道，但我猜大概是如此这般，对方问我，你为什么这么猜，我说凭直觉，对方笑了笑没说话。面试完后我一查，果然和我猜的差不多。没错，我就是凭直觉，但这种直觉和女人的直觉不一样，这种直觉是技术上的直觉，是你过去技术经验累积的一个反射。</p>
		<p>
			　　<strong>为什么我会成为全栈工程师</strong></p>
		<p>
			　　我相信很多全栈型工程师会和我一样，是因为要创业才成为全栈型工程师的。我有一颗创业和做产品的心，而且我又是一个不愿意麻烦别人的人，有些人擅长整合资源，空手套白狼，但我显然不是这种人，所以我只好自己做了。</p>
		<p>
			　　在经历过两次孤独的创业之后，我发现我并不是一个适合独立创业的人，所以，我成为了一个全端工程师。我最初是做ASP，后来自己创业写客户端用 Delphi，然后写了三年的ASP.Net，2010年的时候因为公司需要开始做iOS开发。Web前端是一直自己在做，项目中的的 Javascript基本都是我自己在做。</p>
		<p>
			　　我热爱写代码，热爱重复发明轮子，热爱新技术，我想这也是我成为一个全栈工程师的重要原因。</p>
		<p>
			　　于我自己来说，我觉得全端工程师的乐趣要比一般工程师来得多，因为你知道一个产品的形态，你可以去设计一个产品，你是从全局的视野来做事情，你得到的成就感会更多一些。</p>
		<p>
			　　来源：投稿，<a href="http://iove.net/archives/what-is-full-stack-engineer.html" target="_blank">原文链接</a>。</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/what-was-stackwide-engineers</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Thu, 16 Jan 2014 08:50:01 GMT</pubDate></item><item><title><![CDATA[优秀的开发人员和测试人员应有的态度]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			Rajaraman Raghuraman是一位具有丰富经验的软件软件从业者，是AgileDevTest博客(http://agiledevtest.blogspot.com)网站的站长，以及电子书《Programmer&#39;s Motivation for Beginners》的作者。针对优秀的软件开发人员和测试人员应该具有什么样的职业态度，他专门撰文进行了阐述。</p>
		<p>
			在<a href="http://agiledevtest.blogspot.com/2013/02/attitude-of-great-software-developer.html">针对软件开发人员的文章</a>中，Raghuraman认为软件开发是一种艺术，而不是一门科学。你可以学习软件开发的各种技术，不过还需要对编码有着充分的热情。如果你是这样的人，那么就可以成为&ldquo;伟大的开发者&rdquo;。Raghuraman列出了优秀的开发人员应该具有的态度：</p>
		<p>
			<b>态度</b><b>1</b><b>：缺陷表明我编写优秀代码的能力出现了问题</b></p>
		<p>
			修改缺陷是软件开发人员的日常活动。显然，缺陷是开发人员最大的敌人。当修改缺陷的时候，又有多少人能想到以下几点呢：</p>
		<ul>
			<li>
				起初的时候，我能做些什么来避免这个缺陷呢？</li>
			<li>
				我怎么能让这个缺陷逃过我的眼睛呢？</li>
			<li>
				好了，既然问题已经产生了。我下次该如何避免相同的错误呢？下一步该做些什么呢？</li>
		</ul>
		<p>
			事实上，很少有开发人员这么想。</p>
		<p>
			愿意成为优秀开发者的人应该将缺陷视为其位置的一种威胁、个人可信性的一种威胁以及编程技巧的一种威胁。正是这种态度能够使其成为伟大的开发者。</p>
		<p>
			<b>态度</b><b>2</b><b>：测试人员，有本事就在我的代码中发现缺陷</b><b> </b></p>
		<p>
			有多少人具有这样的态度呢？很多开发人员认为测试的任务就是发现缺陷。的确如此，但是这并不意味着开发人员就可以将缺陷视为理所应当的事情。优秀的开发者愿意邀请测试人员在他的代码中寻找缺陷。他们对自己的代码有这样的自信。</p>
		<p>
			<b>态度</b><b>3</b><b>：在代码质量问题上不妥协</b></p>
		<p>
			对于开发者来说，最重要的事情就是代码质量了。这包括正确的编码标准、使用恰当的设计和重构保证代码更加可维护等等。但是，我们通常会因为一些众所周时的原因在代码质量问题上妥协，比如面临时间和进度的压力。优秀的开发者永远不应该在代码质量上妥协，不管所面临问题是什么。</p>
		<p>
			<b>态度</b><b>4</b><b>：自信但不傲慢</b></p>
		<p>
			优秀的开发者应该对自己的能力有自信，但是不应该对其他开发人员和测试人员傲慢。他应该始终记住他是团队中的一员，这个团队要准时高质量地完成项目的共同目标。</p>
		<p>
			<b>态度</b><b>5</b><b>：感激测试人员</b></p>
		<p>
			尽管优秀的开发人员工作非常努力认真，但是测试人员依然可能在他的代码中发现缺陷。如果这样的话，感谢这些优秀的测试人员。优秀的开发人员应该感谢测试人员所发现的缺陷。他应该记住这一点，他的敌人是缺陷，而不是做测试的人。</p>
		<p>
			在<a href="http://agiledevtest.blogspot.com/2013/02/attitude-of-great-software-tester.html">针对软件测试人员的文章</a>中，Raghuraman认为开发人员和测试人员的工作方向正好相反，但是有着共同的目标，那就是生产高质量的软件。他认为优秀的测试人员应该具有如下的态度：</p>
		<p>
			<b>态度</b><b>1</b><b>：我要不惜一切代价破坏软件</b></p>
		<p>
			不要产生误解！测试人员的工作就是要发现缺陷，在这个过程中，要随着时间的推移，使软件变得越来越好。缺陷是测试人员的好朋友，因此他最重要的事情就是不惜一切代价破坏软件，发现漏洞。这个过程中，可以系统性地执行测试用例，也可以进行临时测试或探索性测试。</p>
		<p>
			如果你想成为优秀的测试人员，那么你的态度应该是&ldquo;不惜任何代价破坏软件并查找缺陷&rdquo;。</p>
		<p>
			<b>态度</b><b>2</b><b>：优秀的开发人员，我一定要在你的代码中找到缺陷</b></p>
		<p>
			不知道有多少测试人员能有这样的态度？</p>
		<p>
			但是如果想成为优秀的测试人员，就需要有这样的态度：不管开发人员多优秀，也要努力在他的代码中找到缺陷。</p>
		<p>
			<b>态度</b><b>3</b><b>：在测试质量问题上不要妥协</b><b> </b></p>
		<p>
			就像代码质量一样，测试也需要高质量。优秀的测试人员不应该在测试质量上做任何的妥协。</p>
		<p>
			<b>态度</b><b>4</b><b>：感激开发人员</b></p>
		<p>
			有可能优秀的开发人员编写的代码不包含任何缺陷。难以置信吧？如果是这样的话，那就感谢开发人员吧。</p>
		<p>
			如果开发人员所编写的代码没有缺陷，优秀的测试人员应该感谢并尊重他们。应该记住这一点，他的朋友不仅仅是缺陷，开发人员也应该是他的朋友。</p>
		<p>
			<b>态度</b><b>5</b><b>：我绝不比开发人员差</b></p>
		<p>
			在测试领域，是不是有很多人觉得比开发人员低一等？相信有很多这样的人。如果测试人员觉得比开发人员低一等的话，那么他实际上并没有恰当地做好测试工作。正如前面所述，开发人员和测试人员工作方向相反，但是有着共同的目标，那就是生产高质量的软件。</p>
		<p>
			如果你想成为优秀的测试人员，那应该首先为自己的工作感到骄傲，不要觉得低人一等。</p>
		<p>
			<b>态度</b><b>6</b><b>：要比开发人员懂得更多</b></p>
		<p>
			有多少测试人员在技术和架构方面懂得比开发人员还多呢？可能并不太多吧。作为测试人员，工作内容不应当仅仅是编写和执行测试用例并报告缺陷。他应该在技术上比开发人员了解得更多，只有这样才能知道在什么地方能够破坏软件并找到缺陷。</p>
		<p>
			优秀的开发人员和测试人员除了高超的技术技能外，还都具备专业的职业态度，希望Raghuraman的总结对您有所帮助。</p>
		<!-- overlay --><!-- reply box --><!-- edit comment box --><!-- notification popup --></div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/good-developers-and-testers-should-have</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Wed, 08 Jan 2014 00:56:55 GMT</pubDate></item><item><title><![CDATA[RESTful API 设计最佳实践]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div>
		<p>
			<strong>背景</strong></p>
		<p>
			目前互联网上充斥着大量的关于RESTful API（为方便，下文中&ldquo;RESTful API &rdquo;简写为&ldquo;API&rdquo;）如何设计的文章，然而却没有一个&rdquo;万能&ldquo;的设计标准：如何鉴权？API 格式如何？你的API是否应该加入版本信息？当你开始写一个app的时候，特别是后端模型部分已经写完的时候，你不得不殚精竭虑的设计和实现自己app的public API部分。因为一旦发布，对外发布的API将会很难改变。</p>
		<p>
			在给SupportedFu设计API的时候，我试图以实用的角度来解决上面提到的问题。我希望可以设计出容易使用，容易部署，并且足够灵活的API，本文因此而生。</p>
		<p>
			<strong><span>API设计的基本要求</span></strong></p>
		<p>
			网上的很多关于API设计的观点都十分&rdquo;学院派&ldquo;，它们也许更有理论基础，但是有时却和现实世界脱轨（因此我是自由派）。所以我这篇文章的目标是从实践的角度出发，给出当前网络应用的API设计最佳实践（当然，是我认为的最佳了~），如果觉得不合适，我不会遵从标准。当然作为设计的基础，几个必须的原则还是要遵守的：</p>
		<ol>
			<li>
				当标准合理的时候遵守标准。</li>
			<li>
				API应该对程序员友好，并且在浏览器地址栏容易输入。</li>
			<li>
				API应该简单，直观，容易使用的同时优雅。</li>
			<li>
				API应该具有足够的灵活性来支持上层ui。</li>
			<li>
				API设计权衡上述几个原则。</li>
		</ol>
		<p>
			需要强调的是：API的就是程序员的UI，和其他UI一样，你必须仔细考虑它的用户体验！</p>
		<p>
			<strong>使用RESTful URLs 和action</strong>.</p>
		<p>
			虽然前面我说没有一个万能的API设计标准。但确实有一个被普遍承认和遵守：RESTfu设计原则。它被Roy Felding提出（在他的&rdquo;基于网络的软件架构&ldquo;论文中<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm" target="_blank">第五章</a>）。而REST的核心原则是将你的API拆分为逻辑上的资源。这些资源通过http被操作（GET ,POST,PUT,DELETE）。</p>
		<p>
			<strong>那么我应该如何拆分出这些资源呢？</strong></p>
		<p>
			显然从API用户的角度来看，&rdquo;资源&ldquo;应该是个名词。即使你的内部数据模型和资源已经有了很好的对应，API设计的时候你仍然不需要把它们一对一的都暴露出来。这里的关键是隐藏内部资源，暴露必需的外部资源。</p>
		<p>
			在SupportFu里，资源是 ticket、user、group。</p>
		<p>
			一旦定义好了要暴露的资源，你可以定义资源上允许的操作，以及这些操作和你的API的对应关系：</p>
		<ul>
			<li>
				GET /tickets # 获取ticket列表</li>
			<li>
				GET /tickets/12 # 查看某个具体的ticket</li>
			<li>
				POST /tickets # 新建一个ticket</li>
			<li>
				PUT /tickets/12 # 更新ticket 12.</li>
			<li>
				DELETE /tickets/12 #删除ticekt 12</li>
		</ul>
		<p>
			可以看出使用REST的好处在于可以充分利用http的强大实现对资源的CURD功能。而这里你只需要一个endpoint：/tickets,再没有其他什么命名规则和url规则了，cool！</p>
		<p>
			<strong>这个endpoint的单数复数</strong></p>
		<p>
			一个可以遵从的规则是：虽然看起来使用复数来描述某一个资源实例看起来别扭，但是统一所有的endpoint，使用复数使得你的URL更加规整。这让API使用者更加容易理解，对开发者来说也更容易实现。</p>
		<p>
			如何处理关联？关于如何处理资源之间的管理REST原则也有相关的描述：</p>
		<ul>
			<li>
				GET /tickets/12/messages- Retrieves list of messages for ticket #12</li>
			<li>
				GET /tickets/12/messages/5- Retrieves message #5 for ticket #12</li>
			<li>
				POST /tickets/12/messages- Creates a new message in ticket #12</li>
			<li>
				PUT /tickets/12/messages/5- Updates message #5 for ticket #12</li>
			<li>
				PATCH /tickets/12/messages/5- Partially updates message #5 for ticket #12</li>
			<li>
				DELETE /tickets/12/messages/5- Deletes message #5 for ticket #12</li>
		</ul>
		<p>
			其中，如果这种关联和资源独立，那么我们可以在资源的输出表示中保存相应资源的endpoint。然后API的使用者就可以通过点击链接找到相关的资源。如果关联和资源联系紧密。资源的输出表示就应该直接保存相应资源信息。（例如这里如果message资源是独立存在的，那么上面 GET /tickets/12/messages就会返回相应message的链接；相反的如果message不独立存在，他和ticket依附存在，则上面的API调用返回直接返回message信息）</p>
		<p>
			<strong>不符合CURD的操作</strong></p>
		<p>
			对这个令人困惑的问题，下面是一些解决方法：</p>
		<ol>
			<li>
				重构你的行为action。当你的行为不需要参数的时候，你可以把active对应到activated这个资源，（更新使用patch）.</li>
			<li>
				以子资源对待。例如:github上，对一个gists加星操作：PUT /gists/:id/star 并且取消星操作：DELETE /gists/:id/star.</li>
			<li>
				有时候action实在没有难以和某个资源对应上例如search。那就这么办吧。我认为API的使用者对于/search这种url也不会有太大意见的（毕竟他很容易理解）。只要注意在文档中写清楚就可以了。</li>
			<li>
				&nbsp;</li>
		</ol>
		<p>
			<strong>永远使用SSL</strong></p>
		<p>
			毫无例外，永远都要使用SSL。你的应用不知道要被谁，以及什么情况访问。有些是安全的，有些不是。使用SSL可以减少鉴权的成本：你只需要一个简单的令牌（token）就可以鉴权了，而不是每次让用户对每次请求签名。</p>
		<p>
			值得注意的是：不要让非SSL的url访问重定向到SSL的url。</p>
		<p>
			<strong>文档</strong></p>
		<p>
			文档和API本身一样重要。文档应该容易找到，并且公开（把它们藏到pdf里面或者存到需要登录的地方都不太好）。文档应该有展示请求和输出的例子：或者以点击链接的方式或者通过curl的方式（请见openstack的文档）。如果有更新（特别是公开的API），应该及时更新文档。文档中应该有关于何时弃用某个API的时间表以及详情。使用邮件列表或者博客记录是好方法。</p>
		<p>
			<strong>版本化</strong></p>
		<p>
			在API上加入版本信息可以有效的防止用户访问已经更新了的API，同时也能让不同主要版本之间平稳过渡。关于是否将版本信息放入url还是放入请求头有过争论：<a href="http://stackoverflow.com/questions/389169/best-practices-for-API-versioning">API version should be included in the URL or in a header</a>. 学术界说它应该放到header里面去，但是如果放到url里面我们就可以跨版本的访问资源了。。（参考openstack）。</p>
		<p>
			strip使用的方法就很好：它的url里面有主版本信息，同时请求头俩面有子版本信息。这样在子版本变化过程中url的稳定的。变化有时是不可避免的，关键是如何管理变化。完整的文档和合理的时间表都会使得API使用者使用的更加轻松。</p>
		<p>
			<strong>结果过滤，排序，搜索：</strong></p>
		<p>
			url最好越简短越好，和结果过滤，排序，搜索相关的功能都应该通过参数实现(并且也很容易实现)。</p>
		<p>
			<strong>过滤：</strong>为所有提供过滤功能的接口提供统一的参数。例如：你想限制get /tickets 的返回结果:只返回那些open状态的ticket&ndash;get /tickektsstate=open这里的state就是过滤参数。</p>
		<p>
			<strong>排序：</strong>和过滤一样，一个好的排序参数应该能够描述排序规则，而不业务相关。复杂的排序规则应该通过组合实现：</p>
		<ul>
			<li>
				GET /ticketssort=-priority- Retrieves a list of tickets in descending order of priority</li>
			<li>
				GET /ticketssort=-priority,created_at- Retrieves a list of tickets in descending order of priority. Within a specific priority, older tickets are ordered first</li>
		</ul>
		<p>
			这里第二条查询中，排序规则有多个rule以逗号间隔组合而成。</p>
		<p>
			<strong>搜索：</strong>有些时候简单的排序是不够的。我们可以使用搜索技术（ElasticSearch和Lucene）来实现（依旧可以作为url的参数）。</p>
		<ul>
			<li>
				GET /ticketsq=return&amp;state=open&amp;sort=-priority,created_at- Retrieve the highest priority open tickets mentioning the word &lsquo;return&rsquo;</li>
		</ul>
		<p>
			对于经常使用的搜索查询，我们可以为他们设立别名,这样会让API更加优雅。例如：<br />
			get /ticketsq=recently_closed -&gt; get /tickets/recently_closed.</p>
		<p>
			<strong>限制API返回值的域</strong></p>
		<p>
			有时候API使用者不需要所有的结果，在进行横向限制的时候（例如值返回API结果的前十项）还应该可以进行纵向限制。并且这个功能能有效的提高网络带宽使用率和速度。可以使用fields查询参数来限制返回的域例如：<br />
			GET /ticketsfields=id,subject,customer_name,updated_at&amp;state=open&amp;sort=-updated_at</p>
		<p>
			<strong>更新和创建操作应该返回资源</strong></p>
		<p>
			PUT、POST、PATCH 操作在对资源进行操作的时候常常有一些副作用：例如created_at,updated_at 时间戳。为了防止用户多次的API调用（为了进行此次的更新操作），我们应该会返回更新的资源（updated representation.）例如：在POST操作以后，返回201 created 状态码，并且包含一个指向新资源的url作为返回头</p>
		<p>
			<strong>是否需要 &ldquo;HATEOAS</strong>&ldquo;</p>
		<p>
			网上关于是否允许用户创建新的url有很大的异议（注意不是创建资源产生的url）。为此REST制定了HATEOAS来描述了和endpoint进行交互的时候，行为应该在资源的metadata返回值里面进行定义。</p>
		<p>
			（译注：作者这里认为HATEOAS还不算成熟，我也不怎么理解这段就算了，读者感兴趣可以自己去原文查看）</p>
		<p>
			<strong>只提供json作为返回格式</strong></p>
		<p>
			现在开始比较一下XML和json了。XML即冗长，难以阅读，又不适合各种编程语言解析。当然XML有扩展性的优势，但是如果你只是将它来对内部资源串行化，那么他的扩展优势也发挥不出来。很多应用（youtube,twitter,box）都已经开始抛弃XML了，我也不想多费口舌。给了google上的趋势图吧：</p>
		<p>
			<img alt="" src="/upload/offsite/2014.01.07.a8a8fc1a-809b-4a3b-a31b-d3ffa2cc0258\c292554c-aef3-4b51-b633-a6976d0508c2.png" /></p>
		<p>
			当然如果的你使用用户里面企业用户居多，那么可能需要支持XML。如果是这样的话你还有另外一个问题：你的http请求中的media类型是应该和accept 头同步还是和url？为了方便（browser explorability）,应该是在url中(用户只要自己拼url就好了)。如果这样的话最好的方法是使用.xml或者.json的后缀。</p>
		<p>
			<strong>命名方式？</strong></p>
		<p>
			是蛇形命令（下划线和小写）还是驼峰命名？如果使用json那么最好的应该是遵守JAVASCRIPT的命名方法-也就是说骆驼命名法。如果你正在使用多种语言写一个库，那么最好按照那些语言所推荐的，java，c#使用骆驼，python，ruby使用snake。</p>
		<p>
			个人意见：我总觉得蛇形命令更好使一些，当然这没有什么理论的依据。有人说蛇形命名读起来更快，能达到20%，也不知道真假<a href="http://ieeexplore.ieee.org/xpl/articleDetails.jsptp=&amp;arnumber=5521745">http://ieeexplore.ieee.org/xpl/articleDetails.jsptp=&amp;arnumber=5521745</a></p>
		<p>
			<strong>默认使用pretty print格式，使用gzip</strong></p>
		<p>
			只是使用空格的返回结果从浏览器上看总是觉得很恶心(一大坨有没有？～)。当然你可以提供url上的参数来控制使用&ldquo;pretty print&rdquo;，但是默认开启这个选项还是更加友好。格外的传输上的损失不会太大。相反你如果忘了使用gzip那么传输效率将会大大减少，损失大大增加。想象一个用户正在debug那么默认的输出就是可读的-而不用将结果拷贝到其他什么软件中在格式化-是想起来就很爽的事，不是么？</p>
		<p>
			下面是一个例子:</p>
		<pre>
$ curl https://API.github.com/users/veesahni &gt; with-whitespace.txt
$ ruby -r json -e &#39;puts JSON JSON.parse(STDIN.read)&#39; &lt; with-whitespace.txt &gt; without-whitespace.txt
$ gzip -c with-whitespace.txt &gt; with-whitespace.txt.gz
$ gzip -c without-whitespace.txt &gt; without-whitespace.txt.gz</pre>
		<p>
			输出如下：</p>
		<ul>
			<li>
				without-whitespace.txt- 1252 bytes</li>
			<li>
				with-whitespace.txt- 1369 bytes</li>
			<li>
				without-whitespace.txt.gz- 496 bytes</li>
			<li>
				with-whitespace.txt.gz- 509 bytes</li>
		</ul>
		<p>
			在上面的例子中，多余的空格使得结果大小多出了8.5%（没有使用gzip），相反只多出了2.6%。据说：twitter使用gzip之后它的streaming API传输减少了80%（link:https://dev.twitter.com/blog/announcing-gzip-compression-streaming-APIs）.</p>
		<p>
			<strong>只在需要的时候使用&ldquo;envelope&rdquo;</strong></p>
		<p>
			很多API象下面这样返回结果：</p>
		<div>
			<div class="syntaxhighlighter notranslate c" id="highlighter_883350">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
								<p>
									2</p>
								<p>
									3</p>
								<p>
									4</p>
								<p>
									5</p>
								<p>
									6</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="c plain">{</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;data&quot;</code> <code class="c plain">: {</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;id&quot;</code> <code class="c plain">: 123,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;name&quot;</code> <code class="c plain">: </code><code class="c string">&quot;John&quot;</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c plain">}</code></p>
									<p>
										<code class="c plain">}</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			理由很简单：这样做可以很容易扩展返回结果，你可以加入一些分页信息，一些数据的元信息等－这对于那些不容易访问到返回头的API使用者来说确实有用，但是随着&ldquo;标准&rdquo;的发展（cors和http://tools.ietf.org/html/rfc5988#page-6都开始被加入到标准中了），我个人推荐不要那么做。</p>
		<p>
			<strong>何时使用envelope？</strong></p>
		<p>
			有两种情况是应该使用envelope的。如果API使用者确实无法访问返回头，或者API需要支持交叉域请求（通过jsonp）。<br />
			jsonp请求在请求的url中包含了一个callback函数参数。如果给出了这个参数，那么API应该返回200，并且把真正的状态码放到返回值里面（包装在信封里），例如：</p>
		<div>
			<div class="syntaxhighlighter notranslate javascript" id="highlighter_467589">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
								<p>
									2</p>
								<p>
									3</p>
								<p>
									4</p>
								<p>
									5</p>
								<p>
									6</p>
								<p>
									7</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="javascript plain">callback_function({</code></p>
									<p>
										<code class="javascript spaces">&nbsp;&nbsp;</code><code class="javascript plain">status_code: 200,</code></p>
									<p>
										<code class="javascript spaces">&nbsp;&nbsp;</code><code class="javascript plain">next_page: </code><code class="javascript string">&quot;https://..&quot;</code><code class="javascript plain">,</code></p>
									<p>
										<code class="javascript spaces">&nbsp;&nbsp;</code><code class="javascript plain">response: {</code></p>
									<p>
										<code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">... actual JSON response body ... </code></p>
									<p>
										<code class="javascript spaces">&nbsp;&nbsp;</code><code class="javascript plain">}</code></p>
									<p>
										<code class="javascript plain">})</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			同样为了支持无法方法返回头的API使用者，可以允许envelope=true这样的参数。</p>
		<p>
			<strong>在post,put,patch上使用json作为输入</strong></p>
		<p>
			如果你认同我上面说的，那么你应该决定使用json作为所有的API输出格式，那么我们接下来考虑考虑API的输入数据格式。<br />
			很多的API使用url编码格式：就像是url查询参数的格式一样：单纯的键值对。这种方法简单有效，但是也有自己的问题：它没有数据类型的概念。这使得程序不得不根据字符串解析出布尔和整数,而且还没有层次结构&ndash;虽然有一些关于层次结构信息的约定存在可是和本身就支持层次结构的json比较一下还是不很好用。</p>
		<p>
			当然如果API本身就很简单，那么使用url格式的输入没什么问题。但对于复杂的API你应该使用json。或者干脆统一使用json。<br />
			注意使用json传输的时候，要求请求头里面加入：Content-Type：application/json.，否则抛出415异常（unsupported media type）。</p>
		<p>
			<strong>分页</strong></p>
		<p>
			分页数据可以放到&ldquo;信封&rdquo;里面，但随着标准的改进，现在我推荐将分页信息放到link header里面：http://tools.ietf.org/html/rfc5988#page-6。</p>
		<p>
			使用link header的API应该返回一系列组合好了的url而不是让用户自己再去拼。这点在基于游标的分页中尤为重要。例如下面，来自github的文档</p>
		<div>
			<div class="syntaxhighlighter notranslate text" id="highlighter_950032">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
								<p>
									2</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="text plain">Link: &lt;https://api.github.com/user/repos?page=3&amp;per_page=100&gt;; rel=&quot;next&quot;, </code></p>
									<p>
										<code class="text plain">&lt;https://api.github.com/user/repos?page=50&amp;per_page=100&gt;; rel=&quot;last&quot;</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			<strong>自动加载相关的资源</strong></p>
		<p>
			很多时候，自动加载相关资源非常有用，可以很大的提高效率。但是这却<a href="http://idbentley.com/blog/2013/03/14/should-restful-apis-include-relationships/" target="_blank">和RESTful的原则相背</a>。为了如此，我们可以在url中添加参数：embed（或者expend）。embed可以是一个逗号分隔的串，例如：</p>
		<div>
			<div class="syntaxhighlighter notranslate text" id="highlighter_953469">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="text plain">GET /ticket/12embed=customer.name,assigned_user</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			对应的API返回值如下：</p>
		<div>
			<div class="syntaxhighlighter notranslate c" id="highlighter_56573">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
								<p>
									2</p>
								<p>
									3</p>
								<p>
									4</p>
								<p>
									5</p>
								<p>
									6</p>
								<p>
									7</p>
								<p>
									8</p>
								<p>
									9</p>
								<p>
									10</p>
								<p>
									11</p>
								<p>
									12</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="c plain">{</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;id&quot;</code> <code class="c plain">: 12,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;subject&quot;</code> <code class="c plain">: </code><code class="c string">&quot;I have a question!&quot;</code><code class="c plain">,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;summary&quot;</code> <code class="c plain">: </code><code class="c string">&quot;Hi, ....&quot;</code><code class="c plain">,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;customer&quot;</code> <code class="c plain">: {</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;name&quot;</code> <code class="c plain">: </code><code class="c string">&quot;Bob&quot;</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c plain">},</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c plain">assigned_user: {</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;id&quot;</code> <code class="c plain">: 42,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;name&quot;</code> <code class="c plain">: </code><code class="c string">&quot;Jim&quot;</code><code class="c plain">,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c plain">}</code></p>
									<p>
										<code class="c plain">}</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			值得提醒的是，这个功能有时候会很复杂，并且可能导致<a href="http://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue" target="_blank">N+1 SELECT 问题</a>。</p>
		<p>
			<strong>重写HTTP方法</strong></p>
		<p>
			有的客户端只能发出简单的GET 和POST请求。为了照顾他们，我们可以重写HTTP请求。这里没有什么标准，但是一个普遍的方式是接受X-HTTP-Method-Override请求头。</p>
		<p>
			<strong>速度限制</strong></p>
		<p>
			为了避免请求泛滥，给API设置速度限制很重要。为此&nbsp;<a href="http://tools.ietf.org/html/rfc6585">RFC 6585</a>&nbsp;引入了HTTP状态码<a href="http://tools.ietf.org/html/rfc6585#section-4" target="_blank">429（too many requests）</a>。加入速度设置之后，应该提示用户，至于如何提示标准上没有说明，不过流行的方法是使用HTTP的返回头。</p>
		<p>
			下面是几个必须的返回头（依照twitter的命名规则）：</p>
		<ul>
			<li>
				X-Rate-Limit-Limit :当前时间段允许的并发请求数</li>
			<li>
				X-Rate-Limit-Remaining:当前时间段保留的请求数。</li>
			<li>
				X-Rate-Limit-Reset:当前时间段剩余秒数</li>
		</ul>
		<p>
			<strong>为什么使用当前时间段剩余秒数而不是时间戳？</strong></p>
		<p>
			时间戳保存的信息很多，但是也包含了很多不必要的信息，用户只需要知道还剩几秒就可以再发请求了这样也避免了<a href="http://en.wikipedia.org/wiki/Clock_skew" target="_blank">clock skew问题</a>。</p>
		<p>
			有些API使用UNIX格式时间戳，我建议不要那么干。为什么？HTTP 已经规定了使用 <a href="http://www.ietf.org/rfc/rfc1123.txt">RFC 1123</a>&nbsp;时间格式</p>
		<p>
			<strong>鉴权&nbsp;Authentication</strong></p>
		<p>
			restful API是无状态的也就是说用户请求的鉴权和cookie以及session无关，每一次请求都应该包含鉴权证明。</p>
		<p>
			通过使用ssl我们可以不用每次都提供用户名和密码：我们可以给用户返回一个随机产生的token。这样可以极大的方便使用浏览器访问API的用户。这种方法适用于用户可以首先通过一次用户名-密码的验证并得到token，并且可以拷贝返回的token到以后的请求中。如果不方便，可以使用OAuth 2来进行token的安全传输。</p>
		<p>
			支持jsonp的API需要额外的鉴权方法，因为jsonp请求无法发送普通的credential。这种情况下可以在查询url中添加参数：access_token。注意使用url参数的问题是：目前大部分的网络服务器都会讲query参数保存到服务器日志中，这可能会成为大的安全风险。</p>
		<p>
			注意上面说到的只是三种传输token的方法，实际传输的token可能是一样的。</p>
		<p>
			<strong>缓存</strong></p>
		<p>
			HTTP提供了自带的缓存框架。你需要做的是在返回的时候加入一些返回头信息，在接受输入的时候加入输入验证。基本两种方法：</p>
		<p>
			<strong>ETag：</strong>当生成请求的时候，在HTTP头里面加入ETag，其中包含请求的校验和和哈希值，这个值和在输入变化的时候也应该变化。如果输入的HTTP请求包含IF-NONE-MATCH头以及一个ETag值，那么API应该返回304 not modified状态码，而不是常规的输出结果。</p>
		<p>
			<strong>Last-Modified：</strong>和etag一样，只是多了一个时间戳。返回头里的Last-Modified：包含了&nbsp;<a href="http://www.ietf.org/rfc/rfc1123.txt">RFC 1123</a>&nbsp;时间戳，它和IF-MODIFIED-SINCE一致。HTTP规范里面有三种date格式，服务器应该都能处理。</p>
		<p>
			<strong>出错处理</strong></p>
		<p>
			就像html错误页面能够显示错误信息一样，API 也应该能返回可读的错误信息&ndash;它应该和一般的资源格式一致。API应该始终返回相应的状态码，以反映服务器或者请求的状态。API的错误码可以分为两部分，400系列和500系列，400系列表明客户端错误：如错误的请求格式等。500系列表示服务器错误。API应该至少将所有的400系列的错误以json形式返回。如果可能500系列的错误也应该如此。json格式的错误应该包含以下信息：一个有用的错误信息，一个唯一的错误码，以及任何可能的详细错误描述。如下：</p>
		<div>
			<div class="syntaxhighlighter notranslate c" id="highlighter_308265">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
								<p>
									2</p>
								<p>
									3</p>
								<p>
									4</p>
								<p>
									5</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="c plain">{</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;code&quot;</code> <code class="c plain">: 1234,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;message&quot;</code> <code class="c plain">: </code><code class="c string">&quot;Something bad happened &lt;img src=&quot;</code><code class="c plain">http:</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;description&quot;</code> <code class="c plain">: </code><code class="c string">&quot;More details about the error here&quot;</code></p>
									<p>
										<code class="c plain">}</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			对PUT,POST,PATCH的输入的校验也应该返回相应的错误信息，例如：</p>
		<div>
			<div class="syntaxhighlighter notranslate c" id="highlighter_659093">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
								<p>
									2</p>
								<p>
									3</p>
								<p>
									4</p>
								<p>
									5</p>
								<p>
									6</p>
								<p>
									7</p>
								<p>
									8</p>
								<p>
									9</p>
								<p>
									10</p>
								<p>
									11</p>
								<p>
									12</p>
								<p>
									13</p>
								<p>
									14</p>
								<p>
									15</p>
								<p>
									16</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="c plain">{</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;code&quot;</code> <code class="c plain">: 1024,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;message&quot;</code> <code class="c plain">: </code><code class="c string">&quot;Validation Failed&quot;</code><code class="c plain">,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c string">&quot;errors&quot;</code> <code class="c plain">: [</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;code&quot;</code> <code class="c plain">: 5432,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;field&quot;</code> <code class="c plain">: </code><code class="c string">&quot;first_name&quot;</code><code class="c plain">,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;message&quot;</code> <code class="c plain">: </code><code class="c string">&quot;First name cannot have fancy characters&quot;</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">},</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;code&quot;</code> <code class="c plain">: 5622,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;field&quot;</code> <code class="c plain">: </code><code class="c string">&quot;password&quot;</code><code class="c plain">,</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c string">&quot;message&quot;</code> <code class="c plain">: </code><code class="c string">&quot;Password cannot be blank&quot;</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></p>
									<p>
										<code class="c spaces">&nbsp;&nbsp;</code><code class="c plain">]</code></p>
									<p>
										<code class="c plain">}</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			<strong>HTTP 状态码</strong></p>
		<div>
			<div class="syntaxhighlighter notranslate text" id="highlighter_476127">
				<table border="0" cellpadding="0" cellspacing="0">
					<tbody>
						<tr>
							<td class="gutter">
								<p>
									1</p>
								<p>
									2</p>
								<p>
									3</p>
								<p>
									4</p>
								<p>
									5</p>
								<p>
									6</p>
								<p>
									7</p>
								<p>
									8</p>
								<p>
									9</p>
								<p>
									10</p>
								<p>
									11</p>
								<p>
									12</p>
							</td>
							<td class="code">
								<div class="container">
									<p>
										<code class="text plain">200 ok &nbsp;- 成功返回状态，对应，GET,PUT,PATCH,DELETE.</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">201 created&nbsp;&nbsp;-&nbsp;成功创建。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">304 not modified &nbsp;&nbsp;-&nbsp;HTTP缓存有效。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">400 bad request &nbsp;&nbsp;-&nbsp;请求格式错误。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">401 unauthorized &nbsp;&nbsp;-&nbsp;未授权。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">403 forbidden &nbsp;&nbsp;-&nbsp;鉴权成功，但是该用户没有权限。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">404 not found - 请求的资源不存在</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">405 method not allowed - 该http方法不被允许。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">410 gone - 这个url对应的资源现在不可用。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">415 unsupported media type - 请求类型错误。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">422 unprocessable entity - 校验错误时用。</code></p>
									<p>
										<code class="text spaces">&nbsp;</code><code class="text plain">429 too many request - 请求过多。</code></p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/restful-api-design-best-practices</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 07 Jan 2014 10:51:29 GMT</pubDate></item><item><title><![CDATA[海外實習面試記]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="">
		<header>
			去年八月份寫的<a href="/blog/recent-one-year">一篇文章</a>一不小心讓我稍微火了一把，短短時間內在微博達到了上千的轉發量，甚至連像搜狗首席執行官王小川這樣的業界大佬都轉發了那條微博。微博上面的聲音有兩派，一派是支持者，認爲「這個年輕人很有想法」，另一個聲音則對我的想法、行爲提出了質疑，認爲我貶低學術、太過浮躁。我原來在微軟亞洲研究院系統組的老闆對我的想法尤其不滿，甚至對我進行了半公開的點名批評，並告誡其他在微軟亞洲研究院的實習生不得浪費機會。</header>
		<p>
			後來我瞭解到，我寫這篇文章的時候是八月份，正好是個大互聯網公司校園招聘開始的前夕。由於這篇文章裏面公開讚揚了Hulu，而且鼓勵和我一樣的年輕人投身業界，同時表達了對大公司的不滿，被許多人認爲是符合他們的利益的。由於轉發量過大，甚至已經引起了微軟公關部門的注意，以至於向我之前在微軟老闆施壓，要求他立刻「解決問題」。我恍然大悟，只好大呼被人利用了！</p>
		<p>
			（補充：此文發佈後微軟又聯繫到我，認爲以上說法不正確，以下爲解釋）</p>
		<blockquote>
			<p>
				这个不符合事实哟，我不想再有不必要的误解。实际发生的是负责我们的实习生项目的高校关系部一直致力于保证实习生计划的质量，觉得我们工作没有做好，才找到我们。我们也发现了问题并马上采取措施，加强了对实习生的关注。我不希望大家了解的和事实不符。</p>
		</blockquote>
		<p>
			轉眼間又過去了一年，已經快到我大三的暑假了，再開學就是大四，眼瞅是要畢業的人了。我快要與在清華的日子告別了，同時我十六年的求學生涯也將接近尾聲。有人說現在感嘆還太早，大四還沒開始，距離畢業還有一年呢！但也有人告訴我，其實大學只有三年，大四和前三年的「過法」不一樣。在我看來，大學每年都不一樣，這一年來我接觸了許多新東西，我和去年的我想法已經有了很大的區別，正所謂是「年年歲歲花相似，歲歲年年人不同」。想想看明年這時候就要畢業了，實習的機會也不多了，所以就寫篇文章記錄一下當時坎坷的經歷吧。</p>
		<h2>
			面試準備</h2>
		<p>
			有了去年面試美國公司<a href="/blog/recent-one-year#twitter">失敗的經歷</a>，我早早就開始了準備。從去年十月份，我就開始瀏覽硅谷各個公司招聘暑期實習生的信息了。由於沒有先驗的知識，根本不知道哪些公司在招實習生，只好像爬蟲一樣查找。在查找的過程中學會了使用LinkedIn和Glassdoor，這兩個網站是非常好的工具，尤其是Glassdoor，還可以看到許多公司的薪酬信息、面試題等。這些信息都是員工匿名披露的，不違反保密規則，甚至還被許多公司的HR鼓勵。</p>
		<h3>
			英語</h3>
		<p>
			去年面試失敗很大的一個原因可能就是英語。當時我見到外國人根本不知道如何張口，更別說在電話裏面了。我當時的每個面試都是戰戰兢兢，如履薄冰地準備好一切可能問到的的問題的回答，然後唸出來，一旦遇到了沒準備的內容可想而知。</p>
		<p>
			認識到問題以後，該怎麼做就很清楚了，就是練習英語，尤其是口語。但是具體怎麼練呢？這要感謝Gmail廣告。Google在詳細掃描我的郵件和即時通信記錄以後，分析出了我有學習英語的打算，於是就在郵箱界面上不斷給我推送學習英語的廣告。我發現有一種叫做「電話英語」的廣告看起來似乎很有趣，於是就抱着試一試的心態找了幾家電話英語看。在購買電話英語服務之前，這些公司都有免費試聽的服務，或者說叫分級測試，於是我就找了好幾家測試了一下自己的分級。電話英語的模式就是一對一和一個英語國家的外教在電話中交談，以此提高英語水平。由於歐美國家勞動力成本較高，加上有時差因素，這些電話英語公司僱傭的外教許多是菲律賓的。菲律賓長期以來是殖民地，平均英語水平在亞太地區是最高的，而且不像印度英語有嚴重口音。許多美國的公司都把電話服務熱線外包給菲律賓。比較各種學習方式後，我不得不承認電話英語是一種價格不貴，而且可以保證學習質量的途徑。經過幾個月的練習，我的口語水平提高了很大一個層次，於是我都敢一個人<a href="/blog/usa-tour-bay-area">去美國</a>了。</p>
		<h3>
			簡歷</h3>
		<p>
			我買了一本《<a href="http://book.douban.com/subject/5985030/">The Google Resume</a>》，仔細研讀了裏面關於寫簡歷和面試的部分。《The Google Resume》可謂是幫了我的大忙，還有這本書作者創辦的網站<a href="http://careercup.com/">CareerCup</a>上面以一個工程師出身的HR的視角全面介紹了技術職位面試的細節。依據這本書的建議，我精心寫了一頁簡歷，但是前前後後修改了幾十個版本。</p>
		<p>
			<img alt="The Google Resume" src="/upload/offsite/2014.01.07.2d215c1f-7e5e-41c7-9fb0-4a6fca70bb5e\3411e93a-6769-4946-ae81-156ff689418e.jpg" /></p>
		<p>
			準備好簡歷以後，我分別在Google、Facebook、Apple、Twitter、Amazon網站上面投了簡歷，其中Google、Facebook、Twitter有學長幫我內推。在經過難熬的等待之後，最終除了Amazon以外，均得到了電話面試的機會。</p>
		<h2>
			Google</h2>
		<p>
			Google是我接到面試通知的第一家公司，在11月份就開始面試。我收到郵件通知以後，HR問我哪天有時間，然後給我安排電話面試。Google的HR並沒有給我打電話，而是直接安排面試的。由於有時差，所以面試都是在午夜到凌晨之間，所以必須熬夜或者早起了。如果作息不正常，會對自己能力發揮造成很大影響，需要慎重對待。Google給我安排了兩輪連續的面試，每輪一個小時，從北京時間凌晨兩點面試到四點。</p>
		<p>
			由於簽署了保密協議，我不能透露面試的具體題目。題目的類型都是算法題，還有個算概率的數學題。答題的方式是打開一個Google docs頁面，你和面試官共同編輯，同時用電話保持交談。面試官會直接說題目的內容，或者把題目寫在Google docs上，看完以後回答問題。一般來說是先描述算法，然後面試官會繼續追問或者要求證明，最後寫程序。程序直接寫在Google docs上，由於沒有語法高亮和縮進，還是挺不舒服的。不管問題會不會，一定要主動和面試官交流，澄清問題，也許是少了什麼條件或者理解錯誤，最忌諱的就是一句話不說自己一直在想，或者上來就寫代碼。</p>
		<p>
			面試完了以後，大概過了兩個星期，HR發郵件給我說面試結果不錯，給我約了個時間打電話。電話中HR告訴我說我通過了面試，下一步就是進入Google的Host Match流程了。在Google，美國實習生都要有一個Host，大概是經理（Manager）或者導師（Mentor）的職責。每個面試通過的實習生需要等待有Host看中你的簡歷，然後和你聯繫，交流以後決定是否接受你。我一直等到一月份，HR纔告訴我說有了Host願意和我聯繫。和Host電話聊過以後，我對他們做的項目還挺有興趣的，但是我七月份纔放假，和他們的計劃有些衝突，所以就沒有然後了。過了一段時間又有一個Host聯繫我，不過我對他們做的東西實在不感興趣，所以就拒絕了。後來由於HR好像知道我已經在Google北京入職實習了，就沒再用心給我找其他Host，所以最終Host Match失敗。</p>
		<h2>
			Apple</h2>
		<p>
			得到消息的第二個公司是Apple，我的簡歷經過HR的篩選，被安排了電話面試。同樣是硅谷的公司，面試要在半夜進行，對精力是很大的考驗。Apple公司是出了名的重視設計，就連HR給我發的郵件都和別的公司HR不一樣，一般公司的郵件都挺樸素的，Apple的郵件是有信紙的，默認還被Gmail關閉着，點開以後纔能看到。</p>
		<p>
			面試也是通過電話進行的，寫代碼是通過一個叫<a href="http://collabedit.com/">collabedit</a>的在線編輯工具，許多公司都喜歡用這個東西面試，包括Twitter和Facebook。面試官先問了我一個算法題，挺簡單的，我回答出來以後繼續追問新的問題，然後讓我證明自己的想法，並寫代碼。寫完以後面試官問我做過的最有意思的一個項目是什麼，我告訴他是<a href="/project/continuation">Continuation.js</a>，然後向他介紹了一下。最後他問我用過Apple的哪些產品，爲什麼喜歡Apple，我就說我用Mac，爲什麼喜歡我實在沒說出來，因爲我也不是特別喜歡Apple。看來Apple果真是一個要求員工都必須是忠誠的教徒式的公司。</p>
		<p>
			Apple是我自己在網上投遞的一家公司，沒有任何內推，這種情況下面試通過概率挺小的，畢竟你還是一個外國人。面試完一輪以後，就沒有了音信，反覆給HR發郵件問，說正在進行中，可是進行了很久還是沒有結果，所以我知道我是被默拒了。</p>
		<h2>
			Twitter</h2>
		<p>
			Twitter是我面試過的惟一一家私有公司（未上市），因此決策權全部都在CEO手中。而且未上市的公司資金有限，面試門檻要比面試過的其他大公司高不少。據說Twitter發的每個Offer都是要經過CEO親手簽字的，包括實習生在內。作爲一個實習生，Twitter竟然給我安排了六輪面試，比我之前面試Hulu的輪數還多，可見還是比較嚴格的。</p>
		<p>
			Twitter的每輪面試都是通過Skype進行的，寫代碼也是collabedit。相比與其他幾個公司，Twitter面試的算法挺有難度的，同時也很考察細緻程度。Twitter面試的一個特點是需要寫的代碼量很大，其中一場面試上我一個算法寫了一百行的程序，不僅複雜，還要保證正確性。面試的算法涉及到了回溯搜索、二叉樹操作、動態規劃、緩存替換以及貪心策略和證明。</p>
		<p>
			第一輪面試是我在去美國之前面試，印象中是我期末考試的前一天晚上，當時讓我真的是焦頭爛額不知道該先準備哪個。第二輪面試時間更是巧合，正好是在<a href="/blog/usa-tour-bay-area">美國的旅途中</a>，那天我只好躲在Berkeley的旅館中電話面試。我倒是挺想直接去Twitter面試的，但是HR就是沒給我安排，我只好後來自己過去找學長參觀。第三輪是在我回國後，正好是大年初三，這次更悲劇，我的電腦由於<a href="/blog/usa-tour-impress#laptop-water-spill">被人潑水損壞了</a>，過年又沒人修，我只好一個人跑到五道口的一個網吧裏面，待了一夜。第四五六輪按說應該Onsite面試，但是考慮到我面試的是實習生而且在國外，就改成電話了，這三輪連着面時，時間總共長達四個小時，從凌晨三點到早上七點，十分消耗體力，而且需要保持高度的清醒。</p>
		<p>
			最終我拿到了Twitter的offer。</p>
		<h2>
			Facebook</h2>
		<p>
			Facebook上市不久，許多老員工拿了一筆錢都紛紛走人了，空出大量的職位，在加上上市融資到不少錢，Facebook一直在急速擴張中，就連實習生職位也很多。和面試Twitter類似，我面試Facebook的時候正好<a href="/blog/usa-tour-new-york-city">在紐約</a>，於是我只好把寶貴的觀光時間拿出來躲在旅館裏面面試。</p>
		<p>
			Facebook一共面試了兩輪，兩輪之間相隔一個多星期，面試的難度和之前面試Google（美國）差不多。面試涉及的問題主要是動態規劃和二叉樹，感覺這兩個東西是面試最喜歡考到的了。其中有一輪面試中面試官還是一個中國人，聽他說完以後我頓時對我的英語有了信心，最後我和他說了兩句中文，他立刻說「I am not supposed to speak Chinese with you.」，真是無語。Facebook的Offer我也順利拿到了。</p>
		<p>
			<img alt="Twitter" src="/upload/offsite/2014.01.07.2d215c1f-7e5e-41c7-9fb0-4a6fca70bb5e\8932548c-a4aa-4eb9-ae16-5e841b3443d9.jpg" /> <img alt="Facebook" src="/upload/offsite/2014.01.07.2d215c1f-7e5e-41c7-9fb0-4a6fca70bb5e\a6183688-2291-43f9-9e92-522916ebc8ca.jpg" /></p>
		<p>
			值得一提的是Facebook的HR是一個非常靠譜的人，她自始至終一直在幫助我，幫我爭取到了關鍵機會，如果不是她，我很可能此次實習申請就失敗了。我後來在<a href="http://www.linkedin.com/pub/amanda-talbott/1/6b7/672">她的LinkedIn簡歷</a>上面看到了傳奇的經歷：她2000年進入華盛頓大學，主修英文文學。在2003年的時候爲了響應國家的召喚，她毅然離開了校園，加入了國家衛士，遠征伊拉克。她在伊拉克和科威特等地擔任戰地記者和編輯，一直到2006年，纔榮歸故里，然後完成學業，開啓了她的事業。</p>
		<h2>
			棘手的簽證</h2>
		<p>
			最終我拿到的有效的Offer有兩個：Twitter和Facebook。其中Twitter是先拿到的，拿到同時HR給我打電話告訴我薪水、團隊和簽證的信息，並給了我一個期限要求在此前決定。Facebook的Offer是在Twitter後兩個星期內拿到的，HR告訴了我差不多同樣的信息。</p>
		<p>
			聽起來一切都很好，但簽證出現了問題。按照美國法律規定，實習生應該申請J-1簽證，又稱交流訪問學者簽證。這個簽證有一個叫做<a href="http://travel.state.gov/visa/temp/info/info_1296.html">兩年規定（2-year-rule）</a>的東西，意思是我作爲「交流學者」訪問以後，有回到祖國服務兩年的義務。在這兩年內，我不得申請任何美國的允許移民傾向的簽證，如H-1B或L-1。很顯然這是各國政府爲了防止人才流失和美國博弈的結果。對於那些拿過J-1簽證去美國，然後留學美國，最後留在美國工作的那些人他們是怎麼搞的呢？其實雖然有兩年規定，但是可以找中國大使館申請豁免，然後拿着「不持異議信」就可以免受兩年規則的限制。一般來說申請豁免只要不是國家公派的就差不多都會給，但問題在於是時間很長，而且只給拿超過六個月以上簽證的中國公民辦，像我這種實習完了就回來的是不行的。</p>
		<p>
			這個問題非常棘手，而且只對中國人產生約束，所以許多大公司的HR和法律諮詢部門都不知道。甚至有些公司十分傲慢，你給他們解釋都沒用，因爲他們覺得他們自己是正確的，在他們眼中J-1沒什麼問題，反正可以豁免嘛，殊不知中國大使館有中國特色的規定。只有極少數曾經被這個問題困擾過，有着一手經驗的HR纔會明白其中玄機。好在我相當幸運，我Facebook的HR之前面試過一個中國人，他因爲有J-1在身，而且人在國內，最後窮盡一切辦法還是沒有辦成，雙方損失慘重。於是到我這裏就成了經驗，她小心翼翼地幫我弄清了一切問題。</p>
		<p>
			除了J-1以外，還有一個可以考慮的途徑是H-3簽證，又稱「培訓簽證」。事實上培訓簽證是一個更好的選擇，它沒有任何的後遺症，只是對公司來說稍微貴一些，需要準備的材料陌生一些。我分別向Facebook和Twitter的HR問看能不能幫我辦H-3簽證，得到的答案均是沒辦法，理由是H-3簽證要求培訓者接受的培訓必須是在國內無法接受的，並且目的是爲了回國以後培訓他人。對於Microsoft、Google這樣的跨國公司的來說，辦理H-3簽證是合理的，但Facebook和Twitter在中國根本沒有辦公室，你說你回國培訓誰呢？</p>
		<p>
			於是我陷入了一個窘境：要麼接受J-1簽證和附帶的兩年規則，要麼放棄這次實習機會。其實兩年規則對我來說主要是心理成本，因爲拿了它以後就像一個枷鎖套在我的身上。這個枷鎖只有人在中國大陸待夠兩年以後纔能解除，儘管我畢業就去美國工作並不是我的第一選擇，但少了這個選擇卻是令人沮喪的。人性就是這樣，失去一個東西的痛苦要遠遠大於獲得同一樣東西的喜悅。</p>
		<p>
			正當我在猶豫時，Facebook的HR突然幫我申請到了一個新的機會：可以去英國倫敦的辦公室。英國不存在美國這樣的簽證問題，我可以申請Tier-5臨時工作簽證，只需要Facebook擔保即可。這樣一來一切問題就解決了，因此我接受了這個Offer，並禮貌地拒絕了Twitter。</p>
		<h2>
			Google北京</h2>
		<p>
			去年十二月我還申請了Google北京的暑期實習生，由於距離較近，直接去Google辦公室進行了面試。我一共面試了三輪，其中前兩輪是連續進行的。第一輪面試我遇到了很難的組合數學題目，由於思路不對，浪費了不少時間，最終沒有答出來。第二輪面試難度也比較大，涉及了C語言字符串處理、動態規劃和貪心算法證明，但是我答得還不錯。過了幾天，HR告訴我說兩位面試官反饋差別較大，於是對我增加了第三輪面試。第三輪面試是一位很資深的工程師，令我驚奇的是他在面試我之前仔細看了我的簡歷以及我網站上列出的<a href="/project">我做過的所有項目</a>，並針對我的簡歷進行了提問，包括函數式編程的一些內容，以及<a href="/project/continuation">JavaScript的CPS變換</a>。</p>
		<p>
			過了幾天，HR告訴我通過了面試，但是開始時間是暑假。我聯繫到Google北京輸入法組的楊帆學長，希望可以提前開始實習。Google考慮到我的特殊情況，答應了我的要求，於是我就從今年2月開始在Google北京實習了。</p>
		<p>
			<img alt="Google i18n" src="/upload/offsite/2014.01.07.2d215c1f-7e5e-41c7-9fb0-4a6fca70bb5e\a8fa80c7-2ca0-4848-8e1b-ea91a67416b4.jpg" /></p>
		<h2>
			總結</h2>
		<p>
			我將在7月1日奔赴英國倫敦，然後開始爲期兩個多月的暑假實習。這次機會對我來說是十分來之不易的，而且最終能夠如願以償是因爲我很幸運。如果沒有Facebook的HR爲我努力爭取到倫敦的機會，我很可能在猶豫中放棄。如果她沒有遇到上一個相同情況的中國人，她也不會爲我爭取這個方法。如果沒有衆多學長指點我、給我幫助，我很可能還在矇昧中。我相信機會是隨機的，但是面對機會的選擇是可以由個人意志決定的。</p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/o-implement-its-idiosyncrasies--ji</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 07 Jan 2014 02:10:24 GMT</pubDate></item><item><title><![CDATA[你会做Web上的用户登录功能吗？]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div id="post-5353">
		<div class="content">
			<p>
				Web上的用户登录功能应该是最基本的功能了，可是在我看过一些站点的用户登录功能后，我觉得很有必要写一篇文章教大家怎么来做用户登录功能。下面的文章告诉大家这个功能可能并没有你所想像的那么简单，这是一个关系到用户安全的功能，希望大家能从下面的文章中能知道什么样的方法才是一个好的用户登录功能。<span><strong>以下内容，转载时请保持原文一致，并请注明作者和出处</strong></span>。</p>
			<h4>
				用户名和口令</h4>
			<p>
				首先，我们先来说说用户名和口令的事。这并不是本站第一次谈论这个事了。<a href="http://coolshell.cn/articles/2428.html" target="_blank" title="如何管理并设计你的口令">如何管理自己的口令</a>让你知道怎么管理自己的口令，<a href="http://coolshell.cn/articles/3801.html" target="_blank" title="破解你的口令">破解你的口令</a>让你知道在现代这样速度的计算速度下，用穷举法破解你的口令可能会是一件很轻松的事。在这里我想告诉从开发者的角度上来做设计这个用户名和口令的事。下面一几件规则：</p>
			<ul>
				<li>
					<strong>限制用户输入一些非常容易被破解的口令</strong>。如什么qwert，123456, password之类，就像<a href="http://coolshell.cn/articles/2451.html" target="_blank" title="Twitter的禁用口令">twitter限制用户的口令</a>一样做一个口令的黑名单。另外，你可以限制用户口令的长度，是否有大小写，是否有数字，你可以用你的程序做一下校验。当然，这可能会让用户感到很不爽，所以，现在很多网站都提供了UX让用户知道他的口令强度是什么样的（比如<a href="http://coolshell.cn/articles/3877.html" target="_blank" title="另类UX让你输入强口令">这个有趣的UX</a>），这样可以让用户有一个选择，目的就是告诉用户&mdash;&mdash;要想安全，先把口令设得好一点。</li>
			</ul>
			<ul>
				<li>
					<strong>千万不要明文保存用户的口令</strong>。正如<a href="http://coolshell.cn/articles/2428.html" target="_blank" title="如何管理并设计你的口令">如何管理自己的口令</a>所说的一样，很多时候，用户都会用相同的ID相同的口令来登录很多网站。所以，如果你的网站明文保存的话，那么，如果你的数据被你的不良员工流传出去那对用户是灾难性的。所以，用户的口令一定要加密保存，最好是用不可逆的加密，如MD5或是SHA1之类的有hash算法的不可逆的加密算法。CSDN曾明文保存过用户的口令。（另，对于国内公司的品行以及有关部门的管理方式，我不敢保证国内网站以加密的方式保存你的口令。我觉得，做为一个有良知的人，我们应该加密保存用户的口令）</li>
			</ul>
			<ul>
				<li>
					<strong>是否让浏览器保存口令</strong>。我们有N多的方法可以不让浏览器保存用户名和口令。但是这可能对用户来说很不爽。因为在真实世界里谁也记得不住那么多的口令。很多用户可能会使用一些密码管理工具来保存密码，浏览器只是其中一种。是否让浏览器保存这个需要你做决定，重点是看一下你的系统的安全级别是否要求比较高，如果是的话，则不要让浏览器保存密码，并在网站明显的位置告诉用户&mdash;&mdash;保存口令最安全的地方只有你的大脑。</li>
			</ul>
			<ul>
				<li>
					<strong>口令在网上的传输</strong>。因为HTTP是明文协议，所以，用户名和口令在网上也是明文发送的，这个很不安全。你可以看看<a href="http://www.blogjava.net/heyang/archive/2011/04/05/340330.html" target="_blank" title="用Wireshark从http数据包中得到用户的登录信息">这篇文章</a>你就明白了。要做到加密传输就必需使用HTTPS协议。但是，在中国还是有很多网站的Web登录方式还在使用ActiveX控件，这可能成为IE6还大量存在的原因。我通常理解为这些ActiveX控件是为了反键盘记录程序的。 不过，我依然觉ActiveX控件不应该存在，因为在国外的众多安全很重要的站点上都看不到ActiveX的控件的身影。</li>
			</ul>
			<h4>
				用户登录状态</h4>
			<p>
				首先，我想告诉大家的是，因为HTTP是无状态的协议，也就是说，这个协议是无法记录用户访问状态的，其每次请求都是独立的无关联的，一笔是一笔。而我们的网站都是设计成多个页面的，所在页面跳转过程中我们需要知道用户的状态，尤其是用户登录的状态，这样我们在页面跳转后我们才知道是否可以让用户有权限来操作一些功能或是查看一些数据。</p>
			<p>
				<strong>所以，我们每个页面都需要对用户的身份进行认证</strong>。当然，我们不可能让用户在每个页面上输入用户名和口令，这会让用户觉得我们的网站相当的SB。为了实现这一功能，用得最多的技术就是浏览器的cookie，我们会把用户登录的信息存放在客户端的cookie里，这样，我们每个页面都从这个cookie里获得用户是否登录的信息，从而达到记录状态，验证用户的目的。但是，你真的会用cookie吗？下面是使用cookie的一些原则。</p>
			<ul>
				<li>
					<strong>千万不要在cookie中存放用户的密码</strong>。加密的密码都不行。因为这个密码可以被人获取并尝试离线穷举。所以，你一定不能把用户的密码保存在cookie中。我看到太多的站点这么干了。</li>
			</ul>
			<ul>
				<li>
					<strong>正确设计&ldquo;记住密码&rdquo;</strong>。这个功能简直就是一个安全隐患，我觉得并不是所有的程序员都知道怎么设计这个事。一般的设计 是&mdash;&mdash;一时用户勾选了这个功能，系统会生成一个cookie，cookie包括用户名和一个固定的散列值，这个固定的散列值一直使用。这样，你就可以在所有的设备和客户上都可以登录，而且可以有多个用户同时登录。这个并不是很安全。下面是一些更为安全的方法供你参考：<br />
					<span>（&mdash;&mdash;<em><strong>更新 2011/08/26，原文中有些小错误，并且说的不清楚，重新调整了一下&mdash;&mdash;</strong></em>）</span></li>
			</ul>
			<p>
				1）在cookie中，保存三个东西&mdash;&mdash;<strong>用户名</strong>，<strong>登录序列</strong>，<strong>登录token</strong>。</p>
			<p>
				<strong>用户名</strong>：明文存放。<br />
				<strong>登录序列</strong>：一个被MD5散列过的随机数，<span>仅当强制用户输入口令时更新（如：用户修改了口令）</span>。<br />
				<strong>登录token</strong>：一个被MD5散列过的随机数，<span>仅一个登录session内有效，新的登录session会更新它</span>。</p>
			<p>
				2）上述三个东西会存在服务器上，服务器的验证用户需要验证客户端cookie里的这三个事。</p>
			<p>
				3）这样的设计会有什么样的效果，会有下面的效果，</p>
			<p>
				a）<strong>登录token</strong>是单实例登录。意思就是一个用户只能有一个登录实例。</p>
			<p>
				b）<strong>登录序列</strong>是用来做盗用行为检测的。如果用户的cookie被盗后，盗用者使用这个cookie访问网站时，我们的系统是以为是合法用户，然后更新&ldquo;<strong>登录token</strong>&rdquo;，而真正的用户回来访问时，系统发现只有&ldquo;<strong>用户名</strong>&rdquo;和&ldquo;<strong>登录序列</strong>&rdquo;相同，但是&ldquo;<strong>登录token</strong>&rdquo; 不对，这样的话，系统就知道，这个用户可能出现了被盗用的情况，于是，系统可以清除并更改<strong>登录序列 </strong>和<strong>&nbsp;<strong>登录token</strong></strong>，这样就可以令所有的cookie失效，并要求用户输入口令。并给警告用户系统安全。</p>
			<p>
				4）当然，<strong>上述这样的设计还是会有一些问题，比如：同一用户的不同设备登录，甚至在同一个设备上使用不同的浏览器保登录</strong>。一个设备会让另一个设备的<strong>登录token</strong>和<strong>登录序列</strong>失效，从而让其它设备和浏览器需要重新登录，并会造成cookie被盗用的假象。所以，你在服务器服还需要考虑-&nbsp;<strong>IP 地址</strong>，</p>
			<p>
				a) 如果以口令方式登录，我们无需更新服务器的&ldquo;<strong>登录序列</strong>&rdquo;和&nbsp;&ldquo;<strong>登录token</strong>&rdquo;（但需要更新cookie）。因为我们认为口令只有真正的用户知道。</p>
			<p>
				b) 如果 <strong>IP相同</strong> ，那么，我们无需更新服务器的&ldquo;<strong>登录序列</strong>&rdquo;和&nbsp;&ldquo;<strong>登录token</strong>&rdquo;（但需要更新cookie）。因为我们认为是同一用户有同一IP（当然，同一个局域网里也有同一IP，但我们认为这个局域网是用户可以控制的。网吧内并不推荐使用这一功能）。</p>
			<p>
				c) 如果 （<strong>IP不同 </strong>&amp;&amp;<strong> 没有用口令登录</strong>），那么，&ldquo;<strong>登录token</strong>&rdquo; 就会在多个IP间发生变化（登录token在两个或多个ip间被来来回回的变换），当在一定时间内达到一定次数后，系统才会真正觉得被盗用的可能性很高，此时系统在后台清除&ldquo;<strong>登录序列</strong>&rdquo;和&ldquo;<strong>登录token</strong>&ldquo;，让Cookie失效，强制用户输入口令（或是要求用户更改口令），以保证多台设备上的cookie一致。</p>
			<ul>
				<li>
					<strong>不要让cookie有权限访问所有的操作</strong>。否则就是XSS攻击，这个功能请参看<a href="http://coolshell.cn/articles/4914.html" target="_blank" title="新浪微博的XSS攻击">新浪微博的XSS攻击</a>。下面的这些功能一定要用户输入口令：</li>
			</ul>
			<p>
				1）修改口令。</p>
			<p>
				2）修改电子邮件。（电子邮件通常用来找回用户密码，最好通发邮件或是发手机短信的方式修改，或者干脆就不让改一一用电子邮件做帐号名）</p>
			<p>
				3）用户的隐私信息。</p>
			<p>
				4）用户消费功能。</p>
			<div>
				<ul>
					<li>
						<strong>权衡Cookie的过期时间。</strong>如果是永不过期，会有很不错的用户体验，但是这也会让用户很快就忘了登录密码。如果设置上过期期限，比如2周，一个月，那么可能会好一点，但是2周和一个月后，用户依然会忘了密码。尤其是用户在一些公共电脑上，如果保存了永久cookie的话，等于泄露了帐号。所以，对于cookie的过期时间我们还需要权衡。</li>
				</ul>
			</div>
			<h4>
				找回口令的功能</h4>
			<p>
				找回口令的功能一定要提供。但是很多朋友并不知道怎么来设计这个功能。我们有很多找回口令的设计，下面我逐个点评一下。</p>
			<ul>
				<li>
					<strong>千万不要使用安全问答</strong>。事实证明，这个环节很烦人，而且用户并不能很好的设置安全问答。什么，我的生日啊，我母亲的生日，等等。因为今天的互联网和以前不一样了，因为SNS，今天的互联比以前更真实了，我可以上facebook，开心，人人网，LinkedIn查到你的很多的真实的信息。通过这些信息我可以使用安全问答来重设你的口令。 这里需要说一下 Facebook，Facebook的安全问答很强大，还要你通过照片认人，呵呵。</li>
			</ul>
			<ul>
				<li>
					<strong>不要重置用户的密码</strong>。因为这有可能让用户的密码遭到恶意攻击。当然，你要发个邮件给用户让其确认，用户点击邮件中的一个链接，你再重置。我并不推荐这样的方法，因为用户一般都会用笔记下来这个很难记的口令，然后登录系统，因为登录系统时使用了&ldquo;记住密码&rdquo;的功能，所以导致用户不会去修改密码，从而要么导到被写下来的密码被人盗取，要么又忘记了密码。</li>
			</ul>
			<ul>
				<li>
					<strong>好一点的做法&mdash;&mdash;通过邮件自行重置</strong>。当用户申请找回口令功能的时候，系统生成一个MD5唯一的随机字串（可通过UID+IP+timestamp+随机数），放在数据库中，然后设置上时限（比如1小时内），给用户发一个邮件，这个连接中包含那个MD5的字串的链接，用户通过点击那个链接来自己重新设置新的口令。</li>
			</ul>
			<ul>
				<li>
					<strong>更好一点的做法&mdash;&mdash;多重认证</strong>。比如：通过手机+邮件的方式让用户输入验证码。手机+邮件可能还不把握，因为手机要能会丢了，而我的手机可以访问我的邮箱。所以，使用U盾，SecureID（一个会变化的6位数token），或是通过人工的方式核实用户身份。当然，这主要看你的系统的安全级别了。</li>
			</ul>
			<h4>
				口令探测防守</h4>
			<ul>
				<li>
					<strong>使用验证码</strong>。验证码是后台随机产生的一个短暂的验证码，这个验证码一般是一个计算机很难识别的图片。这样就可以防止以程序的方式来尝试用户的口令。事实证明，这是最简单也最有效的方式。当然，总是让用户输入那些肉眼都看不清的验证码的用户体验不好，所以，可以折中一下。比如Google，当他发现一个IP地址发出大量的搜索后，其会要求你输入验证码。当他发现同一个IP注册了3个以上的gmail邮箱后，他需要给你发短信方式或是电话方式的验证码。</li>
			</ul>
			<ul>
				<li>
					<strong>用户口令失败次数</strong>。调置口令失败的上限，如果失败过多，则把帐号锁了，需要用户以找回口令的方式来重新激活帐号。但是，这个功能可能会被恶意人使用。最好的方法是，增加其尝试的时间成本（以前的这篇文章说过一个<a href="http://coolshell.cn/articles/2078.html" target="_blank" title="如何防范密码被破解">增加时间成本的解密算法</a>）。如，两次口令尝试的间隔是5秒钟。三次以上错误，帐号被临时锁上30秒，5次以上帐号被锁1分钟，10次以上错误帐号被锁4小时&hellip;&hellip;但是这会导致恶意用户用脚本来攻击，所以最好再加上验证码，验证码出错次数过多不禁止登录而是禁lP。</li>
			</ul>
			<ul>
				<li>
					<strong>系统全局防守</strong>。上述的防守只针对某一个别用户。恶意者们深知这一点，所以，他们一般会动用&ldquo;僵尸网络&rdquo;轮着尝试一堆用户的口令，所以上述的那种方法可能还不够好。我们需要在系统全局域上监控所有的口令失败的次数。当然，这个需要我们平时没有受到攻击时的数据做为支持。比如你的系统，平均每天有5000次的口令错误的事件，那么你可以认为，当口令错误大幅超过这个数后，而且时间相对集中，就说明有黑客攻击。这个时候你怎么办？一般最常见使用的方法是让所有的用户输错口令后再次尝试的时间成本增加。</li>
			</ul>
			<p>
				最后，再说一下，关于用户登录，使用第三方的 OAuth 和 OpenID 也不失为一个很不错的选择。</p>
		</div>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/do-you-do-web-users-on-the-logon-feature</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 07 Jan 2014 02:10:18 GMT</pubDate></item><item><title><![CDATA[看见，是真正的慈悲]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div itemprop="description">
		<p>
			<b>文/李雪</b></p>
		<p>
			一个来访者，他很喜欢打篮球。小学时候，有一次打完篮球身体畅快淋漓，带着这份满足和快乐，儿子迫不及待的想回家和爸爸分享，刚说没两句，爸爸立刻接过话鼓励孩子：打篮球，这个爱好很好阿，锻炼身体，培养意志力，你要好好坚持下去，打好篮球！</p>
		<p>
			听完这句话，儿子感觉身体里流动的能量一下子全被憋回来，淤堵在心中，愤怒却又无从发泄，因为爸爸没有说错任何话。</p>
		<p>
			一个朋友形容小时候父亲看自己弹钢琴的感觉：爸爸就像在欣赏自己刚买回来的艺妓。这个例子里虽然有俄狄浦斯冲突，但最本质的含义都是：父母看不到孩子本身，父母看到的是孩子的功能价值。</p>
		<p>
			这不是一句指责父母功利心的话，也许父母并没有要求孩子必须功成名就。但父母能否看到孩子本身的存在，而不是用外在价值去定义的物质性的&ldquo;它&rdquo;，决定孩子的心能否直接感受到爱。否则，即使父母为孩子倾注一切，孩子也只是父母表达爱的道具。孩子也许头脑上承认父母为自己付出很多，父母很爱自己，但心知道那份恒久的孤寂。</p>
		<p>
			犹太哲学家马丁布伯说，关系分为两种：我与你，我与它。当我放下预期和目的，以我的全部本真与一个人或事物建立关系时，我就会与这个存在的全部本真相遇，这种没有任何预期和目的的关系，即是我与你的关系。</p>
		<p>
			在马丁布伯看来，&ldquo;我与你&rdquo;只是生命的瞬间。也许我与你神性相遇的境界太高，但至少我们普通人可以学习做到，去尊重孩子是一个独立的生命，不是父母的延续，不是一个实现我们想象中功能价值的&rdquo;它&ldquo;。</p>
		<p>
			孩子打篮球的体验、满足的表情，彰显着生命的存在感。打篮球带来的功能价值，是头脑总结出来的&ldquo;它&rdquo;，&ldquo;它&rdquo;并非不能存在，打篮球确实附带强身健体等很多好处，但如果你只能看到&ldquo;它&rdquo;，听不到孩子快乐而急促的呼吸、看不到他满足的表情，孩子由内而外散发的快乐也不能促动你的嘴角上扬，那么，你和孩子，根本不存在于一个空间，你睁着眼，确是全盲的。</p>
		<p>
			一个男孩在华德福上学后，逐渐找回自我。有一次我的朋友去他家做客，想跟这个孩子分享一个经历，孩子认真的告诉她：&ldquo;阿姨，我现在在吃棒棒糖，不能听你讲话。&rdquo;过一会吃完糖，孩子过来找阿姨说：&ldquo;我现在可以听你讲话了&ldquo;，并且很认真的看着阿姨。朋友觉得孩子有清晰的自我界限，成长得很好，而孩子的父母却无法接受孩子对自己类似的拒绝。</p>
		<p>
			如果我要拿起手机打电话，手机显示：&ldquo;我暂时不想被使用，请过一会再打&rdquo;。那我肯定要去修理它，因为手机就是一个物，物不能有自己的感受和界限。有多少父母，孩子也同样被视为物，被视为父母意志的延伸呢？我们一刻不停的焦虑孩子和自己预设中的不一样，为了避免自己的焦虑，用各种手段修理孩子，让孩子按照自己的想像去表现，事实是，孩子是另外一个独立生命，若和你预设中一样纯属巧合，不一样才是常态。</p>
		<p>
			物化的关系中，生命的底色是恐惧。很多女人，在自己没有性欲的时候，总是无法明确拒绝男朋友或老公的性要求。如果拒绝，内心会有很大的空和内疚产生。这种心理并非普通理解的自我价值感低，无法拒绝性的女人，一样有条件极好而且对自己条件非常自信的女人。问题在于，当女人活在女性角色身份中，而不是作为一个女人本身既有价值，那如何拒绝女性角色中最重要的功能之一，性功能呢。做个难听的比喻，再精美高档的性用品，如果没有性功能，那就没有价值了。</p>
		<p>
			当一个女孩诞生，即使没有重男轻女的家庭，女孩依然会感受到父母隐隐的期望：&ldquo;我家女儿比别人家儿子更有出息。&rdquo;或者&ldquo;你就做个优质乖乖女，最大的人生目标是嫁给一个好老公。&rdquo;在这里，女人要么作为和男性竞争的价值，要么作为以女性身份换取男性庇护的价值，女人本身的存在没有价值。而男性，天然的被赋予&ldquo;传宗接代，延续香火&rdquo;等面子上和精神上的价值，当然，这也是物化的价值，在这个物化价值中，男性同样难以找到自我，中国男人也被物化得一代代萎了。</p>
		<p>
			我们一路活在恐惧中，幼儿园时恐惧不听话就惨了，上学时恐惧成绩不好就一辈子就没希望了，工作后恐惧表现不佳，前途就没有了。我们在物化的车轮中打转，一刻不敢停，不敢想像，如果我不具备任何功能价值，会发生什么？</p>
		<p>
			现在，停下来，想一想，如果剥离我的所有功能价值，我是谁？我现在所追求的一切，到底是我真正想要的，还是被恐惧驱使追求的？没有任何外在标签的我，是否双脚还能踩在大地上，感受我存在？</p>
		<p>
			看见，是真正的慈悲。</p>
		<p>
			原文地址：<a href="http://blog.sina.com.cn/s/blog_4d99449a0101gs8m.html" target="_blank">http://blog.sina.com.cn/s/blog_4d99449a0101gs8m.html</a></p>
		<p>
			<img alt="看见，慈悲" class="alignnone" height="256" src="/upload/offsite/2014.01.07.4ef4487d-7bcd-4c25-895b-5b56fac3547f\2736f706-9d98-4158-a1f3-4e2353e15c08.jpg" width="360" /></p>
		<p>
			<strong>读后记：</strong></p>
		<blockquote>
			<p>
				慈悲是一种境界，慈悲就是你愿意看到他成为他，愿意让他快乐和安静。<br />
				不管是孩子的教育，还是爱情里的彼此，还是生活的朋友、工作的同仁。我们总在自以为正确的活着，指导着别人，其实既没有自己成为自己，也没有成为别人。<br />
				我们放弃选择，而选择被选择；于是很多的郁闷和纠结都来自于此吧。<br />
				我们要不要动不动就有&ldquo;教导&rdquo;他人&ldquo;爱心&rdquo;？这个我想最好出于他心，陈述事实，尽量避免主观臆断。</p>
		</blockquote>
		<p>
			<strong>附一个朋友的故事：</strong></p>
		<blockquote>
			<p>
				今天呀，我要赞美一下那位忘年交伯伯，说说他在细节处体现出的脱俗涵养。</p>
			<p>
				不久前的一天，我在QQ上给他发了消息，但他一直没有回复，我便以为是他是由于工作忙碌或是其他原因耽搁了下来，也没有在意。直到上次一起聚会的时候，我无意间提起了这件事，才知道他没有收到那条消息。伯伯思考了没收到的原因，嘱咐我再给他发一遍。后来我自己倒忘记了，没有再给他发。可是他却把这件事放在了心上，先是在QQ上告知自己仍未收到，还给我打来了电话，当时我没有把手机带在身边，所以没有接，之后他又给妈妈打了电话，着重说明事情的原委，说自己并不是刻意不回，以免我对他产生误会。</p>
			<p>
				我得知这些，觉得很温暖，一般来说，长辈或是比我们年长的人对待我们的态度虽然说不上随意轻忽，但也很难做到如此郑重其事，而他在这件事的处理上让我感受到了自己是被尊重的。其实不用特别说明，我也能够理解。经由他解释之后，更是感到心清如镜。我也要向他学习，从细节出发，切实地尊重别人的情感，不因为彼此熟悉就轻慢以待，用心呵护真情，使之保持始终如一的温热。</p>
			<p>
				伯伯担心我会压力太大，和妈妈通电话时一再让她跟爸爸说明白，不希望他给我很大压力。他觉得凡事都要顺应个体的成长节奏，顺其自然，不可操之过急，还向妈妈列举了在他眼中我具备的种种优点。且根据他教育儿子的经验，给妈妈提出了一些可行性的建议。听了伯伯对我的夸赞和赏识，在不知不觉间妈妈已心花怒放，于是他们根据我的情况作了一番探讨和畅想，谈话的氛围很是轻松愉快。</p>
		</blockquote>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/see-is-real-compassion</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 07 Jan 2014 02:07:44 GMT</pubDate></item><item><title><![CDATA[谦卑的架构师]]></title><description><![CDATA[<div id="readability-page-1" class="page"><div class=""><p><a href="http://architects.dzone.com/users/jb30665">Johannes Brodwall</a>是一位程序员、解决方案架构师、用户组与会议组织者、会议演讲者与布道师。Johannes一直在不遗余力地将敏捷原则应用到大型软件项目中，不过他真正感兴趣的是与全世界的程序员分享更多关于编程的有趣经验。目前，Johannes就职于Exilesoft，担任首席科学家一职。近日，Johannes撰写了题为<a href="http://architects.dzone.com/articles/humble-architects">谦卑的架构师</a>一文，探讨了架构师所应该遵循的几个原则，在程序员群体中引起了很大的反响。</p><p>谦卑并不是软件架构师一个非常常见的特质。我曾与一些可怕的架构师共事过，最近也与一位非常棒的架构师合作过。基于此，我根据每个架构师都喜欢的方式将我过去的经验汇聚起来，以规则集的形式写出来，与大家一起分享并讨论。</p><h2>规则0：不要愚蠢地做出假设</h2><p>看起来有些架构师会觉得一旦让开发者自行处理某些事情，那么他们就会像猴子那样杂乱无序。根据我的经验，这种情况其实是很少会出现的。只有一种情况会让开发者做傻事，那就是他们在心里默默抵触架构师。如果遵循着这条原则，那么其他的都将是细节问题。</p><h2>规则1：你可能是错误的</h2><p>在审查某人的设计想法时，我更倾向于以坦诚布公的方式询问问题。也许我觉得开发者忽略掉了某个关键的事实，比如说并发等。对于这种情况有几种不同的方式：</p><ul>
    <li>架构师：你不能那样做，因为它破坏了编码规范。</li>
    <li>架构师：你不能那样做，因为当同时有几个用户时是不安全的。</li>
    <li>架构师：你想过它是如何处理几个用户的情况的么？</li>
    <li>架构师：你提出的解决方案是如何处理几个用户的情况的？</li>
</ul><p>亲爱的架构师们：请对这些方式评级，按照从最差到最好的方式排序（提示：这是个很简单的事，不过很多架构师却还是做不好）。</p><h2>规则2：对技术保持谨慎的态度</h2><p>每种技术都是有代价的，而很多技术所带来的好处是非常有限的。下面是我使用过的一些代价要远远高于所带来的好处的一个技术列表（如果不知道也没关系，关键在于数量）：JavaServer Pages、Java Server Faces、JAX-WS、Hibernate、Spring、EJB、Oracle SOA Server、IBM WebSphere、Wicket、Google Web Toolkit、Adobe Flex、JBoss jBPM、JMS（所有实现）与 JBoss。下面是我非常喜欢使用的一个技术列表：JUnit、Jetty、Joda-time与Java标准版。</p><p>看看下面的对话吧：</p><ul>
    <li>架构师：你应该使用技术X。</li>
    <li>我：我看过技术X，不过不清楚怎样通过它来解决业务问题。</li>
    <li>架构师：你的意思是？</li>
    <li>我：这是我们需要做的事情。。。这是技术X所能解决的问题。。。我不知道他们之间是如何匹配的。</li>
    <li>架构师：那你的建议是什么呢？</li>
    <li>我：我觉得可以通过普通的Java来解决这个问题。事实上，昨天晚上我已经做了一个很不错的概念验证。</li>
    <li>架构师：太酷了，我们就这么干吧。</li>
</ul><h2>规则3：一致性并不如你所想象的那么重要</h2><p>我总听到有人这么说：</p><blockquote> 	架构师：没错，我知道这种方式看起来很笨拙，不过你必须这么做。你也看到了，如果不这么做，那么系统就会变得不一致，也难以维护。</blockquote><p>好吧，我确实很少接触维护方面的工作，不过我知道在处理任何系统时，最困难的部分在于理解系统的业务逻辑。系统X（有自己的一套业务逻辑）与系统Y（有另一套业务逻辑）是否是一致的并不那么重要。如果说系统X非常复杂的原因在于它为了保持与系统Y的一致性而增加了很多层次，那我真的要抓狂了。不同的上下文有不同的权衡。还记得规则0吗，开发者在给定的上下文进行开发，那么他就会为该上下文创建一个很好的解决方案。另外，我还从来没有见过规模不大的系统非常复杂，等系统逐步变大时就变得更好维护了。如果程序员感到不爽的原因只是因为有些代码的花括号使用的是一种风格，而另外一些代码则采用了其他风格，那么我也真的要崩溃了。</p><h2>规则4：至底向上的一致性要优于自上而下的一致性</h2><p>我有一种方式可以实现系统中更多的一致性：</p><ul>
    <li>创建一个参考应用，并使用易于遵循的架构。如果这件事干得好，那么开发者们就会始终记得不要偏离这个架构。除非他们不想，否则这么做就没问题。</li>
    <li>培育一种互助的文化。能够看到彼此代码的开发者要比那些只看到自己代码的具有更好的一致性。结对编程、代码审查以及技术分享讲座都有助于这种文化的培育。</li>
</ul><h2>规则5：跨系统的重用是次要的优化</h2><p>重用会导致耦合。如果系统X与系统Y重用了某些功能，系统X需要修改某个功能，这就会影响到系统Y。至少，系统X的开发团队必须要对重用的功能创建一个私有的分支，这意味着该功能实际上并不会再被重用了。更糟糕的是，被重用的功能的某个改变会导致系统Y出现Bug。在进行跨系统重用时，你所重用的应该是要么稳定的（比如说，Java SE平台，或是某个非常稳定的功能），要么是策略性的。根据策略重用，我指的是集成了信息而不仅仅是复制功能的服务。换句话说，重用要么是使用，要么是集成。重复是你的朋友。</p><h2>规则6：分清规则与教条</h2><p>任何编码标准都需要有原则，原因有3：</p><ul>
    <li>不安全：代码的Bug只会在某些情况下才能显现出来</li>
    <li>费解的：我不理解接下来的事情</li>
    <li>异端：某些人不喜欢某些代码风格</li>
</ul><p>如果有一条规则说到“所有属性都必须要有JavaDoc注释”，那么你认为这是个安全问题、让人费解的问题还是异端呢？看看下面这个代码示例：</p><pre>/**
 *  Contains the name value of the object
 */
private String name;
</pre><p>如果规则这样说到“左花括号不能另起一行”，那么这条规则呢“花括号的风格应该保持一致”？这是个什么问题呢？我们应该将更多的精力放在编写恰当的代码上，而不是被这些该死的一致性搞得心烦意乱。</p><h2>规则7：请保持谦卑的态度</h2><p>在从事软件开发的这些年中，我看到软件架构师的所作所为带来的更多是损害而非帮助。作为一个专业的角色，我认为如果能将这些架构师从团队中剔除出去将会节省不少开支。如果你所从事的职业给团队带来的弊大于利，那么你有两个选择：一是不断改进自己，二是寄希望于没人会注意到你。</p><!-- overlay --><!-- reply box --><!-- edit comment box --><!-- notification popup --></div></div>]]></description><link>http://zackyang.com/post/humble-architect</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 07 Jan 2014 02:07:40 GMT</pubDate></item><item><title><![CDATA[变成星星的孩子]]></title><description><![CDATA[<div class="page" id="readability-page-1">
	<div itemprop="description">
		<p>
			&ldquo;小风，你怎么又尿床了！你说你都多大了，你都5岁了。为什么还天天尿床。&rdquo;妈妈坐在床上，生气地看着湿了的床单，把它掀起来丢到地上。</p>
		<p>
			&ldquo;因为我不想离开妈妈。&rdquo;小风坐在床上，讨好地对着妈妈嘟嘴。他把衣服裤子拿过来，捡起衣服要妈妈帮助穿。</p>
		<p>
			&ldquo;你说，你5岁了，还不会自己穿衣服。&rdquo;妈妈还在生气。</p>
		<p>
			&ldquo;我会啊，但我还是想妈妈帮我穿。&rdquo;</p>
		<p>
			妈妈把衣服摊开，让小风伸进手来，妈妈的脸上还是一片乌云，话也硬邦邦的。&ldquo;伸左手。停，伸右手。&rdquo;</p>
		<p>
			小风像个木偶人一样乖乖任妈妈摆弄。小风说：&ldquo;妈妈，昨天晚上，那个老爷爷又划着月亮船来了。他说&mdash;&mdash;&rdquo;</p>
		<p>
			&ldquo;站起来，伸腿。&rdquo;妈妈似乎没在听小风说话。</p>
		<p>
			小风继续说：&ldquo;他问我，要不要到天上去，我说好啊，我要和爸爸妈妈一起去。他说不可以和爸爸妈妈，我就说，那我就不去了。他说，不去就会一直尿床。&rdquo;</p>
		<p>
			&ldquo;不要为你的尿床找借口，这个故事你已经说了一百遍了。&rdquo;妈妈不耐烦地说道，&ldquo;真是让人操心。&rdquo;</p>
		<p>
			&ldquo;可是，我说的是真的，老爷爷天天晚上都要问我去不去。&rdquo;</p>
		<p>
			&ldquo;那你去吧去吧，去了就不会尿床了。&rdquo;妈妈把小风抱下床，捡起地上的床单说，&ldquo;快去吃早饭。&rdquo;</p>
		<p>
			爸爸已经坐在桌子上，边吃着稀饭边看着报纸。小风慢条条地洗了手，爬上凳子。</p>
		<p>
			&ldquo;你今天又尿床了。&rdquo;爸爸笑了笑，眼睛离开报纸看了看小风。</p>
		<p>
			小风没答应。猫从阳台弓着腰，像走模特步一样地走进来。</p>
		<p>
			&ldquo;喵喵还没吃饭吧，今天的蘑菇很好吃的哟。&rdquo;小风斜着身子对猫说。</p>
		<p>
			&ldquo;我是猫，猫才不吃蘑菇呢。&rdquo;喵喵没好气的走到小风桌子边下趴着。</p>
		<p>
			&ldquo;可是妈妈说了不能挑食，喵喵也不能挑食哦。&rdquo;小风说。</p>
		<p>
			&ldquo;妈妈还说吃饭时好好吃饭。喵喵是只猫，又听不懂人话。你不要老是自言自语。&rdquo;妈妈刚把床单丢进洗衣机里，洗衣机轰隆隆响。</p>
		<p>
			&ldquo;没事，孩子嘛。&rdquo;爸爸说。</p>
		<p>
			&ldquo;可是喵喵能听得懂，他还能说。&rdquo;小风还想说，又被妈妈的一话&ldquo;快吃饭&rdquo;给打断了。为什么他们听不到喵喵说话呢？小风想。</p>
		<p>
			吃完早饭，爸爸拿着包就去上班了。妈妈开始收拾碗筷，小风偷拿了一块肉跑到阳台，喵喵也跟着跑到阳台。</p>
		<p>
			&ldquo;自己好好玩，不要爬到阳台，妈妈搞卫生。&rdquo;从厨房里传来妈妈的话。</p>
		<p>
			&ldquo;知道了。&rdquo;小风应了声，把肉喂给喵喵，喵喵高兴地吃起来。</p>
		<p>
			&ldquo;你看你都这么胖了，还这么贪吃。&rdquo;小风摸着喵喵软软的背。</p>
		<p>
			&ldquo;猫就是要，啧啧，吃肉，啧啧&rdquo;喵喵把肉咬在嘴里，吧唧吧唧地吃起来。</p>
		<p>
			&ldquo;为什么他们听不懂你说话啊。&rdquo;小风说。</p>
		<p>
			&ldquo;我也不懂，可能他们是大人吧。&rdquo;</p>
		<p>
			&ldquo;小风也长成大人了，是不是也听不到喵喵讲话了。&rdquo;</p>
		<p>
			&ldquo;可能吧。&rdquo;</p>
		<p>
			&ldquo;那小风会难过的。&rdquo;</p>
		<p>
			&ldquo;喵喵也会，喵喵就再吃不到小风给的肉了。&rdquo;</p>
		<p>
			喵喵吃完肉，抖抖全身，一个猫跳，跳到玻璃窗檐的大理石上，缩成一团，开始晒太阳。</p>
		<p>
			小风说：&ldquo;那个老爷爷昨天晚上又来了，他还拿个亮晶晶的糖，说吃了就不会尿床，还能到天上去玩。&rdquo;</p>
		<p>
			&ldquo;那你要去吗？&rdquo;喵喵问。</p>
		<p>
			&ldquo;我也不知道啊。&rdquo;</p>
		<p>
			妈妈洗完碗筷，便带着小风上街买菜，一路上小风缠着妈妈买这买那。买完菜回家，妈妈又开始搞卫生，把洗衣机洗好的衣服和床单晒起来。</p>
		<p>
			中午饭，爸爸没有回家吃。&ldquo;爸爸太忙了，要工作，要赚钱，这样小风才有饭有肉吃啊。&rdquo;妈妈说。</p>
		<p>
			睡了午觉，看了会儿电视，妈妈又要开始做晚饭了，小风一个人坐在卧室里吃零食，搭积木。</p>
		<p>
			&ldquo;小风，爸爸回来啦。&rdquo;到了6点，爸爸夹着包，回到家。一开门，小风就迎上去要爸爸亲。&ldquo;爸爸，以后要早点回来，小风想爸爸。&rdquo;</p>
		<p>
			&ldquo;小风。&rdquo;妈妈在卧室叫到：&ldquo;你怎么又不收拾好玩具，零食吃得满地都是。真是什么时候才能长大。&rdquo;</p>
		<p>
			吃晚饭时，小风还把碗打碎了，又惹得妈妈生气。&ldquo;你都这么大了，还不会用筷子，你看，吃得满桌子都是。&rdquo;</p>
		<p>
			妈妈好像真得生气了，小风想。</p>
		<p>
			&ldquo;妈妈，晚上我想和你和爸爸一起睡。&rdquo;晚上的时候，小风钻到爸爸妈妈的被窝里。</p>
		<p>
			&ldquo;要知道，你5岁了。你还天天尿床。快回到你自己房间，妈妈的床要是被你尿湿了妈妈可要揍你。&rdquo;</p>
		<p>
			&ldquo;那我不尿床了。今天。要和爸爸一起睡。&rdquo;</p>
		<p>
			&ldquo;不行，快回去。&rdquo;妈妈板着脸，小风只好乖乖爬下床，走进自己房间。</p>
		<p>
			&ldquo;把尿尿了。&rdquo;妈妈喊到。</p>
		<p>
			第二天早上，小风还在睡觉，妈妈把手伸起他的被子里摸来摸去，干干的，这可让她吃了一惊。</p>
		<p>
			妈妈轻轻地摇醒小风，温柔地笑道：&ldquo;小风，起床啦。今天你没尿床哦。&rdquo;</p>
		<p>
			小风揉了揉眼睛，半睡半醒地叫了声妈妈，坐了起来。</p>
		<p>
			&ldquo;来，穿衣服。&rdquo;妈妈把衣服摊开，示意小风伸出手来。</p>
		<p>
			但小风抓过衣服，又弯下腰抓过裤子。&ldquo;妈妈，我自己来，我自己会穿。&rdquo;</p>
		<p>
			妈妈愣住了，呆呆看着小风，小风自己很快就穿好了衣服裤子，还探伸下脚，自己跳下床。</p>
		<p>
			妈妈呆坐在床上好半天，以往这时候她都要骂骂咧咧地把床单拿去洗衣机，然而今天她却不知道该做什么。</p>
		<p>
			&ldquo;爸，你要不要快点吃，会不会迟到？&rdquo;小风坐在桌上，夹起筷子夹菜。</p>
		<p>
			&ldquo;哟，小子。不要爸爸陪你啦。&rdquo;爸爸放下报纸，笑着看小风，这一瞧，让他有些吃惊&mdash;&mdash;&ldquo;你会用筷子啦？！&rdquo;</p>
		<p>
			&ldquo;对啊。&rdquo;小风把筷子放入嘴里。</p>
		<p>
			这时候妈妈已经坐上桌，一幅有心事重重的样子。</p>
		<p>
			猫从阳台缓缓踱步而来。</p>
		<p>
			&ldquo;小风，你今天不问喵喵吃了没。&rdquo;妈妈看着小风，吞吞吐吐的说。</p>
		<p>
			爸爸还想笑妈妈，怎么自己也变小孩子了。但是他还没开口，就又吃了一惊&mdash;&mdash;</p>
		<p>
			&ldquo;妈妈，喵喵是猫，动物怎么会听得懂我说话呢。&rdquo;小风夹了一块肉吃起来。</p>
		<p>
			爸爸妈妈都看着小风，眼睛里写满问号，嘴角轻轻抽动，似乎本该高兴，却又笑不起来。</p>
		<p>
			喵喵本来还在伸懒腰的，听到小风的话像被点穴一样得定在那里一动不动，嘴巴张得大大地望着小风。</p>
		<p>
			&ldquo;吃啊。爸爸，上班不能迟到啊。&rdquo;小风说。</p>
		<p>
			&ldquo;这孩子，真是&mdash;&mdash;长大了&mdash;&mdash;&rdquo;</p>
		<p>
			那天夜里究竟发生了什么？&mdash;&mdash;</p>
		<p>
			小风爬上自己的被窝，月亮船又划来了，停在窗外，月亮上面坐着一位老爷爷。</p>
		<p>
			&ldquo;老爷爷，我不要尿床了。我想长大。&rdquo;小风说。</p>
		<p>
			&ldquo;要来天上玩？&rdquo;</p>
		<p>
			&ldquo;好。&rdquo;</p>
		<p>
			&ldquo;那把这糖吃了。&rdquo;老爷爷手里拿着把鱼竿，他伸长鱼竿，鱼线上钩着一粒亮晶晶的糖果落在小风枕头上。</p>
		<p>
			小风吞下糖果，老爷爷把鱼竿用力一甩，小风的灵魂就飞了起来，变成了一颗小星星。老爷爷把星星放进兜里，划着桨，月亮船驶向暗蓝色的星空。</p>
		<p>
			那天后，小风真得长大了。他不再尿床，不再像十万个为什么不停得问爸爸问题，不再哭着闹着要妈妈买零食，不再对着喵喵和花草树木说话&hellip;&hellip;妈妈有时候会忍不住问，&ldquo;小风，你还记得以前那些事吗？&rdquo;</p>
		<p>
			&ldquo;记不太清了，妈妈。&rdquo;</p>
		<p>
			爸爸和妈妈有时候会在半夜来到小风的房间，俯下身轻轻亲着睡着的小风。他们站在窗户下，抬头看着月亮。妈妈拿着亮晶晶的糖纸，望着一眨一眨的星星，好像看到那些星星是一个个孩子，在天空上奔跑着，欢笑着，无忧无虑。</p>
		<p>
			&ldquo;再也不尿床了。&rdquo;妈妈叹了口气。爸爸轻轻地拍拍妈妈的肩，&ldquo;儿子长大了。&rdquo;</p>
		<p>
			而另一个角落，一只猫对着月亮喵喵地叫，好像在说：&ldquo;我要吃肉，我要吃肉。&rdquo;</p>
		<p>
			<img alt="变成星星的孩子" class="alignnone" height="329" src="/upload/offsite/2014.01.07.bb352c6e-597d-4b7c-9f10-679412e88710\db9f558c-23fa-4e50-a7d4-b70187a454da.jpg" width="360" /></p>
		<p>
			<span><strong>左岸记：</strong>如果没有离开，就不知道，原来相遇是那么值得纪念，过程是那么值得回味；如果没有失去，永远不明白，那些东西是多么重要，不明白为什么那时我们说好的东西现在都变了；如果我们不再喜欢天真地问为什么，你知道是为什么吗？，也许错过之前，我们永远不知道自己错过了什么。</span></p>
	</div>
</div>
<p>
	&nbsp;</p>
]]></description><link>http://zackyang.com/post/children-become-stars</link><guid isPermaLink="false"><_bsontype>ObjectID</_bsontype></guid><dc:creator><![CDATA[我是你的猪]]></dc:creator><pubDate>Tue, 07 Jan 2014 02:07:33 GMT</pubDate></item></channel></rss>